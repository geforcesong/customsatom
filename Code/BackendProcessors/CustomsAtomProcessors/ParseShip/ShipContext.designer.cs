#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ParseShip
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CustomsAtom")]
	public partial class ShipContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertShip(Ship instance);
    partial void UpdateShip(Ship instance);
    partial void DeleteShip(Ship instance);
    #endregion
		
		public ShipContextDataContext() : 
				base(global::ParseShip.Properties.Settings.Default.CustomsAtomConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ShipContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShipContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShipContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShipContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Ship> Ships
		{
			get
			{
				return this.GetTable<Ship>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ship")]
	public partial class Ship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Conveyance;
		
		private string _VoyageNumber;
		
		private string _CallNumber;
		
		private string _Conveyancer;
		
		private string _Agent;
		
		private string _Dock;
		
		private System.Nullable<System.DateTime> _LeaveDate;
		
		private string _IMONumber;
		
		private string _Html;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConveyanceChanging(string value);
    partial void OnConveyanceChanged();
    partial void OnVoyageNumberChanging(string value);
    partial void OnVoyageNumberChanged();
    partial void OnCallNumberChanging(string value);
    partial void OnCallNumberChanged();
    partial void OnConveyancerChanging(string value);
    partial void OnConveyancerChanged();
    partial void OnAgentChanging(string value);
    partial void OnAgentChanged();
    partial void OnDockChanging(string value);
    partial void OnDockChanged();
    partial void OnLeaveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLeaveDateChanged();
    partial void OnIMONumberChanging(string value);
    partial void OnIMONumberChanged();
    partial void OnHtmlChanging(string value);
    partial void OnHtmlChanged();
    #endregion
		
		public Ship()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Conveyance", DbType="NVarChar(32) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Conveyance
		{
			get
			{
				return this._Conveyance;
			}
			set
			{
				if ((this._Conveyance != value))
				{
					this.OnConveyanceChanging(value);
					this.SendPropertyChanging();
					this._Conveyance = value;
					this.SendPropertyChanged("Conveyance");
					this.OnConveyanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoyageNumber", DbType="NVarChar(64) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VoyageNumber
		{
			get
			{
				return this._VoyageNumber;
			}
			set
			{
				if ((this._VoyageNumber != value))
				{
					this.OnVoyageNumberChanging(value);
					this.SendPropertyChanging();
					this._VoyageNumber = value;
					this.SendPropertyChanged("VoyageNumber");
					this.OnVoyageNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CallNumber", DbType="NVarChar(32)")]
		public string CallNumber
		{
			get
			{
				return this._CallNumber;
			}
			set
			{
				if ((this._CallNumber != value))
				{
					this.OnCallNumberChanging(value);
					this.SendPropertyChanging();
					this._CallNumber = value;
					this.SendPropertyChanged("CallNumber");
					this.OnCallNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Conveyancer", DbType="NVarChar(64)")]
		public string Conveyancer
		{
			get
			{
				return this._Conveyancer;
			}
			set
			{
				if ((this._Conveyancer != value))
				{
					this.OnConveyancerChanging(value);
					this.SendPropertyChanging();
					this._Conveyancer = value;
					this.SendPropertyChanged("Conveyancer");
					this.OnConveyancerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Agent", DbType="NVarChar(64)")]
		public string Agent
		{
			get
			{
				return this._Agent;
			}
			set
			{
				if ((this._Agent != value))
				{
					this.OnAgentChanging(value);
					this.SendPropertyChanging();
					this._Agent = value;
					this.SendPropertyChanged("Agent");
					this.OnAgentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dock", DbType="NVarChar(64)")]
		public string Dock
		{
			get
			{
				return this._Dock;
			}
			set
			{
				if ((this._Dock != value))
				{
					this.OnDockChanging(value);
					this.SendPropertyChanging();
					this._Dock = value;
					this.SendPropertyChanged("Dock");
					this.OnDockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LeaveDate
		{
			get
			{
				return this._LeaveDate;
			}
			set
			{
				if ((this._LeaveDate != value))
				{
					this.OnLeaveDateChanging(value);
					this.SendPropertyChanging();
					this._LeaveDate = value;
					this.SendPropertyChanged("LeaveDate");
					this.OnLeaveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IMONumber", DbType="NVarChar(32)")]
		public string IMONumber
		{
			get
			{
				return this._IMONumber;
			}
			set
			{
				if ((this._IMONumber != value))
				{
					this.OnIMONumberChanging(value);
					this.SendPropertyChanging();
					this._IMONumber = value;
					this.SendPropertyChanged("IMONumber");
					this.OnIMONumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Html", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Html
		{
			get
			{
				return this._Html;
			}
			set
			{
				if ((this._Html != value))
				{
					this.OnHtmlChanging(value);
					this.SendPropertyChanging();
					this._Html = value;
					this.SendPropertyChanged("Html");
					this.OnHtmlChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
