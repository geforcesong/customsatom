//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProTemplate
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace ProTemplate.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The 'Boss' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class Boss : Entity
    {
        
        private EntityCollection<Customer> _customer;
        
        private int _id;
        
        private string _name;
        
        private string _pinYin;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPinYinChanging(string value);
        partial void OnPinYinChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Boss"/> class.
        /// </summary>
        public Boss()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Customer"/> entity instances.
        /// </summary>
        [Association("Boss_Customer", "ID", "BossId")]
        [XmlIgnore()]
        public EntityCollection<Customer> Customer
        {
            get
            {
                if ((this._customer == null))
                {
                    this._customer = new EntityCollection<Customer>(this, "Customer", this.FilterCustomer, this.AttachCustomer, this.DetachCustomer);
                }
                return this._customer;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PinYin' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public string PinYin
        {
            get
            {
                return this._pinYin;
            }
            set
            {
                if ((this._pinYin != value))
                {
                    this.OnPinYinChanging(value);
                    this.RaiseDataMemberChanging("PinYin");
                    this.ValidateProperty("PinYin", value);
                    this._pinYin = value;
                    this.RaiseDataMemberChanged("PinYin");
                    this.OnPinYinChanged();
                }
            }
        }
        
        private void AttachCustomer(Customer entity)
        {
            entity.Boss = this;
        }
        
        private void DetachCustomer(Customer entity)
        {
            entity.Boss = null;
        }
        
        private bool FilterCustomer(Customer entity)
        {
            return (entity.BossId == this.ID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Corporation' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class Corporation : Entity
    {
        
        private string _corporationCode;
        
        private string _corporationName;
        
        private string _level;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCorporationCodeChanging(string value);
        partial void OnCorporationCodeChanged();
        partial void OnCorporationNameChanging(string value);
        partial void OnCorporationNameChanged();
        partial void OnLevelChanging(string value);
        partial void OnLevelChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Corporation"/> class.
        /// </summary>
        public Corporation()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CorporationCode' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CorporationCode
        {
            get
            {
                return this._corporationCode;
            }
            set
            {
                if ((this._corporationCode != value))
                {
                    this.OnCorporationCodeChanging(value);
                    this.ValidateProperty("CorporationCode", value);
                    this._corporationCode = value;
                    this.RaisePropertyChanged("CorporationCode");
                    this.OnCorporationCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CorporationName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string CorporationName
        {
            get
            {
                return this._corporationName;
            }
            set
            {
                if ((this._corporationName != value))
                {
                    this.OnCorporationNameChanging(value);
                    this.RaiseDataMemberChanging("CorporationName");
                    this.ValidateProperty("CorporationName", value);
                    this._corporationName = value;
                    this.RaiseDataMemberChanged("CorporationName");
                    this.OnCorporationNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Level' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Level
        {
            get
            {
                return this._level;
            }
            set
            {
                if ((this._level != value))
                {
                    this.OnLevelChanging(value);
                    this.RaiseDataMemberChanging("Level");
                    this.ValidateProperty("Level", value);
                    this._level = value;
                    this.RaiseDataMemberChanged("Level");
                    this.OnLevelChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._corporationCode;
        }
    }
    
    /// <summary>
    /// The 'Country' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class Country : Entity
    {
        
        private string _code;
        
        private string _englishName;
        
        private string _name;
        
        private string _pinYin;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnEnglishNameChanging(string value);
        partial void OnEnglishNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPinYinChanging(string value);
        partial void OnPinYinChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Country"/> class.
        /// </summary>
        public Country()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(16)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EnglishName' value.
        /// </summary>
        [DataMember()]
        [StringLength(128)]
        public string EnglishName
        {
            get
            {
                return this._englishName;
            }
            set
            {
                if ((this._englishName != value))
                {
                    this.OnEnglishNameChanging(value);
                    this.RaiseDataMemberChanging("EnglishName");
                    this.ValidateProperty("EnglishName", value);
                    this._englishName = value;
                    this.RaiseDataMemberChanged("EnglishName");
                    this.OnEnglishNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PinYin' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public string PinYin
        {
            get
            {
                return this._pinYin;
            }
            set
            {
                if ((this._pinYin != value))
                {
                    this.OnPinYinChanging(value);
                    this.RaiseDataMemberChanging("PinYin");
                    this.ValidateProperty("PinYin", value);
                    this._pinYin = value;
                    this.RaiseDataMemberChanged("PinYin");
                    this.OnPinYinChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'Currency' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class Currency : Entity
    {
        
        private string _code;
        
        private string _name;
        
        private string _pinYin;
        
        private string _symbol;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPinYinChanging(string value);
        partial void OnPinYinChanged();
        partial void OnSymbolChanging(string value);
        partial void OnSymbolChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Currency"/> class.
        /// </summary>
        public Currency()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(16)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PinYin' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public string PinYin
        {
            get
            {
                return this._pinYin;
            }
            set
            {
                if ((this._pinYin != value))
                {
                    this.OnPinYinChanging(value);
                    this.RaiseDataMemberChanging("PinYin");
                    this.ValidateProperty("PinYin", value);
                    this._pinYin = value;
                    this.RaiseDataMemberChanged("PinYin");
                    this.OnPinYinChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Symbol' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string Symbol
        {
            get
            {
                return this._symbol;
            }
            set
            {
                if ((this._symbol != value))
                {
                    this.OnSymbolChanging(value);
                    this.RaiseDataMemberChanging("Symbol");
                    this.ValidateProperty("Symbol", value);
                    this._symbol = value;
                    this.RaiseDataMemberChanged("Symbol");
                    this.OnSymbolChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'Customer' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class Customer : Entity
    {
        
        private string _address;
        
        private EntityRef<Boss> _boss;
        
        private int _bossId;
        
        private string _city;
        
        private EntityCollection<CustomerFeeSetting> _customerFeeSetting;
        
        private EntityCollection<Declaration> _declaration;
        
        private EntityCollection<Examination> _examination;
        
        private int _id;
        
        private bool _isActive;
        
        private string _name;
        
        private string _phoneNumber;
        
        private string _pinYin;
        
        private string _postalCode;
        
        private EntityCollection<UserGroupCustomer> _userGroupCustomer;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnBossIdChanging(int value);
        partial void OnBossIdChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPhoneNumberChanging(string value);
        partial void OnPhoneNumberChanged();
        partial void OnPinYinChanging(string value);
        partial void OnPinYinChanged();
        partial void OnPostalCodeChanging(string value);
        partial void OnPostalCodeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class.
        /// </summary>
        public Customer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        [StringLength(128)]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Boss"/> entity.
        /// </summary>
        [Association("Boss_Customer", "BossId", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public Boss Boss
        {
            get
            {
                if ((this._boss == null))
                {
                    this._boss = new EntityRef<Boss>(this, "Boss", this.FilterBoss);
                }
                return this._boss.Entity;
            }
            set
            {
                Boss previous = this.Boss;
                if ((previous != value))
                {
                    this.ValidateProperty("Boss", value);
                    if ((previous != null))
                    {
                        this._boss.Entity = null;
                        previous.Customer.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.BossId = value.ID;
                    }
                    else
                    {
                        this.BossId = default(int);
                    }
                    this._boss.Entity = value;
                    if ((value != null))
                    {
                        value.Customer.Add(this);
                    }
                    this.RaisePropertyChanged("Boss");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BossId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int BossId
        {
            get
            {
                return this._bossId;
            }
            set
            {
                if ((this._bossId != value))
                {
                    this.OnBossIdChanging(value);
                    this.RaiseDataMemberChanging("BossId");
                    this.ValidateProperty("BossId", value);
                    this._bossId = value;
                    this.RaiseDataMemberChanged("BossId");
                    this.OnBossIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CustomerFeeSetting"/> entity instances.
        /// </summary>
        [Association("Customer_CustomerFeeSetting", "ID", "CustomerID")]
        [XmlIgnore()]
        public EntityCollection<CustomerFeeSetting> CustomerFeeSetting
        {
            get
            {
                if ((this._customerFeeSetting == null))
                {
                    this._customerFeeSetting = new EntityCollection<CustomerFeeSetting>(this, "CustomerFeeSetting", this.FilterCustomerFeeSetting, this.AttachCustomerFeeSetting, this.DetachCustomerFeeSetting);
                }
                return this._customerFeeSetting;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Declaration"/> entity instances.
        /// </summary>
        [Association("Customer_Declaration", "ID", "CustomerID")]
        [XmlIgnore()]
        public EntityCollection<Declaration> Declaration
        {
            get
            {
                if ((this._declaration == null))
                {
                    this._declaration = new EntityCollection<Declaration>(this, "Declaration", this.FilterDeclaration, this.AttachDeclaration, this.DetachDeclaration);
                }
                return this._declaration;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Examination"/> entity instances.
        /// </summary>
        [Association("Customer_Examination", "ID", "CustomerID")]
        [XmlIgnore()]
        public EntityCollection<Examination> Examination
        {
            get
            {
                if ((this._examination == null))
                {
                    this._examination = new EntityCollection<Examination>(this, "Examination", this.FilterExamination, this.AttachExamination, this.DetachExamination);
                }
                return this._examination;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsActive' value.
        /// </summary>
        [DataMember()]
        public bool IsActive
        {
            get
            {
                return this._isActive;
            }
            set
            {
                if ((this._isActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.RaiseDataMemberChanging("IsActive");
                    this.ValidateProperty("IsActive", value);
                    this._isActive = value;
                    this.RaiseDataMemberChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PhoneNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string PhoneNumber
        {
            get
            {
                return this._phoneNumber;
            }
            set
            {
                if ((this._phoneNumber != value))
                {
                    this.OnPhoneNumberChanging(value);
                    this.RaiseDataMemberChanging("PhoneNumber");
                    this.ValidateProperty("PhoneNumber", value);
                    this._phoneNumber = value;
                    this.RaiseDataMemberChanged("PhoneNumber");
                    this.OnPhoneNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PinYin' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public string PinYin
        {
            get
            {
                return this._pinYin;
            }
            set
            {
                if ((this._pinYin != value))
                {
                    this.OnPinYinChanging(value);
                    this.RaiseDataMemberChanging("PinYin");
                    this.ValidateProperty("PinYin", value);
                    this._pinYin = value;
                    this.RaiseDataMemberChanged("PinYin");
                    this.OnPinYinChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PostalCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(8)]
        public string PostalCode
        {
            get
            {
                return this._postalCode;
            }
            set
            {
                if ((this._postalCode != value))
                {
                    this.OnPostalCodeChanging(value);
                    this.RaiseDataMemberChanging("PostalCode");
                    this.ValidateProperty("PostalCode", value);
                    this._postalCode = value;
                    this.RaiseDataMemberChanged("PostalCode");
                    this.OnPostalCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="UserGroupCustomer"/> entity instances.
        /// </summary>
        [Association("Customer_UserGroupCustomer", "ID", "CustomerId")]
        [XmlIgnore()]
        public EntityCollection<UserGroupCustomer> UserGroupCustomer
        {
            get
            {
                if ((this._userGroupCustomer == null))
                {
                    this._userGroupCustomer = new EntityCollection<UserGroupCustomer>(this, "UserGroupCustomer", this.FilterUserGroupCustomer, this.AttachUserGroupCustomer, this.DetachUserGroupCustomer);
                }
                return this._userGroupCustomer;
            }
        }
        
        private bool FilterBoss(Boss entity)
        {
            return (entity.ID == this.BossId);
        }
        
        private void AttachCustomerFeeSetting(CustomerFeeSetting entity)
        {
            entity.Customer = this;
        }
        
        private void DetachCustomerFeeSetting(CustomerFeeSetting entity)
        {
            entity.Customer = null;
        }
        
        private bool FilterCustomerFeeSetting(CustomerFeeSetting entity)
        {
            return (entity.CustomerID == this.ID);
        }
        
        private void AttachDeclaration(Declaration entity)
        {
            entity.Customer = this;
        }
        
        private void DetachDeclaration(Declaration entity)
        {
            entity.Customer = null;
        }
        
        private bool FilterDeclaration(Declaration entity)
        {
            return (entity.CustomerID == this.ID);
        }
        
        private void AttachExamination(Examination entity)
        {
            entity.Customer = this;
        }
        
        private void DetachExamination(Examination entity)
        {
            entity.Customer = null;
        }
        
        private bool FilterExamination(Examination entity)
        {
            return (entity.CustomerID == this.ID);
        }
        
        private void AttachUserGroupCustomer(UserGroupCustomer entity)
        {
            entity.Customer = this;
        }
        
        private void DetachUserGroupCustomer(UserGroupCustomer entity)
        {
            entity.Customer = null;
        }
        
        private bool FilterUserGroupCustomer(UserGroupCustomer entity)
        {
            return (entity.CustomerId == this.ID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'CustomerFeeSetting' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class CustomerFeeSetting : Entity
    {
        
        private decimal _amount;
        
        private decimal _cost;
        
        private EntityRef<Customer> _customer;
        
        private int _customerID;
        
        private EntityRef<FeeType> _feeType;
        
        private string _feeTypeCode;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAmountChanging(decimal value);
        partial void OnAmountChanged();
        partial void OnCostChanging(decimal value);
        partial void OnCostChanged();
        partial void OnCustomerIDChanging(int value);
        partial void OnCustomerIDChanged();
        partial void OnFeeTypeCodeChanging(string value);
        partial void OnFeeTypeCodeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerFeeSetting"/> class.
        /// </summary>
        public CustomerFeeSetting()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Amount' value.
        /// </summary>
        [DataMember()]
        public decimal Amount
        {
            get
            {
                return this._amount;
            }
            set
            {
                if ((this._amount != value))
                {
                    this.OnAmountChanging(value);
                    this.RaiseDataMemberChanging("Amount");
                    this.ValidateProperty("Amount", value);
                    this._amount = value;
                    this.RaiseDataMemberChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Cost' value.
        /// </summary>
        [DataMember()]
        public decimal Cost
        {
            get
            {
                return this._cost;
            }
            set
            {
                if ((this._cost != value))
                {
                    this.OnCostChanging(value);
                    this.RaiseDataMemberChanging("Cost");
                    this.ValidateProperty("Cost", value);
                    this._cost = value;
                    this.RaiseDataMemberChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Customer"/> entity.
        /// </summary>
        [Association("Customer_CustomerFeeSetting", "CustomerID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public Customer Customer
        {
            get
            {
                if ((this._customer == null))
                {
                    this._customer = new EntityRef<Customer>(this, "Customer", this.FilterCustomer);
                }
                return this._customer.Entity;
            }
            set
            {
                Customer previous = this.Customer;
                if ((previous != value))
                {
                    this.ValidateProperty("Customer", value);
                    if ((previous != null))
                    {
                        this._customer.Entity = null;
                        previous.CustomerFeeSetting.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CustomerID = value.ID;
                    }
                    else
                    {
                        this.CustomerID = default(int);
                    }
                    this._customer.Entity = value;
                    if ((value != null))
                    {
                        value.CustomerFeeSetting.Add(this);
                    }
                    this.RaisePropertyChanged("Customer");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int CustomerID
        {
            get
            {
                return this._customerID;
            }
            set
            {
                if ((this._customerID != value))
                {
                    this.OnCustomerIDChanging(value);
                    this.RaiseDataMemberChanging("CustomerID");
                    this.ValidateProperty("CustomerID", value);
                    this._customerID = value;
                    this.RaiseDataMemberChanged("CustomerID");
                    this.OnCustomerIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="FeeType"/> entity.
        /// </summary>
        [Association("FeeType_CustomerFeeSetting", "FeeTypeCode", "Code", IsForeignKey=true)]
        [XmlIgnore()]
        public FeeType FeeType
        {
            get
            {
                if ((this._feeType == null))
                {
                    this._feeType = new EntityRef<FeeType>(this, "FeeType", this.FilterFeeType);
                }
                return this._feeType.Entity;
            }
            set
            {
                FeeType previous = this.FeeType;
                if ((previous != value))
                {
                    this.ValidateProperty("FeeType", value);
                    if ((previous != null))
                    {
                        this._feeType.Entity = null;
                        previous.CustomerFeeSetting.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.FeeTypeCode = value.Code;
                    }
                    else
                    {
                        this.FeeTypeCode = default(string);
                    }
                    this._feeType.Entity = value;
                    if ((value != null))
                    {
                        value.CustomerFeeSetting.Add(this);
                    }
                    this.RaisePropertyChanged("FeeType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FeeTypeCode' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(10)]
        public string FeeTypeCode
        {
            get
            {
                return this._feeTypeCode;
            }
            set
            {
                if ((this._feeTypeCode != value))
                {
                    this.OnFeeTypeCodeChanging(value);
                    this.RaiseDataMemberChanging("FeeTypeCode");
                    this.ValidateProperty("FeeTypeCode", value);
                    this._feeTypeCode = value;
                    this.RaiseDataMemberChanged("FeeTypeCode");
                    this.OnFeeTypeCodeChanged();
                }
            }
        }
        
        private bool FilterCustomer(Customer entity)
        {
            return (entity.ID == this.CustomerID);
        }
        
        private bool FilterFeeType(FeeType entity)
        {
            return (entity.Code == this.FeeTypeCode);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._feeTypeCode == null))
            {
                return null;
            }
            return EntityKey.Create(this._customerID, this._feeTypeCode);
        }
    }
    
    /// <summary>
    /// The 'Customhouse' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class Customhouse : Entity
    {
        
        private string _code;
        
        private string _name;
        
        private string _pinYin;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPinYinChanging(string value);
        partial void OnPinYinChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Customhouse"/> class.
        /// </summary>
        public Customhouse()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(16)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PinYin' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public string PinYin
        {
            get
            {
                return this._pinYin;
            }
            set
            {
                if ((this._pinYin != value))
                {
                    this.OnPinYinChanging(value);
                    this.RaiseDataMemberChanging("PinYin");
                    this.ValidateProperty("PinYin", value);
                    this._pinYin = value;
                    this.RaiseDataMemberChanged("PinYin");
                    this.OnPinYinChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'CustomsUser' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class CustomsUser : Entity
    {
        
        private string _customsNo;
        
        private int _id;
        
        private string _identityNo;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCustomsNoChanging(string value);
        partial void OnCustomsNoChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnIdentityNoChanging(string value);
        partial void OnIdentityNoChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomsUser"/> class.
        /// </summary>
        public CustomsUser()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CustomsNo' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string CustomsNo
        {
            get
            {
                return this._customsNo;
            }
            set
            {
                if ((this._customsNo != value))
                {
                    this.OnCustomsNoChanging(value);
                    this.RaiseDataMemberChanging("CustomsNo");
                    this.ValidateProperty("CustomsNo", value);
                    this._customsNo = value;
                    this.RaiseDataMemberChanged("CustomsNo");
                    this.OnCustomsNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdentityNo' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string IdentityNo
        {
            get
            {
                return this._identityNo;
            }
            set
            {
                if ((this._identityNo != value))
                {
                    this.OnIdentityNoChanging(value);
                    this.RaiseDataMemberChanging("IdentityNo");
                    this.ValidateProperty("IdentityNo", value);
                    this._identityNo = value;
                    this.RaiseDataMemberChanged("IdentityNo");
                    this.OnIdentityNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Declaration' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class Declaration : Entity
    {
        
        private string _admissionStatus;
        
        private string _agentCode;
        
        private string _agentName;
        
        private string _approvalNumber;
        
        private string _billNumber;
        
        private string _containerQuantity;
        
        private string _controlNumber;
        
        private string _conveyance;
        
        private string _countryCode;
        
        private Nullable<DateTime> _createdDate;
        
        private EntityRef<Customer> _customer;
        
        private int _customerID;
        
        private string _customhouseCode;
        
        private EntityCollection<DeclarationContainer> _declarationContainer;
        
        private Nullable<DateTime> _declarationDate;
        
        private EntityCollection<DeclarationDocument> _declarationDocument;
        
        private EntityCollection<DeclarationImage> _declarationImage;
        
        private EntityCollection<DeclarationItem> _declarationItem;
        
        private string _declarationNumber;
        
        private string _declarationStatus;
        
        private string _declarationStatusRemark;
        
        private string _districtCode;
        
        private string _dock;
        
        private EntityCollection<DoubleCheckDeclaration> _doubleCheckDeclaration;
        
        private Nullable<DateTime> _drawbackDate;
        
        private string _drawbackStatus;
        
        private string _drawbackStatusRemark;
        
        private string _examinationNumber;
        
        private EntityCollection<FinancialExportDeclaration> _financialExportDeclaration;
        
        private string _financialRemark;
        
        private string _freightFeeCurrencyCode;
        
        private string _freightFeeMarkCode;
        
        private Nullable<decimal> _freightFeeRate;
        
        private Nullable<decimal> _grossWeight;
        
        private int _id;
        
        private Nullable<DateTime> _ieDate;
        
        private string _insuranceFeeCurrencyCode;
        
        private string _insuranceFeeMarkCode;
        
        private Nullable<decimal> _insuranceFeeRate;
        
        private string _ladingStatus;
        
        private string _levyCode;
        
        private string _licenseNumber;
        
        private string _manualNumber;
        
        private Nullable<decimal> _netWeight;
        
        private string _note;
        
        private string _onBoardingStatus;
        
        private string _otherFeeCurrencyCode;
        
        private string _otherFeeMarkCode;
        
        private Nullable<decimal> _otherFeeRate;
        
        private string _ownerCode;
        
        private string _ownerName;
        
        private Nullable<int> _packageAmount;
        
        private string _payCode;
        
        private string _portCode;
        
        private string _preEntryNumber;
        
        private string _prerecordWarehouseWarrant;
        
        private string _productNumber;
        
        private DateTime _receivedDate;
        
        private string _relatedDeclarationNumber;
        
        private string _relatedManualNumber;
        
        private string _relatedSystemNumber;
        
        private string _remark;
        
        private Nullable<DateTime> _shipLeaveDate;
        
        private string _tradeCode;
        
        private string _traderCode;
        
        private string _traderName;
        
        private string _transactionCode;
        
        private string _transportCode;
        
        private string _verificationStatus;
        
        private string _verificationStatusDetail;
        
        private string _voyageNumber;
        
        private string _wrapCode;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAdmissionStatusChanging(string value);
        partial void OnAdmissionStatusChanged();
        partial void OnAgentCodeChanging(string value);
        partial void OnAgentCodeChanged();
        partial void OnAgentNameChanging(string value);
        partial void OnAgentNameChanged();
        partial void OnApprovalNumberChanging(string value);
        partial void OnApprovalNumberChanged();
        partial void OnBillNumberChanging(string value);
        partial void OnBillNumberChanged();
        partial void OnContainerQuantityChanging(string value);
        partial void OnContainerQuantityChanged();
        partial void OnControlNumberChanging(string value);
        partial void OnControlNumberChanged();
        partial void OnConveyanceChanging(string value);
        partial void OnConveyanceChanged();
        partial void OnCountryCodeChanging(string value);
        partial void OnCountryCodeChanged();
        partial void OnCreatedDateChanging(Nullable<DateTime> value);
        partial void OnCreatedDateChanged();
        partial void OnCustomerIDChanging(int value);
        partial void OnCustomerIDChanged();
        partial void OnCustomhouseCodeChanging(string value);
        partial void OnCustomhouseCodeChanged();
        partial void OnDeclarationDateChanging(Nullable<DateTime> value);
        partial void OnDeclarationDateChanged();
        partial void OnDeclarationNumberChanging(string value);
        partial void OnDeclarationNumberChanged();
        partial void OnDeclarationStatusChanging(string value);
        partial void OnDeclarationStatusChanged();
        partial void OnDeclarationStatusRemarkChanging(string value);
        partial void OnDeclarationStatusRemarkChanged();
        partial void OnDistrictCodeChanging(string value);
        partial void OnDistrictCodeChanged();
        partial void OnDockChanging(string value);
        partial void OnDockChanged();
        partial void OnDrawbackDateChanging(Nullable<DateTime> value);
        partial void OnDrawbackDateChanged();
        partial void OnDrawbackStatusChanging(string value);
        partial void OnDrawbackStatusChanged();
        partial void OnDrawbackStatusRemarkChanging(string value);
        partial void OnDrawbackStatusRemarkChanged();
        partial void OnExaminationNumberChanging(string value);
        partial void OnExaminationNumberChanged();
        partial void OnFinancialRemarkChanging(string value);
        partial void OnFinancialRemarkChanged();
        partial void OnFreightFeeCurrencyCodeChanging(string value);
        partial void OnFreightFeeCurrencyCodeChanged();
        partial void OnFreightFeeMarkCodeChanging(string value);
        partial void OnFreightFeeMarkCodeChanged();
        partial void OnFreightFeeRateChanging(Nullable<decimal> value);
        partial void OnFreightFeeRateChanged();
        partial void OnGrossWeightChanging(Nullable<decimal> value);
        partial void OnGrossWeightChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnIEDateChanging(Nullable<DateTime> value);
        partial void OnIEDateChanged();
        partial void OnInsuranceFeeCurrencyCodeChanging(string value);
        partial void OnInsuranceFeeCurrencyCodeChanged();
        partial void OnInsuranceFeeMarkCodeChanging(string value);
        partial void OnInsuranceFeeMarkCodeChanged();
        partial void OnInsuranceFeeRateChanging(Nullable<decimal> value);
        partial void OnInsuranceFeeRateChanged();
        partial void OnLadingStatusChanging(string value);
        partial void OnLadingStatusChanged();
        partial void OnLevyCodeChanging(string value);
        partial void OnLevyCodeChanged();
        partial void OnLicenseNumberChanging(string value);
        partial void OnLicenseNumberChanged();
        partial void OnManualNumberChanging(string value);
        partial void OnManualNumberChanged();
        partial void OnNetWeightChanging(Nullable<decimal> value);
        partial void OnNetWeightChanged();
        partial void OnNoteChanging(string value);
        partial void OnNoteChanged();
        partial void OnOnBoardingStatusChanging(string value);
        partial void OnOnBoardingStatusChanged();
        partial void OnOtherFeeCurrencyCodeChanging(string value);
        partial void OnOtherFeeCurrencyCodeChanged();
        partial void OnOtherFeeMarkCodeChanging(string value);
        partial void OnOtherFeeMarkCodeChanged();
        partial void OnOtherFeeRateChanging(Nullable<decimal> value);
        partial void OnOtherFeeRateChanged();
        partial void OnOwnerCodeChanging(string value);
        partial void OnOwnerCodeChanged();
        partial void OnOwnerNameChanging(string value);
        partial void OnOwnerNameChanged();
        partial void OnPackageAmountChanging(Nullable<int> value);
        partial void OnPackageAmountChanged();
        partial void OnPayCodeChanging(string value);
        partial void OnPayCodeChanged();
        partial void OnPortCodeChanging(string value);
        partial void OnPortCodeChanged();
        partial void OnPreEntryNumberChanging(string value);
        partial void OnPreEntryNumberChanged();
        partial void OnPrerecordWarehouseWarrantChanging(string value);
        partial void OnPrerecordWarehouseWarrantChanged();
        partial void OnProductNumberChanging(string value);
        partial void OnProductNumberChanged();
        partial void OnReceivedDateChanging(DateTime value);
        partial void OnReceivedDateChanged();
        partial void OnRelatedDeclarationNumberChanging(string value);
        partial void OnRelatedDeclarationNumberChanged();
        partial void OnRelatedManualNumberChanging(string value);
        partial void OnRelatedManualNumberChanged();
        partial void OnRelatedSystemNumberChanging(string value);
        partial void OnRelatedSystemNumberChanged();
        partial void OnRemarkChanging(string value);
        partial void OnRemarkChanged();
        partial void OnShipLeaveDateChanging(Nullable<DateTime> value);
        partial void OnShipLeaveDateChanged();
        partial void OnTradeCodeChanging(string value);
        partial void OnTradeCodeChanged();
        partial void OnTraderCodeChanging(string value);
        partial void OnTraderCodeChanged();
        partial void OnTraderNameChanging(string value);
        partial void OnTraderNameChanged();
        partial void OnTransactionCodeChanging(string value);
        partial void OnTransactionCodeChanged();
        partial void OnTransportCodeChanging(string value);
        partial void OnTransportCodeChanged();
        partial void OnVerificationStatusChanging(string value);
        partial void OnVerificationStatusChanged();
        partial void OnVerificationStatusDetailChanging(string value);
        partial void OnVerificationStatusDetailChanged();
        partial void OnVoyageNumberChanging(string value);
        partial void OnVoyageNumberChanged();
        partial void OnWrapCodeChanging(string value);
        partial void OnWrapCodeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Declaration"/> class.
        /// </summary>
        public Declaration()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AdmissionStatus' value.
        /// </summary>
        [DataMember()]
        [StringLength(64)]
        public string AdmissionStatus
        {
            get
            {
                return this._admissionStatus;
            }
            set
            {
                if ((this._admissionStatus != value))
                {
                    this.OnAdmissionStatusChanging(value);
                    this.RaiseDataMemberChanging("AdmissionStatus");
                    this.ValidateProperty("AdmissionStatus", value);
                    this._admissionStatus = value;
                    this.RaiseDataMemberChanged("AdmissionStatus");
                    this.OnAdmissionStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AgentCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string AgentCode
        {
            get
            {
                return this._agentCode;
            }
            set
            {
                if ((this._agentCode != value))
                {
                    this.OnAgentCodeChanging(value);
                    this.RaiseDataMemberChanging("AgentCode");
                    this.ValidateProperty("AgentCode", value);
                    this._agentCode = value;
                    this.RaiseDataMemberChanged("AgentCode");
                    this.OnAgentCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AgentName' value.
        /// </summary>
        [DataMember()]
        [StringLength(128)]
        public string AgentName
        {
            get
            {
                return this._agentName;
            }
            set
            {
                if ((this._agentName != value))
                {
                    this.OnAgentNameChanging(value);
                    this.RaiseDataMemberChanging("AgentName");
                    this.ValidateProperty("AgentName", value);
                    this._agentName = value;
                    this.RaiseDataMemberChanged("AgentName");
                    this.OnAgentNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ApprovalNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string ApprovalNumber
        {
            get
            {
                return this._approvalNumber;
            }
            set
            {
                if ((this._approvalNumber != value))
                {
                    this.OnApprovalNumberChanging(value);
                    this.RaiseDataMemberChanging("ApprovalNumber");
                    this.ValidateProperty("ApprovalNumber", value);
                    this._approvalNumber = value;
                    this.RaiseDataMemberChanged("ApprovalNumber");
                    this.OnApprovalNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BillNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(64)]
        public string BillNumber
        {
            get
            {
                return this._billNumber;
            }
            set
            {
                if ((this._billNumber != value))
                {
                    this.OnBillNumberChanging(value);
                    this.RaiseDataMemberChanging("BillNumber");
                    this.ValidateProperty("BillNumber", value);
                    this._billNumber = value;
                    this.RaiseDataMemberChanged("BillNumber");
                    this.OnBillNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContainerQuantity' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string ContainerQuantity
        {
            get
            {
                return this._containerQuantity;
            }
            set
            {
                if ((this._containerQuantity != value))
                {
                    this.OnContainerQuantityChanging(value);
                    this.RaiseDataMemberChanging("ContainerQuantity");
                    this.ValidateProperty("ContainerQuantity", value);
                    this._containerQuantity = value;
                    this.RaiseDataMemberChanged("ContainerQuantity");
                    this.OnContainerQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ControlNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string ControlNumber
        {
            get
            {
                return this._controlNumber;
            }
            set
            {
                if ((this._controlNumber != value))
                {
                    this.OnControlNumberChanging(value);
                    this.RaiseDataMemberChanging("ControlNumber");
                    this.ValidateProperty("ControlNumber", value);
                    this._controlNumber = value;
                    this.RaiseDataMemberChanged("ControlNumber");
                    this.OnControlNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Conveyance' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string Conveyance
        {
            get
            {
                return this._conveyance;
            }
            set
            {
                if ((this._conveyance != value))
                {
                    this.OnConveyanceChanging(value);
                    this.RaiseDataMemberChanging("Conveyance");
                    this.ValidateProperty("Conveyance", value);
                    this._conveyance = value;
                    this.RaiseDataMemberChanged("Conveyance");
                    this.OnConveyanceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CountryCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string CountryCode
        {
            get
            {
                return this._countryCode;
            }
            set
            {
                if ((this._countryCode != value))
                {
                    this.OnCountryCodeChanging(value);
                    this.RaiseDataMemberChanging("CountryCode");
                    this.ValidateProperty("CountryCode", value);
                    this._countryCode = value;
                    this.RaiseDataMemberChanged("CountryCode");
                    this.OnCountryCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreatedDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CreatedDate
        {
            get
            {
                return this._createdDate;
            }
            set
            {
                if ((this._createdDate != value))
                {
                    this.OnCreatedDateChanging(value);
                    this.RaiseDataMemberChanging("CreatedDate");
                    this.ValidateProperty("CreatedDate", value);
                    this._createdDate = value;
                    this.RaiseDataMemberChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Customer"/> entity.
        /// </summary>
        [Association("Customer_Declaration", "CustomerID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public Customer Customer
        {
            get
            {
                if ((this._customer == null))
                {
                    this._customer = new EntityRef<Customer>(this, "Customer", this.FilterCustomer);
                }
                return this._customer.Entity;
            }
            set
            {
                Customer previous = this.Customer;
                if ((previous != value))
                {
                    this.ValidateProperty("Customer", value);
                    if ((previous != null))
                    {
                        this._customer.Entity = null;
                        previous.Declaration.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CustomerID = value.ID;
                    }
                    else
                    {
                        this.CustomerID = default(int);
                    }
                    this._customer.Entity = value;
                    if ((value != null))
                    {
                        value.Declaration.Add(this);
                    }
                    this.RaisePropertyChanged("Customer");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int CustomerID
        {
            get
            {
                return this._customerID;
            }
            set
            {
                if ((this._customerID != value))
                {
                    this.OnCustomerIDChanging(value);
                    this.RaiseDataMemberChanging("CustomerID");
                    this.ValidateProperty("CustomerID", value);
                    this._customerID = value;
                    this.RaiseDataMemberChanged("CustomerID");
                    this.OnCustomerIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomhouseCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string CustomhouseCode
        {
            get
            {
                return this._customhouseCode;
            }
            set
            {
                if ((this._customhouseCode != value))
                {
                    this.OnCustomhouseCodeChanging(value);
                    this.RaiseDataMemberChanging("CustomhouseCode");
                    this.ValidateProperty("CustomhouseCode", value);
                    this._customhouseCode = value;
                    this.RaiseDataMemberChanged("CustomhouseCode");
                    this.OnCustomhouseCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="DeclarationContainer"/> entity instances.
        /// </summary>
        [Association("Declaration_DeclarationContainer", "ID", "DeclarationId")]
        [XmlIgnore()]
        public EntityCollection<DeclarationContainer> DeclarationContainer
        {
            get
            {
                if ((this._declarationContainer == null))
                {
                    this._declarationContainer = new EntityCollection<DeclarationContainer>(this, "DeclarationContainer", this.FilterDeclarationContainer, this.AttachDeclarationContainer, this.DetachDeclarationContainer);
                }
                return this._declarationContainer;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeclarationDate
        {
            get
            {
                return this._declarationDate;
            }
            set
            {
                if ((this._declarationDate != value))
                {
                    this.OnDeclarationDateChanging(value);
                    this.RaiseDataMemberChanging("DeclarationDate");
                    this.ValidateProperty("DeclarationDate", value);
                    this._declarationDate = value;
                    this.RaiseDataMemberChanged("DeclarationDate");
                    this.OnDeclarationDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="DeclarationDocument"/> entity instances.
        /// </summary>
        [Association("Declaration_DeclarationDocument", "ID", "DeclarationId")]
        [XmlIgnore()]
        public EntityCollection<DeclarationDocument> DeclarationDocument
        {
            get
            {
                if ((this._declarationDocument == null))
                {
                    this._declarationDocument = new EntityCollection<DeclarationDocument>(this, "DeclarationDocument", this.FilterDeclarationDocument, this.AttachDeclarationDocument, this.DetachDeclarationDocument);
                }
                return this._declarationDocument;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="DeclarationImage"/> entity instances.
        /// </summary>
        [Association("Declaration_DeclarationImage", "ID", "DeclarationId")]
        [XmlIgnore()]
        public EntityCollection<DeclarationImage> DeclarationImage
        {
            get
            {
                if ((this._declarationImage == null))
                {
                    this._declarationImage = new EntityCollection<DeclarationImage>(this, "DeclarationImage", this.FilterDeclarationImage, this.AttachDeclarationImage, this.DetachDeclarationImage);
                }
                return this._declarationImage;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="DeclarationItem"/> entity instances.
        /// </summary>
        [Association("Declaration_DeclarationItem", "ID", "DeclarationId")]
        [XmlIgnore()]
        public EntityCollection<DeclarationItem> DeclarationItem
        {
            get
            {
                if ((this._declarationItem == null))
                {
                    this._declarationItem = new EntityCollection<DeclarationItem>(this, "DeclarationItem", this.FilterDeclarationItem, this.AttachDeclarationItem, this.DetachDeclarationItem);
                }
                return this._declarationItem;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string DeclarationNumber
        {
            get
            {
                return this._declarationNumber;
            }
            set
            {
                if ((this._declarationNumber != value))
                {
                    this.OnDeclarationNumberChanging(value);
                    this.RaiseDataMemberChanging("DeclarationNumber");
                    this.ValidateProperty("DeclarationNumber", value);
                    this._declarationNumber = value;
                    this.RaiseDataMemberChanged("DeclarationNumber");
                    this.OnDeclarationNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationStatus' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string DeclarationStatus
        {
            get
            {
                return this._declarationStatus;
            }
            set
            {
                if ((this._declarationStatus != value))
                {
                    this.OnDeclarationStatusChanging(value);
                    this.RaiseDataMemberChanging("DeclarationStatus");
                    this.ValidateProperty("DeclarationStatus", value);
                    this._declarationStatus = value;
                    this.RaiseDataMemberChanged("DeclarationStatus");
                    this.OnDeclarationStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationStatusRemark' value.
        /// </summary>
        [DataMember()]
        [StringLength(256)]
        public string DeclarationStatusRemark
        {
            get
            {
                return this._declarationStatusRemark;
            }
            set
            {
                if ((this._declarationStatusRemark != value))
                {
                    this.OnDeclarationStatusRemarkChanging(value);
                    this.RaiseDataMemberChanging("DeclarationStatusRemark");
                    this.ValidateProperty("DeclarationStatusRemark", value);
                    this._declarationStatusRemark = value;
                    this.RaiseDataMemberChanged("DeclarationStatusRemark");
                    this.OnDeclarationStatusRemarkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DistrictCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string DistrictCode
        {
            get
            {
                return this._districtCode;
            }
            set
            {
                if ((this._districtCode != value))
                {
                    this.OnDistrictCodeChanging(value);
                    this.RaiseDataMemberChanging("DistrictCode");
                    this.ValidateProperty("DistrictCode", value);
                    this._districtCode = value;
                    this.RaiseDataMemberChanged("DistrictCode");
                    this.OnDistrictCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Dock' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string Dock
        {
            get
            {
                return this._dock;
            }
            set
            {
                if ((this._dock != value))
                {
                    this.OnDockChanging(value);
                    this.RaiseDataMemberChanging("Dock");
                    this.ValidateProperty("Dock", value);
                    this._dock = value;
                    this.RaiseDataMemberChanged("Dock");
                    this.OnDockChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="DoubleCheckDeclaration"/> entity instances.
        /// </summary>
        [Association("Declaration_DoubleCheckDeclaration", "ID", "DeclarationId")]
        [XmlIgnore()]
        public EntityCollection<DoubleCheckDeclaration> DoubleCheckDeclaration
        {
            get
            {
                if ((this._doubleCheckDeclaration == null))
                {
                    this._doubleCheckDeclaration = new EntityCollection<DoubleCheckDeclaration>(this, "DoubleCheckDeclaration", this.FilterDoubleCheckDeclaration, this.AttachDoubleCheckDeclaration, this.DetachDoubleCheckDeclaration);
                }
                return this._doubleCheckDeclaration;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DrawbackDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DrawbackDate
        {
            get
            {
                return this._drawbackDate;
            }
            set
            {
                if ((this._drawbackDate != value))
                {
                    this.OnDrawbackDateChanging(value);
                    this.RaiseDataMemberChanging("DrawbackDate");
                    this.ValidateProperty("DrawbackDate", value);
                    this._drawbackDate = value;
                    this.RaiseDataMemberChanged("DrawbackDate");
                    this.OnDrawbackDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DrawbackStatus' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string DrawbackStatus
        {
            get
            {
                return this._drawbackStatus;
            }
            set
            {
                if ((this._drawbackStatus != value))
                {
                    this.OnDrawbackStatusChanging(value);
                    this.RaiseDataMemberChanging("DrawbackStatus");
                    this.ValidateProperty("DrawbackStatus", value);
                    this._drawbackStatus = value;
                    this.RaiseDataMemberChanged("DrawbackStatus");
                    this.OnDrawbackStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DrawbackStatusRemark' value.
        /// </summary>
        [DataMember()]
        [StringLength(256)]
        public string DrawbackStatusRemark
        {
            get
            {
                return this._drawbackStatusRemark;
            }
            set
            {
                if ((this._drawbackStatusRemark != value))
                {
                    this.OnDrawbackStatusRemarkChanging(value);
                    this.RaiseDataMemberChanging("DrawbackStatusRemark");
                    this.ValidateProperty("DrawbackStatusRemark", value);
                    this._drawbackStatusRemark = value;
                    this.RaiseDataMemberChanged("DrawbackStatusRemark");
                    this.OnDrawbackStatusRemarkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExaminationNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(64)]
        public string ExaminationNumber
        {
            get
            {
                return this._examinationNumber;
            }
            set
            {
                if ((this._examinationNumber != value))
                {
                    this.OnExaminationNumberChanging(value);
                    this.RaiseDataMemberChanging("ExaminationNumber");
                    this.ValidateProperty("ExaminationNumber", value);
                    this._examinationNumber = value;
                    this.RaiseDataMemberChanged("ExaminationNumber");
                    this.OnExaminationNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="FinancialExportDeclaration"/> entity instances.
        /// </summary>
        [Association("Declaration_FinancialExportDeclaration", "ID", "DeclarationId")]
        [XmlIgnore()]
        public EntityCollection<FinancialExportDeclaration> FinancialExportDeclaration
        {
            get
            {
                if ((this._financialExportDeclaration == null))
                {
                    this._financialExportDeclaration = new EntityCollection<FinancialExportDeclaration>(this, "FinancialExportDeclaration", this.FilterFinancialExportDeclaration, this.AttachFinancialExportDeclaration, this.DetachFinancialExportDeclaration);
                }
                return this._financialExportDeclaration;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FinancialRemark' value.
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string FinancialRemark
        {
            get
            {
                return this._financialRemark;
            }
            set
            {
                if ((this._financialRemark != value))
                {
                    this.OnFinancialRemarkChanging(value);
                    this.RaiseDataMemberChanging("FinancialRemark");
                    this.ValidateProperty("FinancialRemark", value);
                    this._financialRemark = value;
                    this.RaiseDataMemberChanged("FinancialRemark");
                    this.OnFinancialRemarkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FreightFeeCurrencyCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string FreightFeeCurrencyCode
        {
            get
            {
                return this._freightFeeCurrencyCode;
            }
            set
            {
                if ((this._freightFeeCurrencyCode != value))
                {
                    this.OnFreightFeeCurrencyCodeChanging(value);
                    this.RaiseDataMemberChanging("FreightFeeCurrencyCode");
                    this.ValidateProperty("FreightFeeCurrencyCode", value);
                    this._freightFeeCurrencyCode = value;
                    this.RaiseDataMemberChanged("FreightFeeCurrencyCode");
                    this.OnFreightFeeCurrencyCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FreightFeeMarkCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string FreightFeeMarkCode
        {
            get
            {
                return this._freightFeeMarkCode;
            }
            set
            {
                if ((this._freightFeeMarkCode != value))
                {
                    this.OnFreightFeeMarkCodeChanging(value);
                    this.RaiseDataMemberChanging("FreightFeeMarkCode");
                    this.ValidateProperty("FreightFeeMarkCode", value);
                    this._freightFeeMarkCode = value;
                    this.RaiseDataMemberChanged("FreightFeeMarkCode");
                    this.OnFreightFeeMarkCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FreightFeeRate' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> FreightFeeRate
        {
            get
            {
                return this._freightFeeRate;
            }
            set
            {
                if ((this._freightFeeRate != value))
                {
                    this.OnFreightFeeRateChanging(value);
                    this.RaiseDataMemberChanging("FreightFeeRate");
                    this.ValidateProperty("FreightFeeRate", value);
                    this._freightFeeRate = value;
                    this.RaiseDataMemberChanged("FreightFeeRate");
                    this.OnFreightFeeRateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GrossWeight' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> GrossWeight
        {
            get
            {
                return this._grossWeight;
            }
            set
            {
                if ((this._grossWeight != value))
                {
                    this.OnGrossWeightChanging(value);
                    this.RaiseDataMemberChanging("GrossWeight");
                    this.ValidateProperty("GrossWeight", value);
                    this._grossWeight = value;
                    this.RaiseDataMemberChanged("GrossWeight");
                    this.OnGrossWeightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IEDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> IEDate
        {
            get
            {
                return this._ieDate;
            }
            set
            {
                if ((this._ieDate != value))
                {
                    this.OnIEDateChanging(value);
                    this.RaiseDataMemberChanging("IEDate");
                    this.ValidateProperty("IEDate", value);
                    this._ieDate = value;
                    this.RaiseDataMemberChanged("IEDate");
                    this.OnIEDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InsuranceFeeCurrencyCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string InsuranceFeeCurrencyCode
        {
            get
            {
                return this._insuranceFeeCurrencyCode;
            }
            set
            {
                if ((this._insuranceFeeCurrencyCode != value))
                {
                    this.OnInsuranceFeeCurrencyCodeChanging(value);
                    this.RaiseDataMemberChanging("InsuranceFeeCurrencyCode");
                    this.ValidateProperty("InsuranceFeeCurrencyCode", value);
                    this._insuranceFeeCurrencyCode = value;
                    this.RaiseDataMemberChanged("InsuranceFeeCurrencyCode");
                    this.OnInsuranceFeeCurrencyCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InsuranceFeeMarkCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string InsuranceFeeMarkCode
        {
            get
            {
                return this._insuranceFeeMarkCode;
            }
            set
            {
                if ((this._insuranceFeeMarkCode != value))
                {
                    this.OnInsuranceFeeMarkCodeChanging(value);
                    this.RaiseDataMemberChanging("InsuranceFeeMarkCode");
                    this.ValidateProperty("InsuranceFeeMarkCode", value);
                    this._insuranceFeeMarkCode = value;
                    this.RaiseDataMemberChanged("InsuranceFeeMarkCode");
                    this.OnInsuranceFeeMarkCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InsuranceFeeRate' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> InsuranceFeeRate
        {
            get
            {
                return this._insuranceFeeRate;
            }
            set
            {
                if ((this._insuranceFeeRate != value))
                {
                    this.OnInsuranceFeeRateChanging(value);
                    this.RaiseDataMemberChanging("InsuranceFeeRate");
                    this.ValidateProperty("InsuranceFeeRate", value);
                    this._insuranceFeeRate = value;
                    this.RaiseDataMemberChanged("InsuranceFeeRate");
                    this.OnInsuranceFeeRateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LadingStatus' value.
        /// </summary>
        [DataMember()]
        [StringLength(64)]
        public string LadingStatus
        {
            get
            {
                return this._ladingStatus;
            }
            set
            {
                if ((this._ladingStatus != value))
                {
                    this.OnLadingStatusChanging(value);
                    this.RaiseDataMemberChanging("LadingStatus");
                    this.ValidateProperty("LadingStatus", value);
                    this._ladingStatus = value;
                    this.RaiseDataMemberChanged("LadingStatus");
                    this.OnLadingStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LevyCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string LevyCode
        {
            get
            {
                return this._levyCode;
            }
            set
            {
                if ((this._levyCode != value))
                {
                    this.OnLevyCodeChanging(value);
                    this.RaiseDataMemberChanging("LevyCode");
                    this.ValidateProperty("LevyCode", value);
                    this._levyCode = value;
                    this.RaiseDataMemberChanged("LevyCode");
                    this.OnLevyCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LicenseNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string LicenseNumber
        {
            get
            {
                return this._licenseNumber;
            }
            set
            {
                if ((this._licenseNumber != value))
                {
                    this.OnLicenseNumberChanging(value);
                    this.RaiseDataMemberChanging("LicenseNumber");
                    this.ValidateProperty("LicenseNumber", value);
                    this._licenseNumber = value;
                    this.RaiseDataMemberChanged("LicenseNumber");
                    this.OnLicenseNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ManualNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string ManualNumber
        {
            get
            {
                return this._manualNumber;
            }
            set
            {
                if ((this._manualNumber != value))
                {
                    this.OnManualNumberChanging(value);
                    this.RaiseDataMemberChanging("ManualNumber");
                    this.ValidateProperty("ManualNumber", value);
                    this._manualNumber = value;
                    this.RaiseDataMemberChanged("ManualNumber");
                    this.OnManualNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NetWeight' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> NetWeight
        {
            get
            {
                return this._netWeight;
            }
            set
            {
                if ((this._netWeight != value))
                {
                    this.OnNetWeightChanging(value);
                    this.RaiseDataMemberChanging("NetWeight");
                    this.ValidateProperty("NetWeight", value);
                    this._netWeight = value;
                    this.RaiseDataMemberChanged("NetWeight");
                    this.OnNetWeightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Note' value.
        /// </summary>
        [DataMember()]
        [StringLength(128)]
        public string Note
        {
            get
            {
                return this._note;
            }
            set
            {
                if ((this._note != value))
                {
                    this.OnNoteChanging(value);
                    this.RaiseDataMemberChanging("Note");
                    this.ValidateProperty("Note", value);
                    this._note = value;
                    this.RaiseDataMemberChanged("Note");
                    this.OnNoteChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OnBoardingStatus' value.
        /// </summary>
        [DataMember()]
        [StringLength(64)]
        public string OnBoardingStatus
        {
            get
            {
                return this._onBoardingStatus;
            }
            set
            {
                if ((this._onBoardingStatus != value))
                {
                    this.OnOnBoardingStatusChanging(value);
                    this.RaiseDataMemberChanging("OnBoardingStatus");
                    this.ValidateProperty("OnBoardingStatus", value);
                    this._onBoardingStatus = value;
                    this.RaiseDataMemberChanged("OnBoardingStatus");
                    this.OnOnBoardingStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OtherFeeCurrencyCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string OtherFeeCurrencyCode
        {
            get
            {
                return this._otherFeeCurrencyCode;
            }
            set
            {
                if ((this._otherFeeCurrencyCode != value))
                {
                    this.OnOtherFeeCurrencyCodeChanging(value);
                    this.RaiseDataMemberChanging("OtherFeeCurrencyCode");
                    this.ValidateProperty("OtherFeeCurrencyCode", value);
                    this._otherFeeCurrencyCode = value;
                    this.RaiseDataMemberChanged("OtherFeeCurrencyCode");
                    this.OnOtherFeeCurrencyCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OtherFeeMarkCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string OtherFeeMarkCode
        {
            get
            {
                return this._otherFeeMarkCode;
            }
            set
            {
                if ((this._otherFeeMarkCode != value))
                {
                    this.OnOtherFeeMarkCodeChanging(value);
                    this.RaiseDataMemberChanging("OtherFeeMarkCode");
                    this.ValidateProperty("OtherFeeMarkCode", value);
                    this._otherFeeMarkCode = value;
                    this.RaiseDataMemberChanged("OtherFeeMarkCode");
                    this.OnOtherFeeMarkCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OtherFeeRate' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> OtherFeeRate
        {
            get
            {
                return this._otherFeeRate;
            }
            set
            {
                if ((this._otherFeeRate != value))
                {
                    this.OnOtherFeeRateChanging(value);
                    this.RaiseDataMemberChanging("OtherFeeRate");
                    this.ValidateProperty("OtherFeeRate", value);
                    this._otherFeeRate = value;
                    this.RaiseDataMemberChanged("OtherFeeRate");
                    this.OnOtherFeeRateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OwnerCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string OwnerCode
        {
            get
            {
                return this._ownerCode;
            }
            set
            {
                if ((this._ownerCode != value))
                {
                    this.OnOwnerCodeChanging(value);
                    this.RaiseDataMemberChanging("OwnerCode");
                    this.ValidateProperty("OwnerCode", value);
                    this._ownerCode = value;
                    this.RaiseDataMemberChanged("OwnerCode");
                    this.OnOwnerCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OwnerName' value.
        /// </summary>
        [DataMember()]
        [StringLength(128)]
        public string OwnerName
        {
            get
            {
                return this._ownerName;
            }
            set
            {
                if ((this._ownerName != value))
                {
                    this.OnOwnerNameChanging(value);
                    this.RaiseDataMemberChanging("OwnerName");
                    this.ValidateProperty("OwnerName", value);
                    this._ownerName = value;
                    this.RaiseDataMemberChanged("OwnerName");
                    this.OnOwnerNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PackageAmount' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> PackageAmount
        {
            get
            {
                return this._packageAmount;
            }
            set
            {
                if ((this._packageAmount != value))
                {
                    this.OnPackageAmountChanging(value);
                    this.RaiseDataMemberChanging("PackageAmount");
                    this.ValidateProperty("PackageAmount", value);
                    this._packageAmount = value;
                    this.RaiseDataMemberChanged("PackageAmount");
                    this.OnPackageAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PayCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string PayCode
        {
            get
            {
                return this._payCode;
            }
            set
            {
                if ((this._payCode != value))
                {
                    this.OnPayCodeChanging(value);
                    this.RaiseDataMemberChanging("PayCode");
                    this.ValidateProperty("PayCode", value);
                    this._payCode = value;
                    this.RaiseDataMemberChanged("PayCode");
                    this.OnPayCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PortCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string PortCode
        {
            get
            {
                return this._portCode;
            }
            set
            {
                if ((this._portCode != value))
                {
                    this.OnPortCodeChanging(value);
                    this.RaiseDataMemberChanging("PortCode");
                    this.ValidateProperty("PortCode", value);
                    this._portCode = value;
                    this.RaiseDataMemberChanged("PortCode");
                    this.OnPortCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PreEntryNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string PreEntryNumber
        {
            get
            {
                return this._preEntryNumber;
            }
            set
            {
                if ((this._preEntryNumber != value))
                {
                    this.OnPreEntryNumberChanging(value);
                    this.RaiseDataMemberChanging("PreEntryNumber");
                    this.ValidateProperty("PreEntryNumber", value);
                    this._preEntryNumber = value;
                    this.RaiseDataMemberChanged("PreEntryNumber");
                    this.OnPreEntryNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PrerecordWarehouseWarrant' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string PrerecordWarehouseWarrant
        {
            get
            {
                return this._prerecordWarehouseWarrant;
            }
            set
            {
                if ((this._prerecordWarehouseWarrant != value))
                {
                    this.OnPrerecordWarehouseWarrantChanging(value);
                    this.RaiseDataMemberChanging("PrerecordWarehouseWarrant");
                    this.ValidateProperty("PrerecordWarehouseWarrant", value);
                    this._prerecordWarehouseWarrant = value;
                    this.RaiseDataMemberChanged("PrerecordWarehouseWarrant");
                    this.OnPrerecordWarehouseWarrantChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string ProductNumber
        {
            get
            {
                return this._productNumber;
            }
            set
            {
                if ((this._productNumber != value))
                {
                    this.OnProductNumberChanging(value);
                    this.RaiseDataMemberChanging("ProductNumber");
                    this.ValidateProperty("ProductNumber", value);
                    this._productNumber = value;
                    this.RaiseDataMemberChanged("ProductNumber");
                    this.OnProductNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReceivedDate' value.
        /// </summary>
        [DataMember()]
        public DateTime ReceivedDate
        {
            get
            {
                return this._receivedDate;
            }
            set
            {
                if ((this._receivedDate != value))
                {
                    this.OnReceivedDateChanging(value);
                    this.RaiseDataMemberChanging("ReceivedDate");
                    this.ValidateProperty("ReceivedDate", value);
                    this._receivedDate = value;
                    this.RaiseDataMemberChanged("ReceivedDate");
                    this.OnReceivedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RelatedDeclarationNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string RelatedDeclarationNumber
        {
            get
            {
                return this._relatedDeclarationNumber;
            }
            set
            {
                if ((this._relatedDeclarationNumber != value))
                {
                    this.OnRelatedDeclarationNumberChanging(value);
                    this.RaiseDataMemberChanging("RelatedDeclarationNumber");
                    this.ValidateProperty("RelatedDeclarationNumber", value);
                    this._relatedDeclarationNumber = value;
                    this.RaiseDataMemberChanged("RelatedDeclarationNumber");
                    this.OnRelatedDeclarationNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RelatedManualNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string RelatedManualNumber
        {
            get
            {
                return this._relatedManualNumber;
            }
            set
            {
                if ((this._relatedManualNumber != value))
                {
                    this.OnRelatedManualNumberChanging(value);
                    this.RaiseDataMemberChanging("RelatedManualNumber");
                    this.ValidateProperty("RelatedManualNumber", value);
                    this._relatedManualNumber = value;
                    this.RaiseDataMemberChanged("RelatedManualNumber");
                    this.OnRelatedManualNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RelatedSystemNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string RelatedSystemNumber
        {
            get
            {
                return this._relatedSystemNumber;
            }
            set
            {
                if ((this._relatedSystemNumber != value))
                {
                    this.OnRelatedSystemNumberChanging(value);
                    this.RaiseDataMemberChanging("RelatedSystemNumber");
                    this.ValidateProperty("RelatedSystemNumber", value);
                    this._relatedSystemNumber = value;
                    this.RaiseDataMemberChanged("RelatedSystemNumber");
                    this.OnRelatedSystemNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Remark' value.
        /// </summary>
        [DataMember()]
        [StringLength(256)]
        public string Remark
        {
            get
            {
                return this._remark;
            }
            set
            {
                if ((this._remark != value))
                {
                    this.OnRemarkChanging(value);
                    this.RaiseDataMemberChanging("Remark");
                    this.ValidateProperty("Remark", value);
                    this._remark = value;
                    this.RaiseDataMemberChanged("Remark");
                    this.OnRemarkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipLeaveDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ShipLeaveDate
        {
            get
            {
                return this._shipLeaveDate;
            }
            set
            {
                if ((this._shipLeaveDate != value))
                {
                    this.OnShipLeaveDateChanging(value);
                    this.RaiseDataMemberChanging("ShipLeaveDate");
                    this.ValidateProperty("ShipLeaveDate", value);
                    this._shipLeaveDate = value;
                    this.RaiseDataMemberChanged("ShipLeaveDate");
                    this.OnShipLeaveDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TradeCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string TradeCode
        {
            get
            {
                return this._tradeCode;
            }
            set
            {
                if ((this._tradeCode != value))
                {
                    this.OnTradeCodeChanging(value);
                    this.RaiseDataMemberChanging("TradeCode");
                    this.ValidateProperty("TradeCode", value);
                    this._tradeCode = value;
                    this.RaiseDataMemberChanged("TradeCode");
                    this.OnTradeCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TraderCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string TraderCode
        {
            get
            {
                return this._traderCode;
            }
            set
            {
                if ((this._traderCode != value))
                {
                    this.OnTraderCodeChanging(value);
                    this.RaiseDataMemberChanging("TraderCode");
                    this.ValidateProperty("TraderCode", value);
                    this._traderCode = value;
                    this.RaiseDataMemberChanged("TraderCode");
                    this.OnTraderCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TraderName' value.
        /// </summary>
        [DataMember()]
        [StringLength(128)]
        public string TraderName
        {
            get
            {
                return this._traderName;
            }
            set
            {
                if ((this._traderName != value))
                {
                    this.OnTraderNameChanging(value);
                    this.RaiseDataMemberChanging("TraderName");
                    this.ValidateProperty("TraderName", value);
                    this._traderName = value;
                    this.RaiseDataMemberChanged("TraderName");
                    this.OnTraderNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TransactionCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string TransactionCode
        {
            get
            {
                return this._transactionCode;
            }
            set
            {
                if ((this._transactionCode != value))
                {
                    this.OnTransactionCodeChanging(value);
                    this.RaiseDataMemberChanging("TransactionCode");
                    this.ValidateProperty("TransactionCode", value);
                    this._transactionCode = value;
                    this.RaiseDataMemberChanged("TransactionCode");
                    this.OnTransactionCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TransportCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string TransportCode
        {
            get
            {
                return this._transportCode;
            }
            set
            {
                if ((this._transportCode != value))
                {
                    this.OnTransportCodeChanging(value);
                    this.RaiseDataMemberChanging("TransportCode");
                    this.ValidateProperty("TransportCode", value);
                    this._transportCode = value;
                    this.RaiseDataMemberChanged("TransportCode");
                    this.OnTransportCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VerificationStatus' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string VerificationStatus
        {
            get
            {
                return this._verificationStatus;
            }
            set
            {
                if ((this._verificationStatus != value))
                {
                    this.OnVerificationStatusChanging(value);
                    this.RaiseDataMemberChanging("VerificationStatus");
                    this.ValidateProperty("VerificationStatus", value);
                    this._verificationStatus = value;
                    this.RaiseDataMemberChanged("VerificationStatus");
                    this.OnVerificationStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VerificationStatusDetail' value.
        /// </summary>
        [DataMember()]
        public string VerificationStatusDetail
        {
            get
            {
                return this._verificationStatusDetail;
            }
            set
            {
                if ((this._verificationStatusDetail != value))
                {
                    this.OnVerificationStatusDetailChanging(value);
                    this.RaiseDataMemberChanging("VerificationStatusDetail");
                    this.ValidateProperty("VerificationStatusDetail", value);
                    this._verificationStatusDetail = value;
                    this.RaiseDataMemberChanged("VerificationStatusDetail");
                    this.OnVerificationStatusDetailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VoyageNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(64)]
        public string VoyageNumber
        {
            get
            {
                return this._voyageNumber;
            }
            set
            {
                if ((this._voyageNumber != value))
                {
                    this.OnVoyageNumberChanging(value);
                    this.RaiseDataMemberChanging("VoyageNumber");
                    this.ValidateProperty("VoyageNumber", value);
                    this._voyageNumber = value;
                    this.RaiseDataMemberChanged("VoyageNumber");
                    this.OnVoyageNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WrapCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string WrapCode
        {
            get
            {
                return this._wrapCode;
            }
            set
            {
                if ((this._wrapCode != value))
                {
                    this.OnWrapCodeChanging(value);
                    this.RaiseDataMemberChanging("WrapCode");
                    this.ValidateProperty("WrapCode", value);
                    this._wrapCode = value;
                    this.RaiseDataMemberChanged("WrapCode");
                    this.OnWrapCodeChanged();
                }
            }
        }
        
        private bool FilterCustomer(Customer entity)
        {
            return (entity.ID == this.CustomerID);
        }
        
        private void AttachDeclarationContainer(DeclarationContainer entity)
        {
            entity.Declaration = this;
        }
        
        private void DetachDeclarationContainer(DeclarationContainer entity)
        {
            entity.Declaration = null;
        }
        
        private bool FilterDeclarationContainer(DeclarationContainer entity)
        {
            return (entity.DeclarationId == this.ID);
        }
        
        private void AttachDeclarationDocument(DeclarationDocument entity)
        {
            entity.Declaration = this;
        }
        
        private void DetachDeclarationDocument(DeclarationDocument entity)
        {
            entity.Declaration = null;
        }
        
        private bool FilterDeclarationDocument(DeclarationDocument entity)
        {
            return (entity.DeclarationId == this.ID);
        }
        
        private void AttachDeclarationImage(DeclarationImage entity)
        {
            entity.Declaration = this;
        }
        
        private void DetachDeclarationImage(DeclarationImage entity)
        {
            entity.Declaration = null;
        }
        
        private bool FilterDeclarationImage(DeclarationImage entity)
        {
            return (entity.DeclarationId == this.ID);
        }
        
        private void AttachDeclarationItem(DeclarationItem entity)
        {
            entity.Declaration = this;
        }
        
        private void DetachDeclarationItem(DeclarationItem entity)
        {
            entity.Declaration = null;
        }
        
        private bool FilterDeclarationItem(DeclarationItem entity)
        {
            return (entity.DeclarationId == this.ID);
        }
        
        private void AttachDoubleCheckDeclaration(DoubleCheckDeclaration entity)
        {
            entity.Declaration = this;
        }
        
        private void DetachDoubleCheckDeclaration(DoubleCheckDeclaration entity)
        {
            entity.Declaration = null;
        }
        
        private bool FilterDoubleCheckDeclaration(DoubleCheckDeclaration entity)
        {
            return (entity.DeclarationId == this.ID);
        }
        
        private void AttachFinancialExportDeclaration(FinancialExportDeclaration entity)
        {
            entity.Declaration = this;
        }
        
        private void DetachFinancialExportDeclaration(FinancialExportDeclaration entity)
        {
            entity.Declaration = null;
        }
        
        private bool FilterFinancialExportDeclaration(FinancialExportDeclaration entity)
        {
            return (entity.DeclarationId == this.ID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'DeclarationContainer' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class DeclarationContainer : Entity
    {
        
        private string _admissionStatus;
        
        private EntityRef<Declaration> _declaration;
        
        private int _declarationId;
        
        private string _ladingStatus;
        
        private string _model;
        
        private string _number;
        
        private int _sequence;
        
        private int _sortOrder;
        
        private string _weight;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAdmissionStatusChanging(string value);
        partial void OnAdmissionStatusChanged();
        partial void OnDeclarationIdChanging(int value);
        partial void OnDeclarationIdChanged();
        partial void OnLadingStatusChanging(string value);
        partial void OnLadingStatusChanged();
        partial void OnModelChanging(string value);
        partial void OnModelChanged();
        partial void OnNumberChanging(string value);
        partial void OnNumberChanged();
        partial void OnSequenceChanging(int value);
        partial void OnSequenceChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        partial void OnWeightChanging(string value);
        partial void OnWeightChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DeclarationContainer"/> class.
        /// </summary>
        public DeclarationContainer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AdmissionStatus' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string AdmissionStatus
        {
            get
            {
                return this._admissionStatus;
            }
            set
            {
                if ((this._admissionStatus != value))
                {
                    this.OnAdmissionStatusChanging(value);
                    this.RaiseDataMemberChanging("AdmissionStatus");
                    this.ValidateProperty("AdmissionStatus", value);
                    this._admissionStatus = value;
                    this.RaiseDataMemberChanged("AdmissionStatus");
                    this.OnAdmissionStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Declaration"/> entity.
        /// </summary>
        [Association("Declaration_DeclarationContainer", "DeclarationId", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public Declaration Declaration
        {
            get
            {
                if ((this._declaration == null))
                {
                    this._declaration = new EntityRef<Declaration>(this, "Declaration", this.FilterDeclaration);
                }
                return this._declaration.Entity;
            }
            set
            {
                Declaration previous = this.Declaration;
                if ((previous != value))
                {
                    this.ValidateProperty("Declaration", value);
                    if ((previous != null))
                    {
                        this._declaration.Entity = null;
                        previous.DeclarationContainer.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DeclarationId = value.ID;
                    }
                    else
                    {
                        this.DeclarationId = default(int);
                    }
                    this._declaration.Entity = value;
                    if ((value != null))
                    {
                        value.DeclarationContainer.Add(this);
                    }
                    this.RaisePropertyChanged("Declaration");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DeclarationId
        {
            get
            {
                return this._declarationId;
            }
            set
            {
                if ((this._declarationId != value))
                {
                    this.OnDeclarationIdChanging(value);
                    this.RaiseDataMemberChanging("DeclarationId");
                    this.ValidateProperty("DeclarationId", value);
                    this._declarationId = value;
                    this.RaiseDataMemberChanged("DeclarationId");
                    this.OnDeclarationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LadingStatus' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string LadingStatus
        {
            get
            {
                return this._ladingStatus;
            }
            set
            {
                if ((this._ladingStatus != value))
                {
                    this.OnLadingStatusChanging(value);
                    this.RaiseDataMemberChanging("LadingStatus");
                    this.ValidateProperty("LadingStatus", value);
                    this._ladingStatus = value;
                    this.RaiseDataMemberChanged("LadingStatus");
                    this.OnLadingStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Model' value.
        /// </summary>
        [DataMember()]
        [StringLength(1)]
        public string Model
        {
            get
            {
                return this._model;
            }
            set
            {
                if ((this._model != value))
                {
                    this.OnModelChanging(value);
                    this.RaiseDataMemberChanging("Model");
                    this.ValidateProperty("Model", value);
                    this._model = value;
                    this.RaiseDataMemberChanged("Model");
                    this.OnModelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Number' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string Number
        {
            get
            {
                return this._number;
            }
            set
            {
                if ((this._number != value))
                {
                    this.OnNumberChanging(value);
                    this.RaiseDataMemberChanging("Number");
                    this.ValidateProperty("Number", value);
                    this._number = value;
                    this.RaiseDataMemberChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Sequence' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Sequence
        {
            get
            {
                return this._sequence;
            }
            set
            {
                if ((this._sequence != value))
                {
                    this.OnSequenceChanging(value);
                    this.ValidateProperty("Sequence", value);
                    this._sequence = value;
                    this.RaisePropertyChanged("Sequence");
                    this.OnSequenceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SortOrder' value.
        /// </summary>
        [DataMember()]
        public int SortOrder
        {
            get
            {
                return this._sortOrder;
            }
            set
            {
                if ((this._sortOrder != value))
                {
                    this.OnSortOrderChanging(value);
                    this.RaiseDataMemberChanging("SortOrder");
                    this.ValidateProperty("SortOrder", value);
                    this._sortOrder = value;
                    this.RaiseDataMemberChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Weight' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string Weight
        {
            get
            {
                return this._weight;
            }
            set
            {
                if ((this._weight != value))
                {
                    this.OnWeightChanging(value);
                    this.RaiseDataMemberChanging("Weight");
                    this.ValidateProperty("Weight", value);
                    this._weight = value;
                    this.RaiseDataMemberChanged("Weight");
                    this.OnWeightChanged();
                }
            }
        }
        
        private bool FilterDeclaration(Declaration entity)
        {
            return (entity.ID == this.DeclarationId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._sequence;
        }
    }
    
    /// <summary>
    /// The 'DeclarationDocument' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class DeclarationDocument : Entity
    {
        
        private string _certificateNumber;
        
        private EntityRef<Declaration> _declaration;
        
        private int _declarationId;
        
        private string _document;
        
        private EntityRef<Document> _document1;
        
        private int _sequence;
        
        private int _sortOrder;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCertificateNumberChanging(string value);
        partial void OnCertificateNumberChanged();
        partial void OnDeclarationIdChanging(int value);
        partial void OnDeclarationIdChanged();
        partial void OnDocumentChanging(string value);
        partial void OnDocumentChanged();
        partial void OnSequenceChanging(int value);
        partial void OnSequenceChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DeclarationDocument"/> class.
        /// </summary>
        public DeclarationDocument()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CertificateNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string CertificateNumber
        {
            get
            {
                return this._certificateNumber;
            }
            set
            {
                if ((this._certificateNumber != value))
                {
                    this.OnCertificateNumberChanging(value);
                    this.RaiseDataMemberChanging("CertificateNumber");
                    this.ValidateProperty("CertificateNumber", value);
                    this._certificateNumber = value;
                    this.RaiseDataMemberChanged("CertificateNumber");
                    this.OnCertificateNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Declaration"/> entity.
        /// </summary>
        [Association("Declaration_DeclarationDocument", "DeclarationId", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public Declaration Declaration
        {
            get
            {
                if ((this._declaration == null))
                {
                    this._declaration = new EntityRef<Declaration>(this, "Declaration", this.FilterDeclaration);
                }
                return this._declaration.Entity;
            }
            set
            {
                Declaration previous = this.Declaration;
                if ((previous != value))
                {
                    this.ValidateProperty("Declaration", value);
                    if ((previous != null))
                    {
                        this._declaration.Entity = null;
                        previous.DeclarationDocument.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DeclarationId = value.ID;
                    }
                    else
                    {
                        this.DeclarationId = default(int);
                    }
                    this._declaration.Entity = value;
                    if ((value != null))
                    {
                        value.DeclarationDocument.Add(this);
                    }
                    this.RaisePropertyChanged("Declaration");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DeclarationId
        {
            get
            {
                return this._declarationId;
            }
            set
            {
                if ((this._declarationId != value))
                {
                    this.OnDeclarationIdChanging(value);
                    this.RaiseDataMemberChanging("DeclarationId");
                    this.ValidateProperty("DeclarationId", value);
                    this._declarationId = value;
                    this.RaiseDataMemberChanged("DeclarationId");
                    this.OnDeclarationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Document' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(16)]
        public string Document
        {
            get
            {
                return this._document;
            }
            set
            {
                if ((this._document != value))
                {
                    this.OnDocumentChanging(value);
                    this.RaiseDataMemberChanging("Document");
                    this.ValidateProperty("Document", value);
                    this._document = value;
                    this.RaiseDataMemberChanged("Document");
                    this.OnDocumentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Document"/> entity.
        /// </summary>
        [Association("Document_DeclarationDocument", "Document", "Code", IsForeignKey=true)]
        [XmlIgnore()]
        public Document Document1
        {
            get
            {
                if ((this._document1 == null))
                {
                    this._document1 = new EntityRef<Document>(this, "Document1", this.FilterDocument1);
                }
                return this._document1.Entity;
            }
            set
            {
                Document previous = this.Document1;
                if ((previous != value))
                {
                    this.ValidateProperty("Document1", value);
                    if ((previous != null))
                    {
                        this._document1.Entity = null;
                        previous.DeclarationDocument.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.Document = value.Code;
                    }
                    else
                    {
                        this.Document = default(string);
                    }
                    this._document1.Entity = value;
                    if ((value != null))
                    {
                        value.DeclarationDocument.Add(this);
                    }
                    this.RaisePropertyChanged("Document1");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Sequence' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Sequence
        {
            get
            {
                return this._sequence;
            }
            set
            {
                if ((this._sequence != value))
                {
                    this.OnSequenceChanging(value);
                    this.ValidateProperty("Sequence", value);
                    this._sequence = value;
                    this.RaisePropertyChanged("Sequence");
                    this.OnSequenceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SortOrder' value.
        /// </summary>
        [DataMember()]
        public int SortOrder
        {
            get
            {
                return this._sortOrder;
            }
            set
            {
                if ((this._sortOrder != value))
                {
                    this.OnSortOrderChanging(value);
                    this.RaiseDataMemberChanging("SortOrder");
                    this.ValidateProperty("SortOrder", value);
                    this._sortOrder = value;
                    this.RaiseDataMemberChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
        
        private bool FilterDeclaration(Declaration entity)
        {
            return (entity.ID == this.DeclarationId);
        }
        
        private bool FilterDocument1(Document entity)
        {
            return (entity.Code == this.Document);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._sequence;
        }
    }
    
    /// <summary>
    /// The 'DeclarationImage' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class DeclarationImage : Entity
    {
        
        private EntityRef<Declaration> _declaration;
        
        private int _declarationId;
        
        private string _scanImageName;
        
        private int _sequence;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDeclarationIdChanging(int value);
        partial void OnDeclarationIdChanged();
        partial void OnScanImageNameChanging(string value);
        partial void OnScanImageNameChanged();
        partial void OnSequenceChanging(int value);
        partial void OnSequenceChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DeclarationImage"/> class.
        /// </summary>
        public DeclarationImage()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Declaration"/> entity.
        /// </summary>
        [Association("Declaration_DeclarationImage", "DeclarationId", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public Declaration Declaration
        {
            get
            {
                if ((this._declaration == null))
                {
                    this._declaration = new EntityRef<Declaration>(this, "Declaration", this.FilterDeclaration);
                }
                return this._declaration.Entity;
            }
            set
            {
                Declaration previous = this.Declaration;
                if ((previous != value))
                {
                    this.ValidateProperty("Declaration", value);
                    if ((previous != null))
                    {
                        this._declaration.Entity = null;
                        previous.DeclarationImage.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DeclarationId = value.ID;
                    }
                    else
                    {
                        this.DeclarationId = default(int);
                    }
                    this._declaration.Entity = value;
                    if ((value != null))
                    {
                        value.DeclarationImage.Add(this);
                    }
                    this.RaisePropertyChanged("Declaration");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DeclarationId
        {
            get
            {
                return this._declarationId;
            }
            set
            {
                if ((this._declarationId != value))
                {
                    this.OnDeclarationIdChanging(value);
                    this.RaiseDataMemberChanging("DeclarationId");
                    this.ValidateProperty("DeclarationId", value);
                    this._declarationId = value;
                    this.RaiseDataMemberChanged("DeclarationId");
                    this.OnDeclarationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ScanImageName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(32)]
        public string ScanImageName
        {
            get
            {
                return this._scanImageName;
            }
            set
            {
                if ((this._scanImageName != value))
                {
                    this.OnScanImageNameChanging(value);
                    this.RaiseDataMemberChanging("ScanImageName");
                    this.ValidateProperty("ScanImageName", value);
                    this._scanImageName = value;
                    this.RaiseDataMemberChanged("ScanImageName");
                    this.OnScanImageNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Sequence' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Sequence
        {
            get
            {
                return this._sequence;
            }
            set
            {
                if ((this._sequence != value))
                {
                    this.OnSequenceChanging(value);
                    this.ValidateProperty("Sequence", value);
                    this._sequence = value;
                    this.RaisePropertyChanged("Sequence");
                    this.OnSequenceChanged();
                }
            }
        }
        
        private bool FilterDeclaration(Declaration entity)
        {
            return (entity.ID == this.DeclarationId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._sequence;
        }
    }
    
    /// <summary>
    /// The 'DeclarationItem' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class DeclarationItem : Entity
    {
        
        private string _controlItem;
        
        private string _countryCode;
        
        private string _currencyCode;
        
        private EntityRef<Declaration> _declaration;
        
        private int _declarationId;
        
        private Nullable<decimal> _declaredPrice;
        
        private Nullable<decimal> _declaredQuantity;
        
        private Nullable<decimal> _declaredTotalPrice;
        
        private string _declaredUnitCode;
        
        private string _dutyCode;
        
        private Nullable<decimal> _legalQuantity;
        
        private string _legalUnitCode;
        
        private string _model;
        
        private string _name;
        
        private string _number;
        
        private string _productNumber;
        
        private string _purpose;
        
        private Nullable<decimal> _secondQuantity;
        
        private string _secondUnitCode;
        
        private int _sequence;
        
        private int _sortOrder;
        
        private string _subNumber;
        
        private string _versionNumber;
        
        private Nullable<decimal> _workFee;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnControlItemChanging(string value);
        partial void OnControlItemChanged();
        partial void OnCountryCodeChanging(string value);
        partial void OnCountryCodeChanged();
        partial void OnCurrencyCodeChanging(string value);
        partial void OnCurrencyCodeChanged();
        partial void OnDeclarationIdChanging(int value);
        partial void OnDeclarationIdChanged();
        partial void OnDeclaredPriceChanging(Nullable<decimal> value);
        partial void OnDeclaredPriceChanged();
        partial void OnDeclaredQuantityChanging(Nullable<decimal> value);
        partial void OnDeclaredQuantityChanged();
        partial void OnDeclaredTotalPriceChanging(Nullable<decimal> value);
        partial void OnDeclaredTotalPriceChanged();
        partial void OnDeclaredUnitCodeChanging(string value);
        partial void OnDeclaredUnitCodeChanged();
        partial void OnDutyCodeChanging(string value);
        partial void OnDutyCodeChanged();
        partial void OnLegalQuantityChanging(Nullable<decimal> value);
        partial void OnLegalQuantityChanged();
        partial void OnLegalUnitCodeChanging(string value);
        partial void OnLegalUnitCodeChanged();
        partial void OnModelChanging(string value);
        partial void OnModelChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNumberChanging(string value);
        partial void OnNumberChanged();
        partial void OnProductNumberChanging(string value);
        partial void OnProductNumberChanged();
        partial void OnPurposeChanging(string value);
        partial void OnPurposeChanged();
        partial void OnSecondQuantityChanging(Nullable<decimal> value);
        partial void OnSecondQuantityChanged();
        partial void OnSecondUnitCodeChanging(string value);
        partial void OnSecondUnitCodeChanged();
        partial void OnSequenceChanging(int value);
        partial void OnSequenceChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        partial void OnSubNumberChanging(string value);
        partial void OnSubNumberChanged();
        partial void OnVersionNumberChanging(string value);
        partial void OnVersionNumberChanged();
        partial void OnWorkFeeChanging(Nullable<decimal> value);
        partial void OnWorkFeeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DeclarationItem"/> class.
        /// </summary>
        public DeclarationItem()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ControlItem' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string ControlItem
        {
            get
            {
                return this._controlItem;
            }
            set
            {
                if ((this._controlItem != value))
                {
                    this.OnControlItemChanging(value);
                    this.RaiseDataMemberChanging("ControlItem");
                    this.ValidateProperty("ControlItem", value);
                    this._controlItem = value;
                    this.RaiseDataMemberChanged("ControlItem");
                    this.OnControlItemChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CountryCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string CountryCode
        {
            get
            {
                return this._countryCode;
            }
            set
            {
                if ((this._countryCode != value))
                {
                    this.OnCountryCodeChanging(value);
                    this.RaiseDataMemberChanging("CountryCode");
                    this.ValidateProperty("CountryCode", value);
                    this._countryCode = value;
                    this.RaiseDataMemberChanged("CountryCode");
                    this.OnCountryCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CurrencyCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string CurrencyCode
        {
            get
            {
                return this._currencyCode;
            }
            set
            {
                if ((this._currencyCode != value))
                {
                    this.OnCurrencyCodeChanging(value);
                    this.RaiseDataMemberChanging("CurrencyCode");
                    this.ValidateProperty("CurrencyCode", value);
                    this._currencyCode = value;
                    this.RaiseDataMemberChanged("CurrencyCode");
                    this.OnCurrencyCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Declaration"/> entity.
        /// </summary>
        [Association("Declaration_DeclarationItem", "DeclarationId", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public Declaration Declaration
        {
            get
            {
                if ((this._declaration == null))
                {
                    this._declaration = new EntityRef<Declaration>(this, "Declaration", this.FilterDeclaration);
                }
                return this._declaration.Entity;
            }
            set
            {
                Declaration previous = this.Declaration;
                if ((previous != value))
                {
                    this.ValidateProperty("Declaration", value);
                    if ((previous != null))
                    {
                        this._declaration.Entity = null;
                        previous.DeclarationItem.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DeclarationId = value.ID;
                    }
                    else
                    {
                        this.DeclarationId = default(int);
                    }
                    this._declaration.Entity = value;
                    if ((value != null))
                    {
                        value.DeclarationItem.Add(this);
                    }
                    this.RaisePropertyChanged("Declaration");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DeclarationId
        {
            get
            {
                return this._declarationId;
            }
            set
            {
                if ((this._declarationId != value))
                {
                    this.OnDeclarationIdChanging(value);
                    this.RaiseDataMemberChanging("DeclarationId");
                    this.ValidateProperty("DeclarationId", value);
                    this._declarationId = value;
                    this.RaiseDataMemberChanged("DeclarationId");
                    this.OnDeclarationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclaredPrice' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> DeclaredPrice
        {
            get
            {
                return this._declaredPrice;
            }
            set
            {
                if ((this._declaredPrice != value))
                {
                    this.OnDeclaredPriceChanging(value);
                    this.RaiseDataMemberChanging("DeclaredPrice");
                    this.ValidateProperty("DeclaredPrice", value);
                    this._declaredPrice = value;
                    this.RaiseDataMemberChanged("DeclaredPrice");
                    this.OnDeclaredPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclaredQuantity' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> DeclaredQuantity
        {
            get
            {
                return this._declaredQuantity;
            }
            set
            {
                if ((this._declaredQuantity != value))
                {
                    this.OnDeclaredQuantityChanging(value);
                    this.RaiseDataMemberChanging("DeclaredQuantity");
                    this.ValidateProperty("DeclaredQuantity", value);
                    this._declaredQuantity = value;
                    this.RaiseDataMemberChanged("DeclaredQuantity");
                    this.OnDeclaredQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclaredTotalPrice' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> DeclaredTotalPrice
        {
            get
            {
                return this._declaredTotalPrice;
            }
            set
            {
                if ((this._declaredTotalPrice != value))
                {
                    this.OnDeclaredTotalPriceChanging(value);
                    this.RaiseDataMemberChanging("DeclaredTotalPrice");
                    this.ValidateProperty("DeclaredTotalPrice", value);
                    this._declaredTotalPrice = value;
                    this.RaiseDataMemberChanged("DeclaredTotalPrice");
                    this.OnDeclaredTotalPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclaredUnitCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string DeclaredUnitCode
        {
            get
            {
                return this._declaredUnitCode;
            }
            set
            {
                if ((this._declaredUnitCode != value))
                {
                    this.OnDeclaredUnitCodeChanging(value);
                    this.RaiseDataMemberChanging("DeclaredUnitCode");
                    this.ValidateProperty("DeclaredUnitCode", value);
                    this._declaredUnitCode = value;
                    this.RaiseDataMemberChanged("DeclaredUnitCode");
                    this.OnDeclaredUnitCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DutyCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string DutyCode
        {
            get
            {
                return this._dutyCode;
            }
            set
            {
                if ((this._dutyCode != value))
                {
                    this.OnDutyCodeChanging(value);
                    this.RaiseDataMemberChanging("DutyCode");
                    this.ValidateProperty("DutyCode", value);
                    this._dutyCode = value;
                    this.RaiseDataMemberChanged("DutyCode");
                    this.OnDutyCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LegalQuantity' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> LegalQuantity
        {
            get
            {
                return this._legalQuantity;
            }
            set
            {
                if ((this._legalQuantity != value))
                {
                    this.OnLegalQuantityChanging(value);
                    this.RaiseDataMemberChanging("LegalQuantity");
                    this.ValidateProperty("LegalQuantity", value);
                    this._legalQuantity = value;
                    this.RaiseDataMemberChanged("LegalQuantity");
                    this.OnLegalQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LegalUnitCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string LegalUnitCode
        {
            get
            {
                return this._legalUnitCode;
            }
            set
            {
                if ((this._legalUnitCode != value))
                {
                    this.OnLegalUnitCodeChanging(value);
                    this.RaiseDataMemberChanging("LegalUnitCode");
                    this.ValidateProperty("LegalUnitCode", value);
                    this._legalUnitCode = value;
                    this.RaiseDataMemberChanged("LegalUnitCode");
                    this.OnLegalUnitCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Model' value.
        /// </summary>
        [DataMember()]
        [StringLength(64)]
        public string Model
        {
            get
            {
                return this._model;
            }
            set
            {
                if ((this._model != value))
                {
                    this.OnModelChanging(value);
                    this.RaiseDataMemberChanging("Model");
                    this.ValidateProperty("Model", value);
                    this._model = value;
                    this.RaiseDataMemberChanged("Model");
                    this.OnModelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Number' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(32)]
        public string Number
        {
            get
            {
                return this._number;
            }
            set
            {
                if ((this._number != value))
                {
                    this.OnNumberChanging(value);
                    this.RaiseDataMemberChanging("Number");
                    this.ValidateProperty("Number", value);
                    this._number = value;
                    this.RaiseDataMemberChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string ProductNumber
        {
            get
            {
                return this._productNumber;
            }
            set
            {
                if ((this._productNumber != value))
                {
                    this.OnProductNumberChanging(value);
                    this.RaiseDataMemberChanging("ProductNumber");
                    this.ValidateProperty("ProductNumber", value);
                    this._productNumber = value;
                    this.RaiseDataMemberChanged("ProductNumber");
                    this.OnProductNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Purpose' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string Purpose
        {
            get
            {
                return this._purpose;
            }
            set
            {
                if ((this._purpose != value))
                {
                    this.OnPurposeChanging(value);
                    this.RaiseDataMemberChanging("Purpose");
                    this.ValidateProperty("Purpose", value);
                    this._purpose = value;
                    this.RaiseDataMemberChanged("Purpose");
                    this.OnPurposeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SecondQuantity' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SecondQuantity
        {
            get
            {
                return this._secondQuantity;
            }
            set
            {
                if ((this._secondQuantity != value))
                {
                    this.OnSecondQuantityChanging(value);
                    this.RaiseDataMemberChanging("SecondQuantity");
                    this.ValidateProperty("SecondQuantity", value);
                    this._secondQuantity = value;
                    this.RaiseDataMemberChanged("SecondQuantity");
                    this.OnSecondQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SecondUnitCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string SecondUnitCode
        {
            get
            {
                return this._secondUnitCode;
            }
            set
            {
                if ((this._secondUnitCode != value))
                {
                    this.OnSecondUnitCodeChanging(value);
                    this.RaiseDataMemberChanging("SecondUnitCode");
                    this.ValidateProperty("SecondUnitCode", value);
                    this._secondUnitCode = value;
                    this.RaiseDataMemberChanged("SecondUnitCode");
                    this.OnSecondUnitCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Sequence' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Sequence
        {
            get
            {
                return this._sequence;
            }
            set
            {
                if ((this._sequence != value))
                {
                    this.OnSequenceChanging(value);
                    this.ValidateProperty("Sequence", value);
                    this._sequence = value;
                    this.RaisePropertyChanged("Sequence");
                    this.OnSequenceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SortOrder' value.
        /// </summary>
        [DataMember()]
        public int SortOrder
        {
            get
            {
                return this._sortOrder;
            }
            set
            {
                if ((this._sortOrder != value))
                {
                    this.OnSortOrderChanging(value);
                    this.RaiseDataMemberChanging("SortOrder");
                    this.ValidateProperty("SortOrder", value);
                    this._sortOrder = value;
                    this.RaiseDataMemberChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SubNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string SubNumber
        {
            get
            {
                return this._subNumber;
            }
            set
            {
                if ((this._subNumber != value))
                {
                    this.OnSubNumberChanging(value);
                    this.RaiseDataMemberChanging("SubNumber");
                    this.ValidateProperty("SubNumber", value);
                    this._subNumber = value;
                    this.RaiseDataMemberChanged("SubNumber");
                    this.OnSubNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VersionNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string VersionNumber
        {
            get
            {
                return this._versionNumber;
            }
            set
            {
                if ((this._versionNumber != value))
                {
                    this.OnVersionNumberChanging(value);
                    this.RaiseDataMemberChanging("VersionNumber");
                    this.ValidateProperty("VersionNumber", value);
                    this._versionNumber = value;
                    this.RaiseDataMemberChanged("VersionNumber");
                    this.OnVersionNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkFee' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> WorkFee
        {
            get
            {
                return this._workFee;
            }
            set
            {
                if ((this._workFee != value))
                {
                    this.OnWorkFeeChanging(value);
                    this.RaiseDataMemberChanging("WorkFee");
                    this.ValidateProperty("WorkFee", value);
                    this._workFee = value;
                    this.RaiseDataMemberChanged("WorkFee");
                    this.OnWorkFeeChanged();
                }
            }
        }
        
        private bool FilterDeclaration(Declaration entity)
        {
            return (entity.ID == this.DeclarationId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._sequence;
        }
    }
    
    /// <summary>
    /// The 'DeclarationPortCheckResult' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class DeclarationPortCheckResult : Entity
    {
        
        private string _containerAdmissionStatus;
        
        private string _conveyanceOnline;
        
        private string _declarationNumber;
        
        private string _grossWeightOnline;
        
        private int _id;
        
        private string _leaveDockDate;
        
        private float _onlineContainerCount;
        
        private string _onlineContainerNumber;
        
        private string _packageAmountOnline;
        
        private string _voyageNumberOnline;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnContainerAdmissionStatusChanging(string value);
        partial void OnContainerAdmissionStatusChanged();
        partial void OnConveyanceOnlineChanging(string value);
        partial void OnConveyanceOnlineChanged();
        partial void OnDeclarationNumberChanging(string value);
        partial void OnDeclarationNumberChanged();
        partial void OnGrossWeightOnlineChanging(string value);
        partial void OnGrossWeightOnlineChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnLeaveDockDateChanging(string value);
        partial void OnLeaveDockDateChanged();
        partial void OnOnlineContainerCountChanging(float value);
        partial void OnOnlineContainerCountChanged();
        partial void OnOnlineContainerNumberChanging(string value);
        partial void OnOnlineContainerNumberChanged();
        partial void OnPackageAmountOnlineChanging(string value);
        partial void OnPackageAmountOnlineChanged();
        partial void OnVoyageNumberOnlineChanging(string value);
        partial void OnVoyageNumberOnlineChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DeclarationPortCheckResult"/> class.
        /// </summary>
        public DeclarationPortCheckResult()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ContainerAdmissionStatus' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string ContainerAdmissionStatus
        {
            get
            {
                return this._containerAdmissionStatus;
            }
            set
            {
                if ((this._containerAdmissionStatus != value))
                {
                    this.OnContainerAdmissionStatusChanging(value);
                    this.RaiseDataMemberChanging("ContainerAdmissionStatus");
                    this.ValidateProperty("ContainerAdmissionStatus", value);
                    this._containerAdmissionStatus = value;
                    this.RaiseDataMemberChanged("ContainerAdmissionStatus");
                    this.OnContainerAdmissionStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ConveyanceOnline' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string ConveyanceOnline
        {
            get
            {
                return this._conveyanceOnline;
            }
            set
            {
                if ((this._conveyanceOnline != value))
                {
                    this.OnConveyanceOnlineChanging(value);
                    this.RaiseDataMemberChanging("ConveyanceOnline");
                    this.ValidateProperty("ConveyanceOnline", value);
                    this._conveyanceOnline = value;
                    this.RaiseDataMemberChanged("ConveyanceOnline");
                    this.OnConveyanceOnlineChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationNumber' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string DeclarationNumber
        {
            get
            {
                return this._declarationNumber;
            }
            set
            {
                if ((this._declarationNumber != value))
                {
                    this.OnDeclarationNumberChanging(value);
                    this.RaiseDataMemberChanging("DeclarationNumber");
                    this.ValidateProperty("DeclarationNumber", value);
                    this._declarationNumber = value;
                    this.RaiseDataMemberChanged("DeclarationNumber");
                    this.OnDeclarationNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GrossWeightOnline' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string GrossWeightOnline
        {
            get
            {
                return this._grossWeightOnline;
            }
            set
            {
                if ((this._grossWeightOnline != value))
                {
                    this.OnGrossWeightOnlineChanging(value);
                    this.RaiseDataMemberChanging("GrossWeightOnline");
                    this.ValidateProperty("GrossWeightOnline", value);
                    this._grossWeightOnline = value;
                    this.RaiseDataMemberChanged("GrossWeightOnline");
                    this.OnGrossWeightOnlineChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LeaveDockDate' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string LeaveDockDate
        {
            get
            {
                return this._leaveDockDate;
            }
            set
            {
                if ((this._leaveDockDate != value))
                {
                    this.OnLeaveDockDateChanging(value);
                    this.RaiseDataMemberChanging("LeaveDockDate");
                    this.ValidateProperty("LeaveDockDate", value);
                    this._leaveDockDate = value;
                    this.RaiseDataMemberChanged("LeaveDockDate");
                    this.OnLeaveDockDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OnlineContainerCount' value.
        /// </summary>
        [DataMember()]
        public float OnlineContainerCount
        {
            get
            {
                return this._onlineContainerCount;
            }
            set
            {
                if ((this._onlineContainerCount != value))
                {
                    this.OnOnlineContainerCountChanging(value);
                    this.RaiseDataMemberChanging("OnlineContainerCount");
                    this.ValidateProperty("OnlineContainerCount", value);
                    this._onlineContainerCount = value;
                    this.RaiseDataMemberChanged("OnlineContainerCount");
                    this.OnOnlineContainerCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OnlineContainerNumber' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string OnlineContainerNumber
        {
            get
            {
                return this._onlineContainerNumber;
            }
            set
            {
                if ((this._onlineContainerNumber != value))
                {
                    this.OnOnlineContainerNumberChanging(value);
                    this.RaiseDataMemberChanging("OnlineContainerNumber");
                    this.ValidateProperty("OnlineContainerNumber", value);
                    this._onlineContainerNumber = value;
                    this.RaiseDataMemberChanged("OnlineContainerNumber");
                    this.OnOnlineContainerNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PackageAmountOnline' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string PackageAmountOnline
        {
            get
            {
                return this._packageAmountOnline;
            }
            set
            {
                if ((this._packageAmountOnline != value))
                {
                    this.OnPackageAmountOnlineChanging(value);
                    this.RaiseDataMemberChanging("PackageAmountOnline");
                    this.ValidateProperty("PackageAmountOnline", value);
                    this._packageAmountOnline = value;
                    this.RaiseDataMemberChanged("PackageAmountOnline");
                    this.OnPackageAmountOnlineChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VoyageNumberOnline' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string VoyageNumberOnline
        {
            get
            {
                return this._voyageNumberOnline;
            }
            set
            {
                if ((this._voyageNumberOnline != value))
                {
                    this.OnVoyageNumberOnlineChanging(value);
                    this.RaiseDataMemberChanging("VoyageNumberOnline");
                    this.ValidateProperty("VoyageNumberOnline", value);
                    this._voyageNumberOnline = value;
                    this.RaiseDataMemberChanged("VoyageNumberOnline");
                    this.OnVoyageNumberOnlineChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'District' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class District : Entity
    {
        
        private string _code;
        
        private string _name;
        
        private string _pinYin;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPinYinChanging(string value);
        partial void OnPinYinChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="District"/> class.
        /// </summary>
        public District()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(16)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PinYin' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public string PinYin
        {
            get
            {
                return this._pinYin;
            }
            set
            {
                if ((this._pinYin != value))
                {
                    this.OnPinYinChanging(value);
                    this.RaiseDataMemberChanging("PinYin");
                    this.ValidateProperty("PinYin", value);
                    this._pinYin = value;
                    this.RaiseDataMemberChanged("PinYin");
                    this.OnPinYinChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'Document' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class Document : Entity
    {
        
        private string _code;
        
        private EntityCollection<DeclarationDocument> _declarationDocument;
        
        private string _name;
        
        private string _pinYin;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPinYinChanging(string value);
        partial void OnPinYinChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Document"/> class.
        /// </summary>
        public Document()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(16)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="DeclarationDocument"/> entity instances.
        /// </summary>
        [Association("Document_DeclarationDocument", "Code", "Document")]
        [XmlIgnore()]
        public EntityCollection<DeclarationDocument> DeclarationDocument
        {
            get
            {
                if ((this._declarationDocument == null))
                {
                    this._declarationDocument = new EntityCollection<DeclarationDocument>(this, "DeclarationDocument", this.FilterDeclarationDocument, this.AttachDeclarationDocument, this.DetachDeclarationDocument);
                }
                return this._declarationDocument;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PinYin' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public string PinYin
        {
            get
            {
                return this._pinYin;
            }
            set
            {
                if ((this._pinYin != value))
                {
                    this.OnPinYinChanging(value);
                    this.RaiseDataMemberChanging("PinYin");
                    this.ValidateProperty("PinYin", value);
                    this._pinYin = value;
                    this.RaiseDataMemberChanged("PinYin");
                    this.OnPinYinChanged();
                }
            }
        }
        
        private void AttachDeclarationDocument(DeclarationDocument entity)
        {
            entity.Document1 = this;
        }
        
        private void DetachDeclarationDocument(DeclarationDocument entity)
        {
            entity.Document1 = null;
        }
        
        private bool FilterDeclarationDocument(DeclarationDocument entity)
        {
            return (entity.Document == this.Code);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'DocumentType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class DocumentType : Entity
    {
        
        private string _code;
        
        private string _name;
        
        private string _pinYin;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPinYinChanging(string value);
        partial void OnPinYinChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentType"/> class.
        /// </summary>
        public DocumentType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(16)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PinYin' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public string PinYin
        {
            get
            {
                return this._pinYin;
            }
            set
            {
                if ((this._pinYin != value))
                {
                    this.OnPinYinChanging(value);
                    this.RaiseDataMemberChanging("PinYin");
                    this.ValidateProperty("PinYin", value);
                    this._pinYin = value;
                    this.RaiseDataMemberChanged("PinYin");
                    this.OnPinYinChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'DoubleCheckDeclaration' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class DoubleCheckDeclaration : Entity
    {
        
        private string _approvalNumber;
        
        private string _containerNumbers;
        
        private string _contractNumber;
        
        private string _countryName;
        
        private string _customerName;
        
        private string _customhouseName;
        
        private EntityRef<Declaration> _declaration;
        
        private int _declarationId;
        
        private string _declarationNumber;
        
        private string _districtName;
        
        private string _documentCodes;
        
        private EntityCollection<DoubleCheckDeclarationItem> _doubleCheckDeclarationItem;
        
        private string _examinationNumber;
        
        private string _feightFeeRate;
        
        private string _freightFeeCurrencyName;
        
        private string _grossWeight;
        
        private int _id;
        
        private string _insuranceFeeCurrencyName;
        
        private string _insuranceFeeRate;
        
        private string _licenseNumber;
        
        private string _machineName;
        
        private string _manualNumber;
        
        private string _netWeight;
        
        private string _packageAmount;
        
        private string _payName;
        
        private string _tradeName;
        
        private string _transactionName;
        
        private string _wrapName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnApprovalNumberChanging(string value);
        partial void OnApprovalNumberChanged();
        partial void OnContainerNumbersChanging(string value);
        partial void OnContainerNumbersChanged();
        partial void OnContractNumberChanging(string value);
        partial void OnContractNumberChanged();
        partial void OnCountryNameChanging(string value);
        partial void OnCountryNameChanged();
        partial void OnCustomerNameChanging(string value);
        partial void OnCustomerNameChanged();
        partial void OnCustomhouseNameChanging(string value);
        partial void OnCustomhouseNameChanged();
        partial void OnDeclarationIdChanging(int value);
        partial void OnDeclarationIdChanged();
        partial void OnDeclarationNumberChanging(string value);
        partial void OnDeclarationNumberChanged();
        partial void OnDistrictNameChanging(string value);
        partial void OnDistrictNameChanged();
        partial void OnDocumentCodesChanging(string value);
        partial void OnDocumentCodesChanged();
        partial void OnExaminationNumberChanging(string value);
        partial void OnExaminationNumberChanged();
        partial void OnFeightFeeRateChanging(string value);
        partial void OnFeightFeeRateChanged();
        partial void OnFreightFeeCurrencyNameChanging(string value);
        partial void OnFreightFeeCurrencyNameChanged();
        partial void OnGrossWeightChanging(string value);
        partial void OnGrossWeightChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnInsuranceFeeCurrencyNameChanging(string value);
        partial void OnInsuranceFeeCurrencyNameChanged();
        partial void OnInsuranceFeeRateChanging(string value);
        partial void OnInsuranceFeeRateChanged();
        partial void OnLicenseNumberChanging(string value);
        partial void OnLicenseNumberChanged();
        partial void OnMachineNameChanging(string value);
        partial void OnMachineNameChanged();
        partial void OnManualNumberChanging(string value);
        partial void OnManualNumberChanged();
        partial void OnNetWeightChanging(string value);
        partial void OnNetWeightChanged();
        partial void OnPackageAmountChanging(string value);
        partial void OnPackageAmountChanged();
        partial void OnPayNameChanging(string value);
        partial void OnPayNameChanged();
        partial void OnTradeNameChanging(string value);
        partial void OnTradeNameChanged();
        partial void OnTransactionNameChanging(string value);
        partial void OnTransactionNameChanged();
        partial void OnWrapNameChanging(string value);
        partial void OnWrapNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DoubleCheckDeclaration"/> class.
        /// </summary>
        public DoubleCheckDeclaration()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ApprovalNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string ApprovalNumber
        {
            get
            {
                return this._approvalNumber;
            }
            set
            {
                if ((this._approvalNumber != value))
                {
                    this.OnApprovalNumberChanging(value);
                    this.RaiseDataMemberChanging("ApprovalNumber");
                    this.ValidateProperty("ApprovalNumber", value);
                    this._approvalNumber = value;
                    this.RaiseDataMemberChanged("ApprovalNumber");
                    this.OnApprovalNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContainerNumbers' value.
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string ContainerNumbers
        {
            get
            {
                return this._containerNumbers;
            }
            set
            {
                if ((this._containerNumbers != value))
                {
                    this.OnContainerNumbersChanging(value);
                    this.RaiseDataMemberChanging("ContainerNumbers");
                    this.ValidateProperty("ContainerNumbers", value);
                    this._containerNumbers = value;
                    this.RaiseDataMemberChanged("ContainerNumbers");
                    this.OnContainerNumbersChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContractNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string ContractNumber
        {
            get
            {
                return this._contractNumber;
            }
            set
            {
                if ((this._contractNumber != value))
                {
                    this.OnContractNumberChanging(value);
                    this.RaiseDataMemberChanging("ContractNumber");
                    this.ValidateProperty("ContractNumber", value);
                    this._contractNumber = value;
                    this.RaiseDataMemberChanged("ContractNumber");
                    this.OnContractNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CountryName' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string CountryName
        {
            get
            {
                return this._countryName;
            }
            set
            {
                if ((this._countryName != value))
                {
                    this.OnCountryNameChanging(value);
                    this.RaiseDataMemberChanging("CountryName");
                    this.ValidateProperty("CountryName", value);
                    this._countryName = value;
                    this.RaiseDataMemberChanged("CountryName");
                    this.OnCountryNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(32)]
        public string CustomerName
        {
            get
            {
                return this._customerName;
            }
            set
            {
                if ((this._customerName != value))
                {
                    this.OnCustomerNameChanging(value);
                    this.RaiseDataMemberChanging("CustomerName");
                    this.ValidateProperty("CustomerName", value);
                    this._customerName = value;
                    this.RaiseDataMemberChanged("CustomerName");
                    this.OnCustomerNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomhouseName' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string CustomhouseName
        {
            get
            {
                return this._customhouseName;
            }
            set
            {
                if ((this._customhouseName != value))
                {
                    this.OnCustomhouseNameChanging(value);
                    this.RaiseDataMemberChanging("CustomhouseName");
                    this.ValidateProperty("CustomhouseName", value);
                    this._customhouseName = value;
                    this.RaiseDataMemberChanged("CustomhouseName");
                    this.OnCustomhouseNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Declaration"/> entity.
        /// </summary>
        [Association("Declaration_DoubleCheckDeclaration", "DeclarationId", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public Declaration Declaration
        {
            get
            {
                if ((this._declaration == null))
                {
                    this._declaration = new EntityRef<Declaration>(this, "Declaration", this.FilterDeclaration);
                }
                return this._declaration.Entity;
            }
            set
            {
                Declaration previous = this.Declaration;
                if ((previous != value))
                {
                    this.ValidateProperty("Declaration", value);
                    if ((previous != null))
                    {
                        this._declaration.Entity = null;
                        previous.DoubleCheckDeclaration.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DeclarationId = value.ID;
                    }
                    else
                    {
                        this.DeclarationId = default(int);
                    }
                    this._declaration.Entity = value;
                    if ((value != null))
                    {
                        value.DoubleCheckDeclaration.Add(this);
                    }
                    this.RaisePropertyChanged("Declaration");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DeclarationId
        {
            get
            {
                return this._declarationId;
            }
            set
            {
                if ((this._declarationId != value))
                {
                    this.OnDeclarationIdChanging(value);
                    this.RaiseDataMemberChanging("DeclarationId");
                    this.ValidateProperty("DeclarationId", value);
                    this._declarationId = value;
                    this.RaiseDataMemberChanged("DeclarationId");
                    this.OnDeclarationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string DeclarationNumber
        {
            get
            {
                return this._declarationNumber;
            }
            set
            {
                if ((this._declarationNumber != value))
                {
                    this.OnDeclarationNumberChanging(value);
                    this.RaiseDataMemberChanging("DeclarationNumber");
                    this.ValidateProperty("DeclarationNumber", value);
                    this._declarationNumber = value;
                    this.RaiseDataMemberChanged("DeclarationNumber");
                    this.OnDeclarationNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DistrictName' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string DistrictName
        {
            get
            {
                return this._districtName;
            }
            set
            {
                if ((this._districtName != value))
                {
                    this.OnDistrictNameChanging(value);
                    this.RaiseDataMemberChanging("DistrictName");
                    this.ValidateProperty("DistrictName", value);
                    this._districtName = value;
                    this.RaiseDataMemberChanged("DistrictName");
                    this.OnDistrictNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DocumentCodes' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string DocumentCodes
        {
            get
            {
                return this._documentCodes;
            }
            set
            {
                if ((this._documentCodes != value))
                {
                    this.OnDocumentCodesChanging(value);
                    this.RaiseDataMemberChanging("DocumentCodes");
                    this.ValidateProperty("DocumentCodes", value);
                    this._documentCodes = value;
                    this.RaiseDataMemberChanged("DocumentCodes");
                    this.OnDocumentCodesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="DoubleCheckDeclarationItem"/> entity instances.
        /// </summary>
        [Association("DoubleCheckDeclaration_DoubleCheckDeclarationItem", "ID", "DoubleCheckDeclarationId")]
        [XmlIgnore()]
        public EntityCollection<DoubleCheckDeclarationItem> DoubleCheckDeclarationItem
        {
            get
            {
                if ((this._doubleCheckDeclarationItem == null))
                {
                    this._doubleCheckDeclarationItem = new EntityCollection<DoubleCheckDeclarationItem>(this, "DoubleCheckDeclarationItem", this.FilterDoubleCheckDeclarationItem, this.AttachDoubleCheckDeclarationItem, this.DetachDoubleCheckDeclarationItem);
                }
                return this._doubleCheckDeclarationItem;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExaminationNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string ExaminationNumber
        {
            get
            {
                return this._examinationNumber;
            }
            set
            {
                if ((this._examinationNumber != value))
                {
                    this.OnExaminationNumberChanging(value);
                    this.RaiseDataMemberChanging("ExaminationNumber");
                    this.ValidateProperty("ExaminationNumber", value);
                    this._examinationNumber = value;
                    this.RaiseDataMemberChanged("ExaminationNumber");
                    this.OnExaminationNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FeightFeeRate' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string FeightFeeRate
        {
            get
            {
                return this._feightFeeRate;
            }
            set
            {
                if ((this._feightFeeRate != value))
                {
                    this.OnFeightFeeRateChanging(value);
                    this.RaiseDataMemberChanging("FeightFeeRate");
                    this.ValidateProperty("FeightFeeRate", value);
                    this._feightFeeRate = value;
                    this.RaiseDataMemberChanged("FeightFeeRate");
                    this.OnFeightFeeRateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FreightFeeCurrencyName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string FreightFeeCurrencyName
        {
            get
            {
                return this._freightFeeCurrencyName;
            }
            set
            {
                if ((this._freightFeeCurrencyName != value))
                {
                    this.OnFreightFeeCurrencyNameChanging(value);
                    this.RaiseDataMemberChanging("FreightFeeCurrencyName");
                    this.ValidateProperty("FreightFeeCurrencyName", value);
                    this._freightFeeCurrencyName = value;
                    this.RaiseDataMemberChanged("FreightFeeCurrencyName");
                    this.OnFreightFeeCurrencyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GrossWeight' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string GrossWeight
        {
            get
            {
                return this._grossWeight;
            }
            set
            {
                if ((this._grossWeight != value))
                {
                    this.OnGrossWeightChanging(value);
                    this.RaiseDataMemberChanging("GrossWeight");
                    this.ValidateProperty("GrossWeight", value);
                    this._grossWeight = value;
                    this.RaiseDataMemberChanged("GrossWeight");
                    this.OnGrossWeightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InsuranceFeeCurrencyName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string InsuranceFeeCurrencyName
        {
            get
            {
                return this._insuranceFeeCurrencyName;
            }
            set
            {
                if ((this._insuranceFeeCurrencyName != value))
                {
                    this.OnInsuranceFeeCurrencyNameChanging(value);
                    this.RaiseDataMemberChanging("InsuranceFeeCurrencyName");
                    this.ValidateProperty("InsuranceFeeCurrencyName", value);
                    this._insuranceFeeCurrencyName = value;
                    this.RaiseDataMemberChanged("InsuranceFeeCurrencyName");
                    this.OnInsuranceFeeCurrencyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InsuranceFeeRate' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string InsuranceFeeRate
        {
            get
            {
                return this._insuranceFeeRate;
            }
            set
            {
                if ((this._insuranceFeeRate != value))
                {
                    this.OnInsuranceFeeRateChanging(value);
                    this.RaiseDataMemberChanging("InsuranceFeeRate");
                    this.ValidateProperty("InsuranceFeeRate", value);
                    this._insuranceFeeRate = value;
                    this.RaiseDataMemberChanged("InsuranceFeeRate");
                    this.OnInsuranceFeeRateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LicenseNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string LicenseNumber
        {
            get
            {
                return this._licenseNumber;
            }
            set
            {
                if ((this._licenseNumber != value))
                {
                    this.OnLicenseNumberChanging(value);
                    this.RaiseDataMemberChanging("LicenseNumber");
                    this.ValidateProperty("LicenseNumber", value);
                    this._licenseNumber = value;
                    this.RaiseDataMemberChanged("LicenseNumber");
                    this.OnLicenseNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MachineName' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string MachineName
        {
            get
            {
                return this._machineName;
            }
            set
            {
                if ((this._machineName != value))
                {
                    this.OnMachineNameChanging(value);
                    this.RaiseDataMemberChanging("MachineName");
                    this.ValidateProperty("MachineName", value);
                    this._machineName = value;
                    this.RaiseDataMemberChanged("MachineName");
                    this.OnMachineNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ManualNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string ManualNumber
        {
            get
            {
                return this._manualNumber;
            }
            set
            {
                if ((this._manualNumber != value))
                {
                    this.OnManualNumberChanging(value);
                    this.RaiseDataMemberChanging("ManualNumber");
                    this.ValidateProperty("ManualNumber", value);
                    this._manualNumber = value;
                    this.RaiseDataMemberChanged("ManualNumber");
                    this.OnManualNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NetWeight' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string NetWeight
        {
            get
            {
                return this._netWeight;
            }
            set
            {
                if ((this._netWeight != value))
                {
                    this.OnNetWeightChanging(value);
                    this.RaiseDataMemberChanging("NetWeight");
                    this.ValidateProperty("NetWeight", value);
                    this._netWeight = value;
                    this.RaiseDataMemberChanged("NetWeight");
                    this.OnNetWeightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PackageAmount' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string PackageAmount
        {
            get
            {
                return this._packageAmount;
            }
            set
            {
                if ((this._packageAmount != value))
                {
                    this.OnPackageAmountChanging(value);
                    this.RaiseDataMemberChanging("PackageAmount");
                    this.ValidateProperty("PackageAmount", value);
                    this._packageAmount = value;
                    this.RaiseDataMemberChanged("PackageAmount");
                    this.OnPackageAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PayName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string PayName
        {
            get
            {
                return this._payName;
            }
            set
            {
                if ((this._payName != value))
                {
                    this.OnPayNameChanging(value);
                    this.RaiseDataMemberChanging("PayName");
                    this.ValidateProperty("PayName", value);
                    this._payName = value;
                    this.RaiseDataMemberChanged("PayName");
                    this.OnPayNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TradeName' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string TradeName
        {
            get
            {
                return this._tradeName;
            }
            set
            {
                if ((this._tradeName != value))
                {
                    this.OnTradeNameChanging(value);
                    this.RaiseDataMemberChanging("TradeName");
                    this.ValidateProperty("TradeName", value);
                    this._tradeName = value;
                    this.RaiseDataMemberChanged("TradeName");
                    this.OnTradeNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TransactionName' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string TransactionName
        {
            get
            {
                return this._transactionName;
            }
            set
            {
                if ((this._transactionName != value))
                {
                    this.OnTransactionNameChanging(value);
                    this.RaiseDataMemberChanging("TransactionName");
                    this.ValidateProperty("TransactionName", value);
                    this._transactionName = value;
                    this.RaiseDataMemberChanged("TransactionName");
                    this.OnTransactionNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WrapName' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string WrapName
        {
            get
            {
                return this._wrapName;
            }
            set
            {
                if ((this._wrapName != value))
                {
                    this.OnWrapNameChanging(value);
                    this.RaiseDataMemberChanging("WrapName");
                    this.ValidateProperty("WrapName", value);
                    this._wrapName = value;
                    this.RaiseDataMemberChanged("WrapName");
                    this.OnWrapNameChanged();
                }
            }
        }
        
        private bool FilterDeclaration(Declaration entity)
        {
            return (entity.ID == this.DeclarationId);
        }
        
        private void AttachDoubleCheckDeclarationItem(DoubleCheckDeclarationItem entity)
        {
            entity.DoubleCheckDeclaration = this;
        }
        
        private void DetachDoubleCheckDeclarationItem(DoubleCheckDeclarationItem entity)
        {
            entity.DoubleCheckDeclaration = null;
        }
        
        private bool FilterDoubleCheckDeclarationItem(DoubleCheckDeclarationItem entity)
        {
            return (entity.DoubleCheckDeclarationId == this.ID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'DoubleCheckDeclarationItem' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class DoubleCheckDeclarationItem : Entity
    {
        
        private string _controlNumber;
        
        private string _currencyName;
        
        private string _declaredQuantity;
        
        private string _declaredUnitName;
        
        private EntityRef<DoubleCheckDeclaration> _doubleCheckDeclaration;
        
        private int _doubleCheckDeclarationId;
        
        private string _firstQuantity;
        
        private string _firstUnitName;
        
        private string _hsCode;
        
        private int _id;
        
        private string _name;
        
        private string _secondQuantity;
        
        private string _secondUnitName;
        
        private int _sortOrder;
        
        private string _totalAmount;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnControlNumberChanging(string value);
        partial void OnControlNumberChanged();
        partial void OnCurrencyNameChanging(string value);
        partial void OnCurrencyNameChanged();
        partial void OnDeclaredQuantityChanging(string value);
        partial void OnDeclaredQuantityChanged();
        partial void OnDeclaredUnitNameChanging(string value);
        partial void OnDeclaredUnitNameChanged();
        partial void OnDoubleCheckDeclarationIdChanging(int value);
        partial void OnDoubleCheckDeclarationIdChanged();
        partial void OnFirstQuantityChanging(string value);
        partial void OnFirstQuantityChanged();
        partial void OnFirstUnitNameChanging(string value);
        partial void OnFirstUnitNameChanged();
        partial void OnHSCodeChanging(string value);
        partial void OnHSCodeChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnSecondQuantityChanging(string value);
        partial void OnSecondQuantityChanged();
        partial void OnSecondUnitNameChanging(string value);
        partial void OnSecondUnitNameChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        partial void OnTotalAmountChanging(string value);
        partial void OnTotalAmountChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DoubleCheckDeclarationItem"/> class.
        /// </summary>
        public DoubleCheckDeclarationItem()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ControlNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string ControlNumber
        {
            get
            {
                return this._controlNumber;
            }
            set
            {
                if ((this._controlNumber != value))
                {
                    this.OnControlNumberChanging(value);
                    this.RaiseDataMemberChanging("ControlNumber");
                    this.ValidateProperty("ControlNumber", value);
                    this._controlNumber = value;
                    this.RaiseDataMemberChanged("ControlNumber");
                    this.OnControlNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CurrencyName' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string CurrencyName
        {
            get
            {
                return this._currencyName;
            }
            set
            {
                if ((this._currencyName != value))
                {
                    this.OnCurrencyNameChanging(value);
                    this.RaiseDataMemberChanging("CurrencyName");
                    this.ValidateProperty("CurrencyName", value);
                    this._currencyName = value;
                    this.RaiseDataMemberChanged("CurrencyName");
                    this.OnCurrencyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclaredQuantity' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string DeclaredQuantity
        {
            get
            {
                return this._declaredQuantity;
            }
            set
            {
                if ((this._declaredQuantity != value))
                {
                    this.OnDeclaredQuantityChanging(value);
                    this.RaiseDataMemberChanging("DeclaredQuantity");
                    this.ValidateProperty("DeclaredQuantity", value);
                    this._declaredQuantity = value;
                    this.RaiseDataMemberChanged("DeclaredQuantity");
                    this.OnDeclaredQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclaredUnitName' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string DeclaredUnitName
        {
            get
            {
                return this._declaredUnitName;
            }
            set
            {
                if ((this._declaredUnitName != value))
                {
                    this.OnDeclaredUnitNameChanging(value);
                    this.RaiseDataMemberChanging("DeclaredUnitName");
                    this.ValidateProperty("DeclaredUnitName", value);
                    this._declaredUnitName = value;
                    this.RaiseDataMemberChanged("DeclaredUnitName");
                    this.OnDeclaredUnitNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="DoubleCheckDeclaration"/> entity.
        /// </summary>
        [Association("DoubleCheckDeclaration_DoubleCheckDeclarationItem", "DoubleCheckDeclarationId", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public DoubleCheckDeclaration DoubleCheckDeclaration
        {
            get
            {
                if ((this._doubleCheckDeclaration == null))
                {
                    this._doubleCheckDeclaration = new EntityRef<DoubleCheckDeclaration>(this, "DoubleCheckDeclaration", this.FilterDoubleCheckDeclaration);
                }
                return this._doubleCheckDeclaration.Entity;
            }
            set
            {
                DoubleCheckDeclaration previous = this.DoubleCheckDeclaration;
                if ((previous != value))
                {
                    this.ValidateProperty("DoubleCheckDeclaration", value);
                    if ((previous != null))
                    {
                        this._doubleCheckDeclaration.Entity = null;
                        previous.DoubleCheckDeclarationItem.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DoubleCheckDeclarationId = value.ID;
                    }
                    else
                    {
                        this.DoubleCheckDeclarationId = default(int);
                    }
                    this._doubleCheckDeclaration.Entity = value;
                    if ((value != null))
                    {
                        value.DoubleCheckDeclarationItem.Add(this);
                    }
                    this.RaisePropertyChanged("DoubleCheckDeclaration");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DoubleCheckDeclarationId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DoubleCheckDeclarationId
        {
            get
            {
                return this._doubleCheckDeclarationId;
            }
            set
            {
                if ((this._doubleCheckDeclarationId != value))
                {
                    this.OnDoubleCheckDeclarationIdChanging(value);
                    this.RaiseDataMemberChanging("DoubleCheckDeclarationId");
                    this.ValidateProperty("DoubleCheckDeclarationId", value);
                    this._doubleCheckDeclarationId = value;
                    this.RaiseDataMemberChanged("DoubleCheckDeclarationId");
                    this.OnDoubleCheckDeclarationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FirstQuantity' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string FirstQuantity
        {
            get
            {
                return this._firstQuantity;
            }
            set
            {
                if ((this._firstQuantity != value))
                {
                    this.OnFirstQuantityChanging(value);
                    this.RaiseDataMemberChanging("FirstQuantity");
                    this.ValidateProperty("FirstQuantity", value);
                    this._firstQuantity = value;
                    this.RaiseDataMemberChanged("FirstQuantity");
                    this.OnFirstQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FirstUnitName' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string FirstUnitName
        {
            get
            {
                return this._firstUnitName;
            }
            set
            {
                if ((this._firstUnitName != value))
                {
                    this.OnFirstUnitNameChanging(value);
                    this.RaiseDataMemberChanging("FirstUnitName");
                    this.ValidateProperty("FirstUnitName", value);
                    this._firstUnitName = value;
                    this.RaiseDataMemberChanged("FirstUnitName");
                    this.OnFirstUnitNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HSCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string HSCode
        {
            get
            {
                return this._hsCode;
            }
            set
            {
                if ((this._hsCode != value))
                {
                    this.OnHSCodeChanging(value);
                    this.RaiseDataMemberChanging("HSCode");
                    this.ValidateProperty("HSCode", value);
                    this._hsCode = value;
                    this.RaiseDataMemberChanged("HSCode");
                    this.OnHSCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(128)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SecondQuantity' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string SecondQuantity
        {
            get
            {
                return this._secondQuantity;
            }
            set
            {
                if ((this._secondQuantity != value))
                {
                    this.OnSecondQuantityChanging(value);
                    this.RaiseDataMemberChanging("SecondQuantity");
                    this.ValidateProperty("SecondQuantity", value);
                    this._secondQuantity = value;
                    this.RaiseDataMemberChanged("SecondQuantity");
                    this.OnSecondQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SecondUnitName' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string SecondUnitName
        {
            get
            {
                return this._secondUnitName;
            }
            set
            {
                if ((this._secondUnitName != value))
                {
                    this.OnSecondUnitNameChanging(value);
                    this.RaiseDataMemberChanging("SecondUnitName");
                    this.ValidateProperty("SecondUnitName", value);
                    this._secondUnitName = value;
                    this.RaiseDataMemberChanged("SecondUnitName");
                    this.OnSecondUnitNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SortOrder' value.
        /// </summary>
        [DataMember()]
        public int SortOrder
        {
            get
            {
                return this._sortOrder;
            }
            set
            {
                if ((this._sortOrder != value))
                {
                    this.OnSortOrderChanging(value);
                    this.RaiseDataMemberChanging("SortOrder");
                    this.ValidateProperty("SortOrder", value);
                    this._sortOrder = value;
                    this.RaiseDataMemberChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalAmount' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string TotalAmount
        {
            get
            {
                return this._totalAmount;
            }
            set
            {
                if ((this._totalAmount != value))
                {
                    this.OnTotalAmountChanging(value);
                    this.RaiseDataMemberChanging("TotalAmount");
                    this.ValidateProperty("TotalAmount", value);
                    this._totalAmount = value;
                    this.RaiseDataMemberChanged("TotalAmount");
                    this.OnTotalAmountChanged();
                }
            }
        }
        
        private bool FilterDoubleCheckDeclaration(DoubleCheckDeclaration entity)
        {
            return (entity.ID == this.DoubleCheckDeclarationId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'DoubleCheckDeclarationVarifyResult' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class DoubleCheckDeclarationVarifyResult : Entity
    {
        
        private string _declarationNumber;
        
        private int _id;
        
        private bool _varifyFlag;
        
        private string _varifyMsg;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDeclarationNumberChanging(string value);
        partial void OnDeclarationNumberChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnVarifyFlagChanging(bool value);
        partial void OnVarifyFlagChanged();
        partial void OnVarifyMsgChanging(string value);
        partial void OnVarifyMsgChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DoubleCheckDeclarationVarifyResult"/> class.
        /// </summary>
        public DoubleCheckDeclarationVarifyResult()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationNumber' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string DeclarationNumber
        {
            get
            {
                return this._declarationNumber;
            }
            set
            {
                if ((this._declarationNumber != value))
                {
                    this.OnDeclarationNumberChanging(value);
                    this.RaiseDataMemberChanging("DeclarationNumber");
                    this.ValidateProperty("DeclarationNumber", value);
                    this._declarationNumber = value;
                    this.RaiseDataMemberChanged("DeclarationNumber");
                    this.OnDeclarationNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VarifyFlag' value.
        /// </summary>
        [DataMember()]
        public bool VarifyFlag
        {
            get
            {
                return this._varifyFlag;
            }
            set
            {
                if ((this._varifyFlag != value))
                {
                    this.OnVarifyFlagChanging(value);
                    this.RaiseDataMemberChanging("VarifyFlag");
                    this.ValidateProperty("VarifyFlag", value);
                    this._varifyFlag = value;
                    this.RaiseDataMemberChanged("VarifyFlag");
                    this.OnVarifyFlagChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VarifyMsg' value.
        /// </summary>
        [DataMember()]
        public string VarifyMsg
        {
            get
            {
                return this._varifyMsg;
            }
            set
            {
                if ((this._varifyMsg != value))
                {
                    this.OnVarifyMsgChanging(value);
                    this.RaiseDataMemberChanging("VarifyMsg");
                    this.ValidateProperty("VarifyMsg", value);
                    this._varifyMsg = value;
                    this.RaiseDataMemberChanged("VarifyMsg");
                    this.OnVarifyMsgChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Duty' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class Duty : Entity
    {
        
        private string _code;
        
        private string _name;
        
        private string _pinYin;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPinYinChanging(string value);
        partial void OnPinYinChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Duty"/> class.
        /// </summary>
        public Duty()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(16)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PinYin' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public string PinYin
        {
            get
            {
                return this._pinYin;
            }
            set
            {
                if ((this._pinYin != value))
                {
                    this.OnPinYinChanging(value);
                    this.RaiseDataMemberChanging("PinYin");
                    this.ValidateProperty("PinYin", value);
                    this._pinYin = value;
                    this.RaiseDataMemberChanged("PinYin");
                    this.OnPinYinChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'Examination' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class Examination : Entity
    {
        
        private Nullable<decimal> _amount;
        
        private string _approvedNumber;
        
        private EntityRef<Customer> _customer;
        
        private int _customerID;
        
        private string _declarationNumber;
        
        private Nullable<decimal> _examinationCost;
        
        private Nullable<decimal> _examinationFee;
        
        private string _examinationNumber;
        
        private string _examinationStatus;
        
        private string _goodsName;
        
        private int _id;
        
        private string _isRelated;
        
        private string _password;
        
        private Nullable<decimal> _quantity;
        
        private DateTime _receiveDate;
        
        private string _relatedSystemNumber;
        
        private string _remark;
        
        private string _transferNumber;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAmountChanging(Nullable<decimal> value);
        partial void OnAmountChanged();
        partial void OnApprovedNumberChanging(string value);
        partial void OnApprovedNumberChanged();
        partial void OnCustomerIDChanging(int value);
        partial void OnCustomerIDChanged();
        partial void OnDeclarationNumberChanging(string value);
        partial void OnDeclarationNumberChanged();
        partial void OnExaminationCostChanging(Nullable<decimal> value);
        partial void OnExaminationCostChanged();
        partial void OnExaminationFeeChanging(Nullable<decimal> value);
        partial void OnExaminationFeeChanged();
        partial void OnExaminationNumberChanging(string value);
        partial void OnExaminationNumberChanged();
        partial void OnExaminationStatusChanging(string value);
        partial void OnExaminationStatusChanged();
        partial void OnGoodsNameChanging(string value);
        partial void OnGoodsNameChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnIsRelatedChanging(string value);
        partial void OnIsRelatedChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnQuantityChanging(Nullable<decimal> value);
        partial void OnQuantityChanged();
        partial void OnReceiveDateChanging(DateTime value);
        partial void OnReceiveDateChanged();
        partial void OnRelatedSystemNumberChanging(string value);
        partial void OnRelatedSystemNumberChanged();
        partial void OnRemarkChanging(string value);
        partial void OnRemarkChanged();
        partial void OnTransferNumberChanging(string value);
        partial void OnTransferNumberChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Examination"/> class.
        /// </summary>
        public Examination()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Amount' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Amount
        {
            get
            {
                return this._amount;
            }
            set
            {
                if ((this._amount != value))
                {
                    this.OnAmountChanging(value);
                    this.RaiseDataMemberChanging("Amount");
                    this.ValidateProperty("Amount", value);
                    this._amount = value;
                    this.RaiseDataMemberChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ApprovedNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string ApprovedNumber
        {
            get
            {
                return this._approvedNumber;
            }
            set
            {
                if ((this._approvedNumber != value))
                {
                    this.OnApprovedNumberChanging(value);
                    this.RaiseDataMemberChanging("ApprovedNumber");
                    this.ValidateProperty("ApprovedNumber", value);
                    this._approvedNumber = value;
                    this.RaiseDataMemberChanged("ApprovedNumber");
                    this.OnApprovedNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Customer"/> entity.
        /// </summary>
        [Association("Customer_Examination", "CustomerID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public Customer Customer
        {
            get
            {
                if ((this._customer == null))
                {
                    this._customer = new EntityRef<Customer>(this, "Customer", this.FilterCustomer);
                }
                return this._customer.Entity;
            }
            set
            {
                Customer previous = this.Customer;
                if ((previous != value))
                {
                    this.ValidateProperty("Customer", value);
                    if ((previous != null))
                    {
                        this._customer.Entity = null;
                        previous.Examination.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CustomerID = value.ID;
                    }
                    else
                    {
                        this.CustomerID = default(int);
                    }
                    this._customer.Entity = value;
                    if ((value != null))
                    {
                        value.Examination.Add(this);
                    }
                    this.RaisePropertyChanged("Customer");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int CustomerID
        {
            get
            {
                return this._customerID;
            }
            set
            {
                if ((this._customerID != value))
                {
                    this.OnCustomerIDChanging(value);
                    this.RaiseDataMemberChanging("CustomerID");
                    this.ValidateProperty("CustomerID", value);
                    this._customerID = value;
                    this.RaiseDataMemberChanged("CustomerID");
                    this.OnCustomerIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string DeclarationNumber
        {
            get
            {
                return this._declarationNumber;
            }
            set
            {
                if ((this._declarationNumber != value))
                {
                    this.OnDeclarationNumberChanging(value);
                    this.RaiseDataMemberChanging("DeclarationNumber");
                    this.ValidateProperty("DeclarationNumber", value);
                    this._declarationNumber = value;
                    this.RaiseDataMemberChanged("DeclarationNumber");
                    this.OnDeclarationNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExaminationCost' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ExaminationCost
        {
            get
            {
                return this._examinationCost;
            }
            set
            {
                if ((this._examinationCost != value))
                {
                    this.OnExaminationCostChanging(value);
                    this.RaiseDataMemberChanging("ExaminationCost");
                    this.ValidateProperty("ExaminationCost", value);
                    this._examinationCost = value;
                    this.RaiseDataMemberChanged("ExaminationCost");
                    this.OnExaminationCostChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExaminationFee' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ExaminationFee
        {
            get
            {
                return this._examinationFee;
            }
            set
            {
                if ((this._examinationFee != value))
                {
                    this.OnExaminationFeeChanging(value);
                    this.RaiseDataMemberChanging("ExaminationFee");
                    this.ValidateProperty("ExaminationFee", value);
                    this._examinationFee = value;
                    this.RaiseDataMemberChanged("ExaminationFee");
                    this.OnExaminationFeeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExaminationNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string ExaminationNumber
        {
            get
            {
                return this._examinationNumber;
            }
            set
            {
                if ((this._examinationNumber != value))
                {
                    this.OnExaminationNumberChanging(value);
                    this.RaiseDataMemberChanging("ExaminationNumber");
                    this.ValidateProperty("ExaminationNumber", value);
                    this._examinationNumber = value;
                    this.RaiseDataMemberChanged("ExaminationNumber");
                    this.OnExaminationNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExaminationStatus' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(2)]
        public string ExaminationStatus
        {
            get
            {
                return this._examinationStatus;
            }
            set
            {
                if ((this._examinationStatus != value))
                {
                    this.OnExaminationStatusChanging(value);
                    this.RaiseDataMemberChanging("ExaminationStatus");
                    this.ValidateProperty("ExaminationStatus", value);
                    this._examinationStatus = value;
                    this.RaiseDataMemberChanged("ExaminationStatus");
                    this.OnExaminationStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GoodsName' value.
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string GoodsName
        {
            get
            {
                return this._goodsName;
            }
            set
            {
                if ((this._goodsName != value))
                {
                    this.OnGoodsNameChanging(value);
                    this.RaiseDataMemberChanging("GoodsName");
                    this.ValidateProperty("GoodsName", value);
                    this._goodsName = value;
                    this.RaiseDataMemberChanged("GoodsName");
                    this.OnGoodsNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsRelated' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string IsRelated
        {
            get
            {
                return this._isRelated;
            }
            set
            {
                if ((this._isRelated != value))
                {
                    this.OnIsRelatedChanging(value);
                    this.RaiseDataMemberChanging("IsRelated");
                    this.ValidateProperty("IsRelated", value);
                    this._isRelated = value;
                    this.RaiseDataMemberChanged("IsRelated");
                    this.OnIsRelatedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Password' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnPasswordChanging(value);
                    this.RaiseDataMemberChanging("Password");
                    this.ValidateProperty("Password", value);
                    this._password = value;
                    this.RaiseDataMemberChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Quantity' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                if ((this._quantity != value))
                {
                    this.OnQuantityChanging(value);
                    this.RaiseDataMemberChanging("Quantity");
                    this.ValidateProperty("Quantity", value);
                    this._quantity = value;
                    this.RaiseDataMemberChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReceiveDate' value.
        /// </summary>
        [DataMember()]
        public DateTime ReceiveDate
        {
            get
            {
                return this._receiveDate;
            }
            set
            {
                if ((this._receiveDate != value))
                {
                    this.OnReceiveDateChanging(value);
                    this.RaiseDataMemberChanging("ReceiveDate");
                    this.ValidateProperty("ReceiveDate", value);
                    this._receiveDate = value;
                    this.RaiseDataMemberChanged("ReceiveDate");
                    this.OnReceiveDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RelatedSystemNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string RelatedSystemNumber
        {
            get
            {
                return this._relatedSystemNumber;
            }
            set
            {
                if ((this._relatedSystemNumber != value))
                {
                    this.OnRelatedSystemNumberChanging(value);
                    this.RaiseDataMemberChanging("RelatedSystemNumber");
                    this.ValidateProperty("RelatedSystemNumber", value);
                    this._relatedSystemNumber = value;
                    this.RaiseDataMemberChanged("RelatedSystemNumber");
                    this.OnRelatedSystemNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Remark' value.
        /// </summary>
        [DataMember()]
        [StringLength(2000)]
        public string Remark
        {
            get
            {
                return this._remark;
            }
            set
            {
                if ((this._remark != value))
                {
                    this.OnRemarkChanging(value);
                    this.RaiseDataMemberChanging("Remark");
                    this.ValidateProperty("Remark", value);
                    this._remark = value;
                    this.RaiseDataMemberChanged("Remark");
                    this.OnRemarkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TransferNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string TransferNumber
        {
            get
            {
                return this._transferNumber;
            }
            set
            {
                if ((this._transferNumber != value))
                {
                    this.OnTransferNumberChanging(value);
                    this.RaiseDataMemberChanging("TransferNumber");
                    this.ValidateProperty("TransferNumber", value);
                    this._transferNumber = value;
                    this.RaiseDataMemberChanged("TransferNumber");
                    this.OnTransferNumberChanged();
                }
            }
        }
        
        private bool FilterCustomer(Customer entity)
        {
            return (entity.ID == this.CustomerID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'FeeMark' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class FeeMark : Entity
    {
        
        private string _code;
        
        private string _name;
        
        private string _pinYin;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPinYinChanging(string value);
        partial void OnPinYinChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FeeMark"/> class.
        /// </summary>
        public FeeMark()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(16)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PinYin' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public string PinYin
        {
            get
            {
                return this._pinYin;
            }
            set
            {
                if ((this._pinYin != value))
                {
                    this.OnPinYinChanging(value);
                    this.RaiseDataMemberChanging("PinYin");
                    this.ValidateProperty("PinYin", value);
                    this._pinYin = value;
                    this.RaiseDataMemberChanged("PinYin");
                    this.OnPinYinChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'FeeType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class FeeType : Entity
    {
        
        private Nullable<decimal> _amount;
        
        private string _code;
        
        private Nullable<decimal> _cost;
        
        private EntityCollection<CustomerFeeSetting> _customerFeeSetting;
        
        private EntityCollection<FinancialExportDeclaration> _financialExportDeclaration;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAmountChanging(Nullable<decimal> value);
        partial void OnAmountChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnCostChanging(Nullable<decimal> value);
        partial void OnCostChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FeeType"/> class.
        /// </summary>
        public FeeType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Amount' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Amount
        {
            get
            {
                return this._amount;
            }
            set
            {
                if ((this._amount != value))
                {
                    this.OnAmountChanging(value);
                    this.RaiseDataMemberChanging("Amount");
                    this.ValidateProperty("Amount", value);
                    this._amount = value;
                    this.RaiseDataMemberChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(10)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Cost' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Cost
        {
            get
            {
                return this._cost;
            }
            set
            {
                if ((this._cost != value))
                {
                    this.OnCostChanging(value);
                    this.RaiseDataMemberChanging("Cost");
                    this.ValidateProperty("Cost", value);
                    this._cost = value;
                    this.RaiseDataMemberChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CustomerFeeSetting"/> entity instances.
        /// </summary>
        [Association("FeeType_CustomerFeeSetting", "Code", "FeeTypeCode")]
        [XmlIgnore()]
        public EntityCollection<CustomerFeeSetting> CustomerFeeSetting
        {
            get
            {
                if ((this._customerFeeSetting == null))
                {
                    this._customerFeeSetting = new EntityCollection<CustomerFeeSetting>(this, "CustomerFeeSetting", this.FilterCustomerFeeSetting, this.AttachCustomerFeeSetting, this.DetachCustomerFeeSetting);
                }
                return this._customerFeeSetting;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="FinancialExportDeclaration"/> entity instances.
        /// </summary>
        [Association("FeeType_FinancialExportDeclaration", "Code", "FeeTypeCode")]
        [XmlIgnore()]
        public EntityCollection<FinancialExportDeclaration> FinancialExportDeclaration
        {
            get
            {
                if ((this._financialExportDeclaration == null))
                {
                    this._financialExportDeclaration = new EntityCollection<FinancialExportDeclaration>(this, "FinancialExportDeclaration", this.FilterFinancialExportDeclaration, this.AttachFinancialExportDeclaration, this.DetachFinancialExportDeclaration);
                }
                return this._financialExportDeclaration;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        private void AttachCustomerFeeSetting(CustomerFeeSetting entity)
        {
            entity.FeeType = this;
        }
        
        private void DetachCustomerFeeSetting(CustomerFeeSetting entity)
        {
            entity.FeeType = null;
        }
        
        private bool FilterCustomerFeeSetting(CustomerFeeSetting entity)
        {
            return (entity.FeeTypeCode == this.Code);
        }
        
        private void AttachFinancialExportDeclaration(FinancialExportDeclaration entity)
        {
            entity.FeeType = this;
        }
        
        private void DetachFinancialExportDeclaration(FinancialExportDeclaration entity)
        {
            entity.FeeType = null;
        }
        
        private bool FilterFinancialExportDeclaration(FinancialExportDeclaration entity)
        {
            return (entity.FeeTypeCode == this.Code);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'FinancialExportDeclaration' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class FinancialExportDeclaration : Entity
    {
        
        private decimal _amount;
        
        private decimal _cost;
        
        private DateTime _createdDate;
        
        private EntityRef<Declaration> _declaration;
        
        private int _declarationId;
        
        private EntityRef<FeeType> _feeType;
        
        private string _feeTypeCode;
        
        private string _financialRemark;
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAmountChanging(decimal value);
        partial void OnAmountChanged();
        partial void OnCostChanging(decimal value);
        partial void OnCostChanged();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnDeclarationIdChanging(int value);
        partial void OnDeclarationIdChanged();
        partial void OnFeeTypeCodeChanging(string value);
        partial void OnFeeTypeCodeChanged();
        partial void OnFinancialRemarkChanging(string value);
        partial void OnFinancialRemarkChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialExportDeclaration"/> class.
        /// </summary>
        public FinancialExportDeclaration()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Amount' value.
        /// </summary>
        [DataMember()]
        public decimal Amount
        {
            get
            {
                return this._amount;
            }
            set
            {
                if ((this._amount != value))
                {
                    this.OnAmountChanging(value);
                    this.RaiseDataMemberChanging("Amount");
                    this.ValidateProperty("Amount", value);
                    this._amount = value;
                    this.RaiseDataMemberChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Cost' value.
        /// </summary>
        [DataMember()]
        public decimal Cost
        {
            get
            {
                return this._cost;
            }
            set
            {
                if ((this._cost != value))
                {
                    this.OnCostChanging(value);
                    this.RaiseDataMemberChanging("Cost");
                    this.ValidateProperty("Cost", value);
                    this._cost = value;
                    this.RaiseDataMemberChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreatedDate' value.
        /// </summary>
        [DataMember()]
        public DateTime CreatedDate
        {
            get
            {
                return this._createdDate;
            }
            set
            {
                if ((this._createdDate != value))
                {
                    this.OnCreatedDateChanging(value);
                    this.RaiseDataMemberChanging("CreatedDate");
                    this.ValidateProperty("CreatedDate", value);
                    this._createdDate = value;
                    this.RaiseDataMemberChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Declaration"/> entity.
        /// </summary>
        [Association("Declaration_FinancialExportDeclaration", "DeclarationId", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public Declaration Declaration
        {
            get
            {
                if ((this._declaration == null))
                {
                    this._declaration = new EntityRef<Declaration>(this, "Declaration", this.FilterDeclaration);
                }
                return this._declaration.Entity;
            }
            set
            {
                Declaration previous = this.Declaration;
                if ((previous != value))
                {
                    this.ValidateProperty("Declaration", value);
                    if ((previous != null))
                    {
                        this._declaration.Entity = null;
                        previous.FinancialExportDeclaration.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DeclarationId = value.ID;
                    }
                    else
                    {
                        this.DeclarationId = default(int);
                    }
                    this._declaration.Entity = value;
                    if ((value != null))
                    {
                        value.FinancialExportDeclaration.Add(this);
                    }
                    this.RaisePropertyChanged("Declaration");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DeclarationId
        {
            get
            {
                return this._declarationId;
            }
            set
            {
                if ((this._declarationId != value))
                {
                    this.OnDeclarationIdChanging(value);
                    this.RaiseDataMemberChanging("DeclarationId");
                    this.ValidateProperty("DeclarationId", value);
                    this._declarationId = value;
                    this.RaiseDataMemberChanged("DeclarationId");
                    this.OnDeclarationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="FeeType"/> entity.
        /// </summary>
        [Association("FeeType_FinancialExportDeclaration", "FeeTypeCode", "Code", IsForeignKey=true)]
        [XmlIgnore()]
        public FeeType FeeType
        {
            get
            {
                if ((this._feeType == null))
                {
                    this._feeType = new EntityRef<FeeType>(this, "FeeType", this.FilterFeeType);
                }
                return this._feeType.Entity;
            }
            set
            {
                FeeType previous = this.FeeType;
                if ((previous != value))
                {
                    this.ValidateProperty("FeeType", value);
                    if ((previous != null))
                    {
                        this._feeType.Entity = null;
                        previous.FinancialExportDeclaration.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.FeeTypeCode = value.Code;
                    }
                    else
                    {
                        this.FeeTypeCode = default(string);
                    }
                    this._feeType.Entity = value;
                    if ((value != null))
                    {
                        value.FinancialExportDeclaration.Add(this);
                    }
                    this.RaisePropertyChanged("FeeType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FeeTypeCode' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(10)]
        public string FeeTypeCode
        {
            get
            {
                return this._feeTypeCode;
            }
            set
            {
                if ((this._feeTypeCode != value))
                {
                    this.OnFeeTypeCodeChanging(value);
                    this.RaiseDataMemberChanging("FeeTypeCode");
                    this.ValidateProperty("FeeTypeCode", value);
                    this._feeTypeCode = value;
                    this.RaiseDataMemberChanged("FeeTypeCode");
                    this.OnFeeTypeCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FinancialRemark' value.
        /// </summary>
        [DataMember()]
        [StringLength(256)]
        public string FinancialRemark
        {
            get
            {
                return this._financialRemark;
            }
            set
            {
                if ((this._financialRemark != value))
                {
                    this.OnFinancialRemarkChanging(value);
                    this.RaiseDataMemberChanging("FinancialRemark");
                    this.ValidateProperty("FinancialRemark", value);
                    this._financialRemark = value;
                    this.RaiseDataMemberChanged("FinancialRemark");
                    this.OnFinancialRemarkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        private bool FilterDeclaration(Declaration entity)
        {
            return (entity.ID == this.DeclarationId);
        }
        
        private bool FilterFeeType(FeeType entity)
        {
            return (entity.Code == this.FeeTypeCode);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'GetAllDeclarationByReceiveDateResult' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class GetAllDeclarationByReceiveDateResult : Entity
    {
        
        private string _admissionStatus;
        
        private string _agentCode;
        
        private string _agentName;
        
        private string _approvalNumber;
        
        private string _billNumber;
        
        private string _containerQuantity;
        
        private string _controlNumber;
        
        private string _conveyance;
        
        private Nullable<DateTime> _createdDate;
        
        private string _customerName;
        
        private Nullable<DateTime> _declarationDate;
        
        private string _declarationNumber;
        
        private string _declarationStatus;
        
        private string _declarationStatusRemark;
        
        private string _dock;
        
        private Nullable<DateTime> _drawbackDate;
        
        private string _drawbackStatus;
        
        private string _drawbackStatusRemark;
        
        private string _examinationNumber;
        
        private string _financialRemark;
        
        private Nullable<decimal> _grossWeight;
        
        private int _id;
        
        private Nullable<DateTime> _ieDate;
        
        private int _isExamination;
        
        private string _ladingStatus;
        
        private string _licenseNumber;
        
        private string _manualNumber;
        
        private Nullable<decimal> _netWeight;
        
        private string _note;
        
        private string _onBoardingStatus;
        
        private string _ownerCode;
        
        private string _ownerName;
        
        private Nullable<int> _packageAmount;
        
        private string _preEntryNumber;
        
        private string _prerecordWarehouseWarrant;
        
        private string _productNumber;
        
        private Nullable<DateTime> _receivedDate;
        
        private string _relatedDeclarationNumber;
        
        private string _relatedManualNumber;
        
        private string _relatedSystemNumber;
        
        private string _remark;
        
        private Nullable<DateTime> _shipLeaveDate;
        
        private int _totalItems;
        
        private string _tradeName;
        
        private string _traderCode;
        
        private string _traderName;
        
        private string _verificationStatus;
        
        private string _verificationStatusDetail;
        
        private string _voyageNumber;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAdmissionStatusChanging(string value);
        partial void OnAdmissionStatusChanged();
        partial void OnAgentCodeChanging(string value);
        partial void OnAgentCodeChanged();
        partial void OnAgentNameChanging(string value);
        partial void OnAgentNameChanged();
        partial void OnApprovalNumberChanging(string value);
        partial void OnApprovalNumberChanged();
        partial void OnBillNumberChanging(string value);
        partial void OnBillNumberChanged();
        partial void OnContainerQuantityChanging(string value);
        partial void OnContainerQuantityChanged();
        partial void OnControlNumberChanging(string value);
        partial void OnControlNumberChanged();
        partial void OnConveyanceChanging(string value);
        partial void OnConveyanceChanged();
        partial void OnCreatedDateChanging(Nullable<DateTime> value);
        partial void OnCreatedDateChanged();
        partial void OnCustomerNameChanging(string value);
        partial void OnCustomerNameChanged();
        partial void OnDeclarationDateChanging(Nullable<DateTime> value);
        partial void OnDeclarationDateChanged();
        partial void OnDeclarationNumberChanging(string value);
        partial void OnDeclarationNumberChanged();
        partial void OnDeclarationStatusChanging(string value);
        partial void OnDeclarationStatusChanged();
        partial void OnDeclarationStatusRemarkChanging(string value);
        partial void OnDeclarationStatusRemarkChanged();
        partial void OnDockChanging(string value);
        partial void OnDockChanged();
        partial void OnDrawbackDateChanging(Nullable<DateTime> value);
        partial void OnDrawbackDateChanged();
        partial void OnDrawbackStatusChanging(string value);
        partial void OnDrawbackStatusChanged();
        partial void OnDrawbackStatusRemarkChanging(string value);
        partial void OnDrawbackStatusRemarkChanged();
        partial void OnExaminationNumberChanging(string value);
        partial void OnExaminationNumberChanged();
        partial void OnFinancialRemarkChanging(string value);
        partial void OnFinancialRemarkChanged();
        partial void OnGrossWeightChanging(Nullable<decimal> value);
        partial void OnGrossWeightChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnIEDateChanging(Nullable<DateTime> value);
        partial void OnIEDateChanged();
        partial void OnIsExaminationChanging(int value);
        partial void OnIsExaminationChanged();
        partial void OnLadingStatusChanging(string value);
        partial void OnLadingStatusChanged();
        partial void OnLicenseNumberChanging(string value);
        partial void OnLicenseNumberChanged();
        partial void OnManualNumberChanging(string value);
        partial void OnManualNumberChanged();
        partial void OnNetWeightChanging(Nullable<decimal> value);
        partial void OnNetWeightChanged();
        partial void OnNoteChanging(string value);
        partial void OnNoteChanged();
        partial void OnOnBoardingStatusChanging(string value);
        partial void OnOnBoardingStatusChanged();
        partial void OnOwnerCodeChanging(string value);
        partial void OnOwnerCodeChanged();
        partial void OnOwnerNameChanging(string value);
        partial void OnOwnerNameChanged();
        partial void OnPackageAmountChanging(Nullable<int> value);
        partial void OnPackageAmountChanged();
        partial void OnPreEntryNumberChanging(string value);
        partial void OnPreEntryNumberChanged();
        partial void OnPrerecordWarehouseWarrantChanging(string value);
        partial void OnPrerecordWarehouseWarrantChanged();
        partial void OnProductNumberChanging(string value);
        partial void OnProductNumberChanged();
        partial void OnReceivedDateChanging(Nullable<DateTime> value);
        partial void OnReceivedDateChanged();
        partial void OnRelatedDeclarationNumberChanging(string value);
        partial void OnRelatedDeclarationNumberChanged();
        partial void OnRelatedManualNumberChanging(string value);
        partial void OnRelatedManualNumberChanged();
        partial void OnRelatedSystemNumberChanging(string value);
        partial void OnRelatedSystemNumberChanged();
        partial void OnRemarkChanging(string value);
        partial void OnRemarkChanged();
        partial void OnShipLeaveDateChanging(Nullable<DateTime> value);
        partial void OnShipLeaveDateChanged();
        partial void OnTotalItemsChanging(int value);
        partial void OnTotalItemsChanged();
        partial void OnTradeNameChanging(string value);
        partial void OnTradeNameChanged();
        partial void OnTraderCodeChanging(string value);
        partial void OnTraderCodeChanged();
        partial void OnTraderNameChanging(string value);
        partial void OnTraderNameChanged();
        partial void OnVerificationStatusChanging(string value);
        partial void OnVerificationStatusChanged();
        partial void OnVerificationStatusDetailChanging(string value);
        partial void OnVerificationStatusDetailChanged();
        partial void OnVoyageNumberChanging(string value);
        partial void OnVoyageNumberChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAllDeclarationByReceiveDateResult"/> class.
        /// </summary>
        public GetAllDeclarationByReceiveDateResult()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AdmissionStatus' value.
        /// </summary>
        [DataMember()]
        [StringLength(64)]
        public string AdmissionStatus
        {
            get
            {
                return this._admissionStatus;
            }
            set
            {
                if ((this._admissionStatus != value))
                {
                    this.OnAdmissionStatusChanging(value);
                    this.RaiseDataMemberChanging("AdmissionStatus");
                    this.ValidateProperty("AdmissionStatus", value);
                    this._admissionStatus = value;
                    this.RaiseDataMemberChanged("AdmissionStatus");
                    this.OnAdmissionStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AgentCode' value.
        /// </summary>
        [DataMember()]
        public string AgentCode
        {
            get
            {
                return this._agentCode;
            }
            set
            {
                if ((this._agentCode != value))
                {
                    this.OnAgentCodeChanging(value);
                    this.RaiseDataMemberChanging("AgentCode");
                    this.ValidateProperty("AgentCode", value);
                    this._agentCode = value;
                    this.RaiseDataMemberChanged("AgentCode");
                    this.OnAgentCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AgentName' value.
        /// </summary>
        [DataMember()]
        public string AgentName
        {
            get
            {
                return this._agentName;
            }
            set
            {
                if ((this._agentName != value))
                {
                    this.OnAgentNameChanging(value);
                    this.RaiseDataMemberChanging("AgentName");
                    this.ValidateProperty("AgentName", value);
                    this._agentName = value;
                    this.RaiseDataMemberChanged("AgentName");
                    this.OnAgentNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ApprovalNumber' value.
        /// </summary>
        [DataMember()]
        public string ApprovalNumber
        {
            get
            {
                return this._approvalNumber;
            }
            set
            {
                if ((this._approvalNumber != value))
                {
                    this.OnApprovalNumberChanging(value);
                    this.RaiseDataMemberChanging("ApprovalNumber");
                    this.ValidateProperty("ApprovalNumber", value);
                    this._approvalNumber = value;
                    this.RaiseDataMemberChanged("ApprovalNumber");
                    this.OnApprovalNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BillNumber' value.
        /// </summary>
        [DataMember()]
        public string BillNumber
        {
            get
            {
                return this._billNumber;
            }
            set
            {
                if ((this._billNumber != value))
                {
                    this.OnBillNumberChanging(value);
                    this.RaiseDataMemberChanging("BillNumber");
                    this.ValidateProperty("BillNumber", value);
                    this._billNumber = value;
                    this.RaiseDataMemberChanged("BillNumber");
                    this.OnBillNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContainerQuantity' value.
        /// </summary>
        [DataMember()]
        public string ContainerQuantity
        {
            get
            {
                return this._containerQuantity;
            }
            set
            {
                if ((this._containerQuantity != value))
                {
                    this.OnContainerQuantityChanging(value);
                    this.RaiseDataMemberChanging("ContainerQuantity");
                    this.ValidateProperty("ContainerQuantity", value);
                    this._containerQuantity = value;
                    this.RaiseDataMemberChanged("ContainerQuantity");
                    this.OnContainerQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ControlNumber' value.
        /// </summary>
        [DataMember()]
        public string ControlNumber
        {
            get
            {
                return this._controlNumber;
            }
            set
            {
                if ((this._controlNumber != value))
                {
                    this.OnControlNumberChanging(value);
                    this.RaiseDataMemberChanging("ControlNumber");
                    this.ValidateProperty("ControlNumber", value);
                    this._controlNumber = value;
                    this.RaiseDataMemberChanged("ControlNumber");
                    this.OnControlNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Conveyance' value.
        /// </summary>
        [DataMember()]
        public string Conveyance
        {
            get
            {
                return this._conveyance;
            }
            set
            {
                if ((this._conveyance != value))
                {
                    this.OnConveyanceChanging(value);
                    this.RaiseDataMemberChanging("Conveyance");
                    this.ValidateProperty("Conveyance", value);
                    this._conveyance = value;
                    this.RaiseDataMemberChanged("Conveyance");
                    this.OnConveyanceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreatedDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CreatedDate
        {
            get
            {
                return this._createdDate;
            }
            set
            {
                if ((this._createdDate != value))
                {
                    this.OnCreatedDateChanging(value);
                    this.RaiseDataMemberChanging("CreatedDate");
                    this.ValidateProperty("CreatedDate", value);
                    this._createdDate = value;
                    this.RaiseDataMemberChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerName' value.
        /// </summary>
        [DataMember()]
        public string CustomerName
        {
            get
            {
                return this._customerName;
            }
            set
            {
                if ((this._customerName != value))
                {
                    this.OnCustomerNameChanging(value);
                    this.RaiseDataMemberChanging("CustomerName");
                    this.ValidateProperty("CustomerName", value);
                    this._customerName = value;
                    this.RaiseDataMemberChanged("CustomerName");
                    this.OnCustomerNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeclarationDate
        {
            get
            {
                return this._declarationDate;
            }
            set
            {
                if ((this._declarationDate != value))
                {
                    this.OnDeclarationDateChanging(value);
                    this.RaiseDataMemberChanging("DeclarationDate");
                    this.ValidateProperty("DeclarationDate", value);
                    this._declarationDate = value;
                    this.RaiseDataMemberChanged("DeclarationDate");
                    this.OnDeclarationDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationNumber' value.
        /// </summary>
        [DataMember()]
        public string DeclarationNumber
        {
            get
            {
                return this._declarationNumber;
            }
            set
            {
                if ((this._declarationNumber != value))
                {
                    this.OnDeclarationNumberChanging(value);
                    this.RaiseDataMemberChanging("DeclarationNumber");
                    this.ValidateProperty("DeclarationNumber", value);
                    this._declarationNumber = value;
                    this.RaiseDataMemberChanged("DeclarationNumber");
                    this.OnDeclarationNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationStatus' value.
        /// </summary>
        [DataMember()]
        public string DeclarationStatus
        {
            get
            {
                return this._declarationStatus;
            }
            set
            {
                if ((this._declarationStatus != value))
                {
                    this.OnDeclarationStatusChanging(value);
                    this.RaiseDataMemberChanging("DeclarationStatus");
                    this.ValidateProperty("DeclarationStatus", value);
                    this._declarationStatus = value;
                    this.RaiseDataMemberChanged("DeclarationStatus");
                    this.OnDeclarationStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationStatusRemark' value.
        /// </summary>
        [DataMember()]
        public string DeclarationStatusRemark
        {
            get
            {
                return this._declarationStatusRemark;
            }
            set
            {
                if ((this._declarationStatusRemark != value))
                {
                    this.OnDeclarationStatusRemarkChanging(value);
                    this.RaiseDataMemberChanging("DeclarationStatusRemark");
                    this.ValidateProperty("DeclarationStatusRemark", value);
                    this._declarationStatusRemark = value;
                    this.RaiseDataMemberChanged("DeclarationStatusRemark");
                    this.OnDeclarationStatusRemarkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Dock' value.
        /// </summary>
        [DataMember()]
        public string Dock
        {
            get
            {
                return this._dock;
            }
            set
            {
                if ((this._dock != value))
                {
                    this.OnDockChanging(value);
                    this.RaiseDataMemberChanging("Dock");
                    this.ValidateProperty("Dock", value);
                    this._dock = value;
                    this.RaiseDataMemberChanged("Dock");
                    this.OnDockChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DrawbackDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DrawbackDate
        {
            get
            {
                return this._drawbackDate;
            }
            set
            {
                if ((this._drawbackDate != value))
                {
                    this.OnDrawbackDateChanging(value);
                    this.RaiseDataMemberChanging("DrawbackDate");
                    this.ValidateProperty("DrawbackDate", value);
                    this._drawbackDate = value;
                    this.RaiseDataMemberChanged("DrawbackDate");
                    this.OnDrawbackDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DrawbackStatus' value.
        /// </summary>
        [DataMember()]
        public string DrawbackStatus
        {
            get
            {
                return this._drawbackStatus;
            }
            set
            {
                if ((this._drawbackStatus != value))
                {
                    this.OnDrawbackStatusChanging(value);
                    this.RaiseDataMemberChanging("DrawbackStatus");
                    this.ValidateProperty("DrawbackStatus", value);
                    this._drawbackStatus = value;
                    this.RaiseDataMemberChanged("DrawbackStatus");
                    this.OnDrawbackStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DrawbackStatusRemark' value.
        /// </summary>
        [DataMember()]
        public string DrawbackStatusRemark
        {
            get
            {
                return this._drawbackStatusRemark;
            }
            set
            {
                if ((this._drawbackStatusRemark != value))
                {
                    this.OnDrawbackStatusRemarkChanging(value);
                    this.RaiseDataMemberChanging("DrawbackStatusRemark");
                    this.ValidateProperty("DrawbackStatusRemark", value);
                    this._drawbackStatusRemark = value;
                    this.RaiseDataMemberChanged("DrawbackStatusRemark");
                    this.OnDrawbackStatusRemarkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExaminationNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string ExaminationNumber
        {
            get
            {
                return this._examinationNumber;
            }
            set
            {
                if ((this._examinationNumber != value))
                {
                    this.OnExaminationNumberChanging(value);
                    this.RaiseDataMemberChanging("ExaminationNumber");
                    this.ValidateProperty("ExaminationNumber", value);
                    this._examinationNumber = value;
                    this.RaiseDataMemberChanged("ExaminationNumber");
                    this.OnExaminationNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FinancialRemark' value.
        /// </summary>
        [DataMember()]
        public string FinancialRemark
        {
            get
            {
                return this._financialRemark;
            }
            set
            {
                if ((this._financialRemark != value))
                {
                    this.OnFinancialRemarkChanging(value);
                    this.RaiseDataMemberChanging("FinancialRemark");
                    this.ValidateProperty("FinancialRemark", value);
                    this._financialRemark = value;
                    this.RaiseDataMemberChanged("FinancialRemark");
                    this.OnFinancialRemarkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GrossWeight' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> GrossWeight
        {
            get
            {
                return this._grossWeight;
            }
            set
            {
                if ((this._grossWeight != value))
                {
                    this.OnGrossWeightChanging(value);
                    this.RaiseDataMemberChanging("GrossWeight");
                    this.ValidateProperty("GrossWeight", value);
                    this._grossWeight = value;
                    this.RaiseDataMemberChanged("GrossWeight");
                    this.OnGrossWeightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IEDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> IEDate
        {
            get
            {
                return this._ieDate;
            }
            set
            {
                if ((this._ieDate != value))
                {
                    this.OnIEDateChanging(value);
                    this.RaiseDataMemberChanging("IEDate");
                    this.ValidateProperty("IEDate", value);
                    this._ieDate = value;
                    this.RaiseDataMemberChanged("IEDate");
                    this.OnIEDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsExamination' value.
        /// </summary>
        [DataMember()]
        public int IsExamination
        {
            get
            {
                return this._isExamination;
            }
            set
            {
                if ((this._isExamination != value))
                {
                    this.OnIsExaminationChanging(value);
                    this.RaiseDataMemberChanging("IsExamination");
                    this.ValidateProperty("IsExamination", value);
                    this._isExamination = value;
                    this.RaiseDataMemberChanged("IsExamination");
                    this.OnIsExaminationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LadingStatus' value.
        /// </summary>
        [DataMember()]
        [StringLength(64)]
        public string LadingStatus
        {
            get
            {
                return this._ladingStatus;
            }
            set
            {
                if ((this._ladingStatus != value))
                {
                    this.OnLadingStatusChanging(value);
                    this.RaiseDataMemberChanging("LadingStatus");
                    this.ValidateProperty("LadingStatus", value);
                    this._ladingStatus = value;
                    this.RaiseDataMemberChanged("LadingStatus");
                    this.OnLadingStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LicenseNumber' value.
        /// </summary>
        [DataMember()]
        public string LicenseNumber
        {
            get
            {
                return this._licenseNumber;
            }
            set
            {
                if ((this._licenseNumber != value))
                {
                    this.OnLicenseNumberChanging(value);
                    this.RaiseDataMemberChanging("LicenseNumber");
                    this.ValidateProperty("LicenseNumber", value);
                    this._licenseNumber = value;
                    this.RaiseDataMemberChanged("LicenseNumber");
                    this.OnLicenseNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ManualNumber' value.
        /// </summary>
        [DataMember()]
        public string ManualNumber
        {
            get
            {
                return this._manualNumber;
            }
            set
            {
                if ((this._manualNumber != value))
                {
                    this.OnManualNumberChanging(value);
                    this.RaiseDataMemberChanging("ManualNumber");
                    this.ValidateProperty("ManualNumber", value);
                    this._manualNumber = value;
                    this.RaiseDataMemberChanged("ManualNumber");
                    this.OnManualNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NetWeight' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> NetWeight
        {
            get
            {
                return this._netWeight;
            }
            set
            {
                if ((this._netWeight != value))
                {
                    this.OnNetWeightChanging(value);
                    this.RaiseDataMemberChanging("NetWeight");
                    this.ValidateProperty("NetWeight", value);
                    this._netWeight = value;
                    this.RaiseDataMemberChanged("NetWeight");
                    this.OnNetWeightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Note' value.
        /// </summary>
        [DataMember()]
        public string Note
        {
            get
            {
                return this._note;
            }
            set
            {
                if ((this._note != value))
                {
                    this.OnNoteChanging(value);
                    this.RaiseDataMemberChanging("Note");
                    this.ValidateProperty("Note", value);
                    this._note = value;
                    this.RaiseDataMemberChanged("Note");
                    this.OnNoteChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OnBoardingStatus' value.
        /// </summary>
        [DataMember()]
        [StringLength(64)]
        public string OnBoardingStatus
        {
            get
            {
                return this._onBoardingStatus;
            }
            set
            {
                if ((this._onBoardingStatus != value))
                {
                    this.OnOnBoardingStatusChanging(value);
                    this.RaiseDataMemberChanging("OnBoardingStatus");
                    this.ValidateProperty("OnBoardingStatus", value);
                    this._onBoardingStatus = value;
                    this.RaiseDataMemberChanged("OnBoardingStatus");
                    this.OnOnBoardingStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OwnerCode' value.
        /// </summary>
        [DataMember()]
        public string OwnerCode
        {
            get
            {
                return this._ownerCode;
            }
            set
            {
                if ((this._ownerCode != value))
                {
                    this.OnOwnerCodeChanging(value);
                    this.RaiseDataMemberChanging("OwnerCode");
                    this.ValidateProperty("OwnerCode", value);
                    this._ownerCode = value;
                    this.RaiseDataMemberChanged("OwnerCode");
                    this.OnOwnerCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OwnerName' value.
        /// </summary>
        [DataMember()]
        public string OwnerName
        {
            get
            {
                return this._ownerName;
            }
            set
            {
                if ((this._ownerName != value))
                {
                    this.OnOwnerNameChanging(value);
                    this.RaiseDataMemberChanging("OwnerName");
                    this.ValidateProperty("OwnerName", value);
                    this._ownerName = value;
                    this.RaiseDataMemberChanged("OwnerName");
                    this.OnOwnerNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PackageAmount' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> PackageAmount
        {
            get
            {
                return this._packageAmount;
            }
            set
            {
                if ((this._packageAmount != value))
                {
                    this.OnPackageAmountChanging(value);
                    this.RaiseDataMemberChanging("PackageAmount");
                    this.ValidateProperty("PackageAmount", value);
                    this._packageAmount = value;
                    this.RaiseDataMemberChanged("PackageAmount");
                    this.OnPackageAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PreEntryNumber' value.
        /// </summary>
        [DataMember()]
        public string PreEntryNumber
        {
            get
            {
                return this._preEntryNumber;
            }
            set
            {
                if ((this._preEntryNumber != value))
                {
                    this.OnPreEntryNumberChanging(value);
                    this.RaiseDataMemberChanging("PreEntryNumber");
                    this.ValidateProperty("PreEntryNumber", value);
                    this._preEntryNumber = value;
                    this.RaiseDataMemberChanged("PreEntryNumber");
                    this.OnPreEntryNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PrerecordWarehouseWarrant' value.
        /// </summary>
        [DataMember()]
        public string PrerecordWarehouseWarrant
        {
            get
            {
                return this._prerecordWarehouseWarrant;
            }
            set
            {
                if ((this._prerecordWarehouseWarrant != value))
                {
                    this.OnPrerecordWarehouseWarrantChanging(value);
                    this.RaiseDataMemberChanging("PrerecordWarehouseWarrant");
                    this.ValidateProperty("PrerecordWarehouseWarrant", value);
                    this._prerecordWarehouseWarrant = value;
                    this.RaiseDataMemberChanged("PrerecordWarehouseWarrant");
                    this.OnPrerecordWarehouseWarrantChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductNumber' value.
        /// </summary>
        [DataMember()]
        public string ProductNumber
        {
            get
            {
                return this._productNumber;
            }
            set
            {
                if ((this._productNumber != value))
                {
                    this.OnProductNumberChanging(value);
                    this.RaiseDataMemberChanging("ProductNumber");
                    this.ValidateProperty("ProductNumber", value);
                    this._productNumber = value;
                    this.RaiseDataMemberChanged("ProductNumber");
                    this.OnProductNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReceivedDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ReceivedDate
        {
            get
            {
                return this._receivedDate;
            }
            set
            {
                if ((this._receivedDate != value))
                {
                    this.OnReceivedDateChanging(value);
                    this.RaiseDataMemberChanging("ReceivedDate");
                    this.ValidateProperty("ReceivedDate", value);
                    this._receivedDate = value;
                    this.RaiseDataMemberChanged("ReceivedDate");
                    this.OnReceivedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RelatedDeclarationNumber' value.
        /// </summary>
        [DataMember()]
        public string RelatedDeclarationNumber
        {
            get
            {
                return this._relatedDeclarationNumber;
            }
            set
            {
                if ((this._relatedDeclarationNumber != value))
                {
                    this.OnRelatedDeclarationNumberChanging(value);
                    this.RaiseDataMemberChanging("RelatedDeclarationNumber");
                    this.ValidateProperty("RelatedDeclarationNumber", value);
                    this._relatedDeclarationNumber = value;
                    this.RaiseDataMemberChanged("RelatedDeclarationNumber");
                    this.OnRelatedDeclarationNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RelatedManualNumber' value.
        /// </summary>
        [DataMember()]
        public string RelatedManualNumber
        {
            get
            {
                return this._relatedManualNumber;
            }
            set
            {
                if ((this._relatedManualNumber != value))
                {
                    this.OnRelatedManualNumberChanging(value);
                    this.RaiseDataMemberChanging("RelatedManualNumber");
                    this.ValidateProperty("RelatedManualNumber", value);
                    this._relatedManualNumber = value;
                    this.RaiseDataMemberChanged("RelatedManualNumber");
                    this.OnRelatedManualNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RelatedSystemNumber' value.
        /// </summary>
        [DataMember()]
        public string RelatedSystemNumber
        {
            get
            {
                return this._relatedSystemNumber;
            }
            set
            {
                if ((this._relatedSystemNumber != value))
                {
                    this.OnRelatedSystemNumberChanging(value);
                    this.RaiseDataMemberChanging("RelatedSystemNumber");
                    this.ValidateProperty("RelatedSystemNumber", value);
                    this._relatedSystemNumber = value;
                    this.RaiseDataMemberChanged("RelatedSystemNumber");
                    this.OnRelatedSystemNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Remark' value.
        /// </summary>
        [DataMember()]
        public string Remark
        {
            get
            {
                return this._remark;
            }
            set
            {
                if ((this._remark != value))
                {
                    this.OnRemarkChanging(value);
                    this.RaiseDataMemberChanging("Remark");
                    this.ValidateProperty("Remark", value);
                    this._remark = value;
                    this.RaiseDataMemberChanged("Remark");
                    this.OnRemarkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipLeaveDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ShipLeaveDate
        {
            get
            {
                return this._shipLeaveDate;
            }
            set
            {
                if ((this._shipLeaveDate != value))
                {
                    this.OnShipLeaveDateChanging(value);
                    this.RaiseDataMemberChanging("ShipLeaveDate");
                    this.ValidateProperty("ShipLeaveDate", value);
                    this._shipLeaveDate = value;
                    this.RaiseDataMemberChanged("ShipLeaveDate");
                    this.OnShipLeaveDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalItems' value.
        /// </summary>
        [DataMember()]
        public int TotalItems
        {
            get
            {
                return this._totalItems;
            }
            set
            {
                if ((this._totalItems != value))
                {
                    this.OnTotalItemsChanging(value);
                    this.RaiseDataMemberChanging("TotalItems");
                    this.ValidateProperty("TotalItems", value);
                    this._totalItems = value;
                    this.RaiseDataMemberChanged("TotalItems");
                    this.OnTotalItemsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TradeName' value.
        /// </summary>
        [DataMember()]
        public string TradeName
        {
            get
            {
                return this._tradeName;
            }
            set
            {
                if ((this._tradeName != value))
                {
                    this.OnTradeNameChanging(value);
                    this.RaiseDataMemberChanging("TradeName");
                    this.ValidateProperty("TradeName", value);
                    this._tradeName = value;
                    this.RaiseDataMemberChanged("TradeName");
                    this.OnTradeNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TraderCode' value.
        /// </summary>
        [DataMember()]
        public string TraderCode
        {
            get
            {
                return this._traderCode;
            }
            set
            {
                if ((this._traderCode != value))
                {
                    this.OnTraderCodeChanging(value);
                    this.RaiseDataMemberChanging("TraderCode");
                    this.ValidateProperty("TraderCode", value);
                    this._traderCode = value;
                    this.RaiseDataMemberChanged("TraderCode");
                    this.OnTraderCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TraderName' value.
        /// </summary>
        [DataMember()]
        public string TraderName
        {
            get
            {
                return this._traderName;
            }
            set
            {
                if ((this._traderName != value))
                {
                    this.OnTraderNameChanging(value);
                    this.RaiseDataMemberChanging("TraderName");
                    this.ValidateProperty("TraderName", value);
                    this._traderName = value;
                    this.RaiseDataMemberChanged("TraderName");
                    this.OnTraderNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VerificationStatus' value.
        /// </summary>
        [DataMember()]
        public string VerificationStatus
        {
            get
            {
                return this._verificationStatus;
            }
            set
            {
                if ((this._verificationStatus != value))
                {
                    this.OnVerificationStatusChanging(value);
                    this.RaiseDataMemberChanging("VerificationStatus");
                    this.ValidateProperty("VerificationStatus", value);
                    this._verificationStatus = value;
                    this.RaiseDataMemberChanged("VerificationStatus");
                    this.OnVerificationStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VerificationStatusDetail' value.
        /// </summary>
        [DataMember()]
        public string VerificationStatusDetail
        {
            get
            {
                return this._verificationStatusDetail;
            }
            set
            {
                if ((this._verificationStatusDetail != value))
                {
                    this.OnVerificationStatusDetailChanging(value);
                    this.RaiseDataMemberChanging("VerificationStatusDetail");
                    this.ValidateProperty("VerificationStatusDetail", value);
                    this._verificationStatusDetail = value;
                    this.RaiseDataMemberChanged("VerificationStatusDetail");
                    this.OnVerificationStatusDetailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VoyageNumber' value.
        /// </summary>
        [DataMember()]
        public string VoyageNumber
        {
            get
            {
                return this._voyageNumber;
            }
            set
            {
                if ((this._voyageNumber != value))
                {
                    this.OnVoyageNumberChanging(value);
                    this.RaiseDataMemberChanging("VoyageNumber");
                    this.ValidateProperty("VoyageNumber", value);
                    this._voyageNumber = value;
                    this.RaiseDataMemberChanged("VoyageNumber");
                    this.OnVoyageNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'GetAllFinancialDeclaration' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class GetAllFinancialDeclaration : Entity
    {
        
        private string _approvalNumber;
        
        private Nullable<decimal> _billFeeAmount;
        
        private string _billNumber;
        
        private string _certificateNumber;
        
        private Nullable<decimal> _checkFeeAmount;
        
        private Nullable<decimal> _checkFeeCost;
        
        private Nullable<decimal> _commissionFeeAmount;
        
        private Nullable<decimal> _commissionFeeCost;
        
        private string _containerNumbers;
        
        private string _conveyance;
        
        private string _customerName;
        
        private Nullable<DateTime> _declarationDate;
        
        private Nullable<decimal> _declarationFeeAmount;
        
        private Nullable<decimal> _declarationFeeCost;
        
        private string _declarationNumber;
        
        private string _declarationStatus;
        
        private string _dock;
        
        private string _drawbackStatus;
        
        private Nullable<decimal> _examinationFeeAmount;
        
        private Nullable<decimal> _examinationFeeCost;
        
        private string _financialRemark;
        
        private Nullable<decimal> _grossWeight;
        
        private int _id;
        
        private int _isExamination;
        
        private Nullable<decimal> _otherFeeAmount;
        
        private Nullable<decimal> _otherFeeCost;
        
        private Nullable<int> _packageAmount;
        
        private DateTime _receivedDate;
        
        private string _relatedSystemNumber;
        
        private string _remark;
        
        private Nullable<DateTime> _shipLeaveDate;
        
        private int _totalItems;
        
        private string _traderName;
        
        private string _voyageNumber;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnApprovalNumberChanging(string value);
        partial void OnApprovalNumberChanged();
        partial void OnBillFeeAmountChanging(Nullable<decimal> value);
        partial void OnBillFeeAmountChanged();
        partial void OnBillNumberChanging(string value);
        partial void OnBillNumberChanged();
        partial void OnCertificateNumberChanging(string value);
        partial void OnCertificateNumberChanged();
        partial void OnCheckFeeAmountChanging(Nullable<decimal> value);
        partial void OnCheckFeeAmountChanged();
        partial void OnCheckFeeCostChanging(Nullable<decimal> value);
        partial void OnCheckFeeCostChanged();
        partial void OnCommissionFeeAmountChanging(Nullable<decimal> value);
        partial void OnCommissionFeeAmountChanged();
        partial void OnCommissionFeeCostChanging(Nullable<decimal> value);
        partial void OnCommissionFeeCostChanged();
        partial void OnContainerNumbersChanging(string value);
        partial void OnContainerNumbersChanged();
        partial void OnConveyanceChanging(string value);
        partial void OnConveyanceChanged();
        partial void OnCustomerNameChanging(string value);
        partial void OnCustomerNameChanged();
        partial void OnDeclarationDateChanging(Nullable<DateTime> value);
        partial void OnDeclarationDateChanged();
        partial void OnDeclarationFeeAmountChanging(Nullable<decimal> value);
        partial void OnDeclarationFeeAmountChanged();
        partial void OnDeclarationFeeCostChanging(Nullable<decimal> value);
        partial void OnDeclarationFeeCostChanged();
        partial void OnDeclarationNumberChanging(string value);
        partial void OnDeclarationNumberChanged();
        partial void OnDeclarationStatusChanging(string value);
        partial void OnDeclarationStatusChanged();
        partial void OnDockChanging(string value);
        partial void OnDockChanged();
        partial void OnDrawbackStatusChanging(string value);
        partial void OnDrawbackStatusChanged();
        partial void OnExaminationFeeAmountChanging(Nullable<decimal> value);
        partial void OnExaminationFeeAmountChanged();
        partial void OnExaminationFeeCostChanging(Nullable<decimal> value);
        partial void OnExaminationFeeCostChanged();
        partial void OnFinancialRemarkChanging(string value);
        partial void OnFinancialRemarkChanged();
        partial void OnGrossWeightChanging(Nullable<decimal> value);
        partial void OnGrossWeightChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnIsExaminationChanging(int value);
        partial void OnIsExaminationChanged();
        partial void OnOtherFeeAmountChanging(Nullable<decimal> value);
        partial void OnOtherFeeAmountChanged();
        partial void OnOtherFeeCostChanging(Nullable<decimal> value);
        partial void OnOtherFeeCostChanged();
        partial void OnPackageAmountChanging(Nullable<int> value);
        partial void OnPackageAmountChanged();
        partial void OnReceivedDateChanging(DateTime value);
        partial void OnReceivedDateChanged();
        partial void OnRelatedSystemNumberChanging(string value);
        partial void OnRelatedSystemNumberChanged();
        partial void OnRemarkChanging(string value);
        partial void OnRemarkChanged();
        partial void OnShipLeaveDateChanging(Nullable<DateTime> value);
        partial void OnShipLeaveDateChanged();
        partial void OnTotalItemsChanging(int value);
        partial void OnTotalItemsChanged();
        partial void OnTraderNameChanging(string value);
        partial void OnTraderNameChanged();
        partial void OnVoyageNumberChanging(string value);
        partial void OnVoyageNumberChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAllFinancialDeclaration"/> class.
        /// </summary>
        public GetAllFinancialDeclaration()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ApprovalNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string ApprovalNumber
        {
            get
            {
                return this._approvalNumber;
            }
            set
            {
                if ((this._approvalNumber != value))
                {
                    this.OnApprovalNumberChanging(value);
                    this.RaiseDataMemberChanging("ApprovalNumber");
                    this.ValidateProperty("ApprovalNumber", value);
                    this._approvalNumber = value;
                    this.RaiseDataMemberChanged("ApprovalNumber");
                    this.OnApprovalNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BillFeeAmount' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> BillFeeAmount
        {
            get
            {
                return this._billFeeAmount;
            }
            set
            {
                if ((this._billFeeAmount != value))
                {
                    this.OnBillFeeAmountChanging(value);
                    this.RaiseDataMemberChanging("BillFeeAmount");
                    this.ValidateProperty("BillFeeAmount", value);
                    this._billFeeAmount = value;
                    this.RaiseDataMemberChanged("BillFeeAmount");
                    this.OnBillFeeAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BillNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(64)]
        public string BillNumber
        {
            get
            {
                return this._billNumber;
            }
            set
            {
                if ((this._billNumber != value))
                {
                    this.OnBillNumberChanging(value);
                    this.RaiseDataMemberChanging("BillNumber");
                    this.ValidateProperty("BillNumber", value);
                    this._billNumber = value;
                    this.RaiseDataMemberChanged("BillNumber");
                    this.OnBillNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CertificateNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string CertificateNumber
        {
            get
            {
                return this._certificateNumber;
            }
            set
            {
                if ((this._certificateNumber != value))
                {
                    this.OnCertificateNumberChanging(value);
                    this.RaiseDataMemberChanging("CertificateNumber");
                    this.ValidateProperty("CertificateNumber", value);
                    this._certificateNumber = value;
                    this.RaiseDataMemberChanged("CertificateNumber");
                    this.OnCertificateNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CheckFeeAmount' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CheckFeeAmount
        {
            get
            {
                return this._checkFeeAmount;
            }
            set
            {
                if ((this._checkFeeAmount != value))
                {
                    this.OnCheckFeeAmountChanging(value);
                    this.RaiseDataMemberChanging("CheckFeeAmount");
                    this.ValidateProperty("CheckFeeAmount", value);
                    this._checkFeeAmount = value;
                    this.RaiseDataMemberChanged("CheckFeeAmount");
                    this.OnCheckFeeAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CheckFeeCost' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CheckFeeCost
        {
            get
            {
                return this._checkFeeCost;
            }
            set
            {
                if ((this._checkFeeCost != value))
                {
                    this.OnCheckFeeCostChanging(value);
                    this.RaiseDataMemberChanging("CheckFeeCost");
                    this.ValidateProperty("CheckFeeCost", value);
                    this._checkFeeCost = value;
                    this.RaiseDataMemberChanged("CheckFeeCost");
                    this.OnCheckFeeCostChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CommissionFeeAmount' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CommissionFeeAmount
        {
            get
            {
                return this._commissionFeeAmount;
            }
            set
            {
                if ((this._commissionFeeAmount != value))
                {
                    this.OnCommissionFeeAmountChanging(value);
                    this.RaiseDataMemberChanging("CommissionFeeAmount");
                    this.ValidateProperty("CommissionFeeAmount", value);
                    this._commissionFeeAmount = value;
                    this.RaiseDataMemberChanged("CommissionFeeAmount");
                    this.OnCommissionFeeAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CommissionFeeCost' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> CommissionFeeCost
        {
            get
            {
                return this._commissionFeeCost;
            }
            set
            {
                if ((this._commissionFeeCost != value))
                {
                    this.OnCommissionFeeCostChanging(value);
                    this.RaiseDataMemberChanging("CommissionFeeCost");
                    this.ValidateProperty("CommissionFeeCost", value);
                    this._commissionFeeCost = value;
                    this.RaiseDataMemberChanged("CommissionFeeCost");
                    this.OnCommissionFeeCostChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContainerNumbers' value.
        /// </summary>
        [DataMember()]
        public string ContainerNumbers
        {
            get
            {
                return this._containerNumbers;
            }
            set
            {
                if ((this._containerNumbers != value))
                {
                    this.OnContainerNumbersChanging(value);
                    this.RaiseDataMemberChanging("ContainerNumbers");
                    this.ValidateProperty("ContainerNumbers", value);
                    this._containerNumbers = value;
                    this.RaiseDataMemberChanged("ContainerNumbers");
                    this.OnContainerNumbersChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Conveyance' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string Conveyance
        {
            get
            {
                return this._conveyance;
            }
            set
            {
                if ((this._conveyance != value))
                {
                    this.OnConveyanceChanging(value);
                    this.RaiseDataMemberChanging("Conveyance");
                    this.ValidateProperty("Conveyance", value);
                    this._conveyance = value;
                    this.RaiseDataMemberChanged("Conveyance");
                    this.OnConveyanceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(1)]
        public string CustomerName
        {
            get
            {
                return this._customerName;
            }
            set
            {
                if ((this._customerName != value))
                {
                    this.OnCustomerNameChanging(value);
                    this.RaiseDataMemberChanging("CustomerName");
                    this.ValidateProperty("CustomerName", value);
                    this._customerName = value;
                    this.RaiseDataMemberChanged("CustomerName");
                    this.OnCustomerNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeclarationDate
        {
            get
            {
                return this._declarationDate;
            }
            set
            {
                if ((this._declarationDate != value))
                {
                    this.OnDeclarationDateChanging(value);
                    this.RaiseDataMemberChanging("DeclarationDate");
                    this.ValidateProperty("DeclarationDate", value);
                    this._declarationDate = value;
                    this.RaiseDataMemberChanged("DeclarationDate");
                    this.OnDeclarationDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationFeeAmount' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> DeclarationFeeAmount
        {
            get
            {
                return this._declarationFeeAmount;
            }
            set
            {
                if ((this._declarationFeeAmount != value))
                {
                    this.OnDeclarationFeeAmountChanging(value);
                    this.RaiseDataMemberChanging("DeclarationFeeAmount");
                    this.ValidateProperty("DeclarationFeeAmount", value);
                    this._declarationFeeAmount = value;
                    this.RaiseDataMemberChanged("DeclarationFeeAmount");
                    this.OnDeclarationFeeAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationFeeCost' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> DeclarationFeeCost
        {
            get
            {
                return this._declarationFeeCost;
            }
            set
            {
                if ((this._declarationFeeCost != value))
                {
                    this.OnDeclarationFeeCostChanging(value);
                    this.RaiseDataMemberChanging("DeclarationFeeCost");
                    this.ValidateProperty("DeclarationFeeCost", value);
                    this._declarationFeeCost = value;
                    this.RaiseDataMemberChanged("DeclarationFeeCost");
                    this.OnDeclarationFeeCostChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string DeclarationNumber
        {
            get
            {
                return this._declarationNumber;
            }
            set
            {
                if ((this._declarationNumber != value))
                {
                    this.OnDeclarationNumberChanging(value);
                    this.RaiseDataMemberChanging("DeclarationNumber");
                    this.ValidateProperty("DeclarationNumber", value);
                    this._declarationNumber = value;
                    this.RaiseDataMemberChanged("DeclarationNumber");
                    this.OnDeclarationNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationStatus' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string DeclarationStatus
        {
            get
            {
                return this._declarationStatus;
            }
            set
            {
                if ((this._declarationStatus != value))
                {
                    this.OnDeclarationStatusChanging(value);
                    this.RaiseDataMemberChanging("DeclarationStatus");
                    this.ValidateProperty("DeclarationStatus", value);
                    this._declarationStatus = value;
                    this.RaiseDataMemberChanged("DeclarationStatus");
                    this.OnDeclarationStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Dock' value.
        /// </summary>
        [DataMember()]
        public string Dock
        {
            get
            {
                return this._dock;
            }
            set
            {
                if ((this._dock != value))
                {
                    this.OnDockChanging(value);
                    this.RaiseDataMemberChanging("Dock");
                    this.ValidateProperty("Dock", value);
                    this._dock = value;
                    this.RaiseDataMemberChanged("Dock");
                    this.OnDockChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DrawbackStatus' value.
        /// </summary>
        [DataMember()]
        [StringLength(32)]
        public string DrawbackStatus
        {
            get
            {
                return this._drawbackStatus;
            }
            set
            {
                if ((this._drawbackStatus != value))
                {
                    this.OnDrawbackStatusChanging(value);
                    this.RaiseDataMemberChanging("DrawbackStatus");
                    this.ValidateProperty("DrawbackStatus", value);
                    this._drawbackStatus = value;
                    this.RaiseDataMemberChanged("DrawbackStatus");
                    this.OnDrawbackStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExaminationFeeAmount' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ExaminationFeeAmount
        {
            get
            {
                return this._examinationFeeAmount;
            }
            set
            {
                if ((this._examinationFeeAmount != value))
                {
                    this.OnExaminationFeeAmountChanging(value);
                    this.RaiseDataMemberChanging("ExaminationFeeAmount");
                    this.ValidateProperty("ExaminationFeeAmount", value);
                    this._examinationFeeAmount = value;
                    this.RaiseDataMemberChanged("ExaminationFeeAmount");
                    this.OnExaminationFeeAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExaminationFeeCost' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ExaminationFeeCost
        {
            get
            {
                return this._examinationFeeCost;
            }
            set
            {
                if ((this._examinationFeeCost != value))
                {
                    this.OnExaminationFeeCostChanging(value);
                    this.RaiseDataMemberChanging("ExaminationFeeCost");
                    this.ValidateProperty("ExaminationFeeCost", value);
                    this._examinationFeeCost = value;
                    this.RaiseDataMemberChanged("ExaminationFeeCost");
                    this.OnExaminationFeeCostChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FinancialRemark' value.
        /// </summary>
        [DataMember()]
        public string FinancialRemark
        {
            get
            {
                return this._financialRemark;
            }
            set
            {
                if ((this._financialRemark != value))
                {
                    this.OnFinancialRemarkChanging(value);
                    this.RaiseDataMemberChanging("FinancialRemark");
                    this.ValidateProperty("FinancialRemark", value);
                    this._financialRemark = value;
                    this.RaiseDataMemberChanged("FinancialRemark");
                    this.OnFinancialRemarkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GrossWeight' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> GrossWeight
        {
            get
            {
                return this._grossWeight;
            }
            set
            {
                if ((this._grossWeight != value))
                {
                    this.OnGrossWeightChanging(value);
                    this.RaiseDataMemberChanging("GrossWeight");
                    this.ValidateProperty("GrossWeight", value);
                    this._grossWeight = value;
                    this.RaiseDataMemberChanged("GrossWeight");
                    this.OnGrossWeightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsExamination' value.
        /// </summary>
        [DataMember()]
        public int IsExamination
        {
            get
            {
                return this._isExamination;
            }
            set
            {
                if ((this._isExamination != value))
                {
                    this.OnIsExaminationChanging(value);
                    this.RaiseDataMemberChanging("IsExamination");
                    this.ValidateProperty("IsExamination", value);
                    this._isExamination = value;
                    this.RaiseDataMemberChanged("IsExamination");
                    this.OnIsExaminationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OtherFeeAmount' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> OtherFeeAmount
        {
            get
            {
                return this._otherFeeAmount;
            }
            set
            {
                if ((this._otherFeeAmount != value))
                {
                    this.OnOtherFeeAmountChanging(value);
                    this.RaiseDataMemberChanging("OtherFeeAmount");
                    this.ValidateProperty("OtherFeeAmount", value);
                    this._otherFeeAmount = value;
                    this.RaiseDataMemberChanged("OtherFeeAmount");
                    this.OnOtherFeeAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OtherFeeCost' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> OtherFeeCost
        {
            get
            {
                return this._otherFeeCost;
            }
            set
            {
                if ((this._otherFeeCost != value))
                {
                    this.OnOtherFeeCostChanging(value);
                    this.RaiseDataMemberChanging("OtherFeeCost");
                    this.ValidateProperty("OtherFeeCost", value);
                    this._otherFeeCost = value;
                    this.RaiseDataMemberChanged("OtherFeeCost");
                    this.OnOtherFeeCostChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PackageAmount' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> PackageAmount
        {
            get
            {
                return this._packageAmount;
            }
            set
            {
                if ((this._packageAmount != value))
                {
                    this.OnPackageAmountChanging(value);
                    this.RaiseDataMemberChanging("PackageAmount");
                    this.ValidateProperty("PackageAmount", value);
                    this._packageAmount = value;
                    this.RaiseDataMemberChanged("PackageAmount");
                    this.OnPackageAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReceivedDate' value.
        /// </summary>
        [DataMember()]
        public DateTime ReceivedDate
        {
            get
            {
                return this._receivedDate;
            }
            set
            {
                if ((this._receivedDate != value))
                {
                    this.OnReceivedDateChanging(value);
                    this.RaiseDataMemberChanging("ReceivedDate");
                    this.ValidateProperty("ReceivedDate", value);
                    this._receivedDate = value;
                    this.RaiseDataMemberChanged("ReceivedDate");
                    this.OnReceivedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RelatedSystemNumber' value.
        /// </summary>
        [DataMember()]
        public string RelatedSystemNumber
        {
            get
            {
                return this._relatedSystemNumber;
            }
            set
            {
                if ((this._relatedSystemNumber != value))
                {
                    this.OnRelatedSystemNumberChanging(value);
                    this.RaiseDataMemberChanging("RelatedSystemNumber");
                    this.ValidateProperty("RelatedSystemNumber", value);
                    this._relatedSystemNumber = value;
                    this.RaiseDataMemberChanged("RelatedSystemNumber");
                    this.OnRelatedSystemNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Remark' value.
        /// </summary>
        [DataMember()]
        [StringLength(256)]
        public string Remark
        {
            get
            {
                return this._remark;
            }
            set
            {
                if ((this._remark != value))
                {
                    this.OnRemarkChanging(value);
                    this.RaiseDataMemberChanging("Remark");
                    this.ValidateProperty("Remark", value);
                    this._remark = value;
                    this.RaiseDataMemberChanged("Remark");
                    this.OnRemarkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipLeaveDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ShipLeaveDate
        {
            get
            {
                return this._shipLeaveDate;
            }
            set
            {
                if ((this._shipLeaveDate != value))
                {
                    this.OnShipLeaveDateChanging(value);
                    this.RaiseDataMemberChanging("ShipLeaveDate");
                    this.ValidateProperty("ShipLeaveDate", value);
                    this._shipLeaveDate = value;
                    this.RaiseDataMemberChanged("ShipLeaveDate");
                    this.OnShipLeaveDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalItems' value.
        /// </summary>
        [DataMember()]
        public int TotalItems
        {
            get
            {
                return this._totalItems;
            }
            set
            {
                if ((this._totalItems != value))
                {
                    this.OnTotalItemsChanging(value);
                    this.RaiseDataMemberChanging("TotalItems");
                    this.ValidateProperty("TotalItems", value);
                    this._totalItems = value;
                    this.RaiseDataMemberChanged("TotalItems");
                    this.OnTotalItemsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TraderName' value.
        /// </summary>
        [DataMember()]
        [StringLength(128)]
        public string TraderName
        {
            get
            {
                return this._traderName;
            }
            set
            {
                if ((this._traderName != value))
                {
                    this.OnTraderNameChanging(value);
                    this.RaiseDataMemberChanging("TraderName");
                    this.ValidateProperty("TraderName", value);
                    this._traderName = value;
                    this.RaiseDataMemberChanged("TraderName");
                    this.OnTraderNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VoyageNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(64)]
        public string VoyageNumber
        {
            get
            {
                return this._voyageNumber;
            }
            set
            {
                if ((this._voyageNumber != value))
                {
                    this.OnVoyageNumberChanging(value);
                    this.RaiseDataMemberChanging("VoyageNumber");
                    this.ValidateProperty("VoyageNumber", value);
                    this._voyageNumber = value;
                    this.RaiseDataMemberChanged("VoyageNumber");
                    this.OnVoyageNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'HSCodeDictionary' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class HSCodeDictionary : Entity
    {
        
        private string _code;
        
        private string _declarationFactor;
        
        private string _drawbackRate;
        
        private string _exportRate;
        
        private string _firstUnitName;
        
        private int _id;
        
        private string _managementName;
        
        private string _name;
        
        private string _secondUnitName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnDeclarationFactorChanging(string value);
        partial void OnDeclarationFactorChanged();
        partial void OnDrawbackRateChanging(string value);
        partial void OnDrawbackRateChanged();
        partial void OnExportRateChanging(string value);
        partial void OnExportRateChanged();
        partial void OnFirstUnitNameChanging(string value);
        partial void OnFirstUnitNameChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnManagementNameChanging(string value);
        partial void OnManagementNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnSecondUnitNameChanging(string value);
        partial void OnSecondUnitNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="HSCodeDictionary"/> class.
        /// </summary>
        public HSCodeDictionary()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(10)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.RaiseDataMemberChanging("Code");
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaiseDataMemberChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationFactor' value.
        /// </summary>
        [DataMember()]
        [StringLength(256)]
        public string DeclarationFactor
        {
            get
            {
                return this._declarationFactor;
            }
            set
            {
                if ((this._declarationFactor != value))
                {
                    this.OnDeclarationFactorChanging(value);
                    this.RaiseDataMemberChanging("DeclarationFactor");
                    this.ValidateProperty("DeclarationFactor", value);
                    this._declarationFactor = value;
                    this.RaiseDataMemberChanged("DeclarationFactor");
                    this.OnDeclarationFactorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DrawbackRate' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string DrawbackRate
        {
            get
            {
                return this._drawbackRate;
            }
            set
            {
                if ((this._drawbackRate != value))
                {
                    this.OnDrawbackRateChanging(value);
                    this.RaiseDataMemberChanging("DrawbackRate");
                    this.ValidateProperty("DrawbackRate", value);
                    this._drawbackRate = value;
                    this.RaiseDataMemberChanged("DrawbackRate");
                    this.OnDrawbackRateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExportRate' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string ExportRate
        {
            get
            {
                return this._exportRate;
            }
            set
            {
                if ((this._exportRate != value))
                {
                    this.OnExportRateChanging(value);
                    this.RaiseDataMemberChanging("ExportRate");
                    this.ValidateProperty("ExportRate", value);
                    this._exportRate = value;
                    this.RaiseDataMemberChanged("ExportRate");
                    this.OnExportRateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FirstUnitName' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string FirstUnitName
        {
            get
            {
                return this._firstUnitName;
            }
            set
            {
                if ((this._firstUnitName != value))
                {
                    this.OnFirstUnitNameChanging(value);
                    this.RaiseDataMemberChanging("FirstUnitName");
                    this.ValidateProperty("FirstUnitName", value);
                    this._firstUnitName = value;
                    this.RaiseDataMemberChanged("FirstUnitName");
                    this.OnFirstUnitNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ManagementName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string ManagementName
        {
            get
            {
                return this._managementName;
            }
            set
            {
                if ((this._managementName != value))
                {
                    this.OnManagementNameChanging(value);
                    this.RaiseDataMemberChanging("ManagementName");
                    this.ValidateProperty("ManagementName", value);
                    this._managementName = value;
                    this.RaiseDataMemberChanged("ManagementName");
                    this.OnManagementNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SecondUnitName' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string SecondUnitName
        {
            get
            {
                return this._secondUnitName;
            }
            set
            {
                if ((this._secondUnitName != value))
                {
                    this.OnSecondUnitNameChanging(value);
                    this.RaiseDataMemberChanging("SecondUnitName");
                    this.ValidateProperty("SecondUnitName", value);
                    this._secondUnitName = value;
                    this.RaiseDataMemberChanged("SecondUnitName");
                    this.OnSecondUnitNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Levy' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class Levy : Entity
    {
        
        private string _code;
        
        private string _fullName;
        
        private string _name;
        
        private string _pinYin;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnFullNameChanging(string value);
        partial void OnFullNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPinYinChanging(string value);
        partial void OnPinYinChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Levy"/> class.
        /// </summary>
        public Levy()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(16)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FullName' value.
        /// </summary>
        [DataMember()]
        [StringLength(128)]
        public string FullName
        {
            get
            {
                return this._fullName;
            }
            set
            {
                if ((this._fullName != value))
                {
                    this.OnFullNameChanging(value);
                    this.RaiseDataMemberChanging("FullName");
                    this.ValidateProperty("FullName", value);
                    this._fullName = value;
                    this.RaiseDataMemberChanged("FullName");
                    this.OnFullNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PinYin' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public string PinYin
        {
            get
            {
                return this._pinYin;
            }
            set
            {
                if ((this._pinYin != value))
                {
                    this.OnPinYinChanging(value);
                    this.RaiseDataMemberChanging("PinYin");
                    this.ValidateProperty("PinYin", value);
                    this._pinYin = value;
                    this.RaiseDataMemberChanged("PinYin");
                    this.OnPinYinChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'LoginHistory' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class LoginHistory : Entity
    {
        
        private int _id;
        
        private Nullable<bool> _isLogout;
        
        private bool _isShow;
        
        private DateTime _loginDate;
        
        private string _loginIP;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnIsLogoutChanging(Nullable<bool> value);
        partial void OnIsLogoutChanged();
        partial void OnIsShowChanging(bool value);
        partial void OnIsShowChanged();
        partial void OnLoginDateChanging(DateTime value);
        partial void OnLoginDateChanged();
        partial void OnLoginIPChanging(string value);
        partial void OnLoginIPChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginHistory"/> class.
        /// </summary>
        public LoginHistory()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsLogout' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsLogout
        {
            get
            {
                return this._isLogout;
            }
            set
            {
                if ((this._isLogout != value))
                {
                    this.OnIsLogoutChanging(value);
                    this.RaiseDataMemberChanging("IsLogout");
                    this.ValidateProperty("IsLogout", value);
                    this._isLogout = value;
                    this.RaiseDataMemberChanged("IsLogout");
                    this.OnIsLogoutChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsShow' value.
        /// </summary>
        [DataMember()]
        public bool IsShow
        {
            get
            {
                return this._isShow;
            }
            set
            {
                if ((this._isShow != value))
                {
                    this.OnIsShowChanging(value);
                    this.RaiseDataMemberChanging("IsShow");
                    this.ValidateProperty("IsShow", value);
                    this._isShow = value;
                    this.RaiseDataMemberChanged("IsShow");
                    this.OnIsShowChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LoginDate' value.
        /// </summary>
        [DataMember()]
        public DateTime LoginDate
        {
            get
            {
                return this._loginDate;
            }
            set
            {
                if ((this._loginDate != value))
                {
                    this.OnLoginDateChanging(value);
                    this.RaiseDataMemberChanging("LoginDate");
                    this.ValidateProperty("LoginDate", value);
                    this._loginDate = value;
                    this.RaiseDataMemberChanged("LoginDate");
                    this.OnLoginDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LoginIP' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string LoginIP
        {
            get
            {
                return this._loginIP;
            }
            set
            {
                if ((this._loginIP != value))
                {
                    this.OnLoginIPChanging(value);
                    this.RaiseDataMemberChanging("LoginIP");
                    this.ValidateProperty("LoginIP", value);
                    this._loginIP = value;
                    this.RaiseDataMemberChanged("LoginIP");
                    this.OnLoginIPChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'MachineNameIPMapping' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class MachineNameIPMapping : Entity
    {
        
        private int _id;
        
        private string _machineIP;
        
        private string _machineName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnMachineIPChanging(string value);
        partial void OnMachineIPChanged();
        partial void OnMachineNameChanging(string value);
        partial void OnMachineNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MachineNameIPMapping"/> class.
        /// </summary>
        public MachineNameIPMapping()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MachineIP' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string MachineIP
        {
            get
            {
                return this._machineIP;
            }
            set
            {
                if ((this._machineIP != value))
                {
                    this.OnMachineIPChanging(value);
                    this.RaiseDataMemberChanging("MachineIP");
                    this.ValidateProperty("MachineIP", value);
                    this._machineIP = value;
                    this.RaiseDataMemberChanged("MachineIP");
                    this.OnMachineIPChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MachineName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string MachineName
        {
            get
            {
                return this._machineName;
            }
            set
            {
                if ((this._machineName != value))
                {
                    this.OnMachineNameChanging(value);
                    this.RaiseDataMemberChanging("MachineName");
                    this.ValidateProperty("MachineName", value);
                    this._machineName = value;
                    this.RaiseDataMemberChanged("MachineName");
                    this.OnMachineNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Pay' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class Pay : Entity
    {
        
        private string _code;
        
        private string _name;
        
        private string _pinYin;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPinYinChanging(string value);
        partial void OnPinYinChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Pay"/> class.
        /// </summary>
        public Pay()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(16)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PinYin' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public string PinYin
        {
            get
            {
                return this._pinYin;
            }
            set
            {
                if ((this._pinYin != value))
                {
                    this.OnPinYinChanging(value);
                    this.RaiseDataMemberChanging("PinYin");
                    this.ValidateProperty("PinYin", value);
                    this._pinYin = value;
                    this.RaiseDataMemberChanged("PinYin");
                    this.OnPinYinChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'Port' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class Port : Entity
    {
        
        private string _code;
        
        private string _name;
        
        private string _pinYin;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPinYinChanging(string value);
        partial void OnPinYinChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Port"/> class.
        /// </summary>
        public Port()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(16)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PinYin' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public string PinYin
        {
            get
            {
                return this._pinYin;
            }
            set
            {
                if ((this._pinYin != value))
                {
                    this.OnPinYinChanging(value);
                    this.RaiseDataMemberChanging("PinYin");
                    this.ValidateProperty("PinYin", value);
                    this._pinYin = value;
                    this.RaiseDataMemberChanged("PinYin");
                    this.OnPinYinChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'Purpose' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class Purpose : Entity
    {
        
        private string _code;
        
        private string _name;
        
        private string _pinYin;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPinYinChanging(string value);
        partial void OnPinYinChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Purpose"/> class.
        /// </summary>
        public Purpose()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(16)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PinYin' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public string PinYin
        {
            get
            {
                return this._pinYin;
            }
            set
            {
                if ((this._pinYin != value))
                {
                    this.OnPinYinChanging(value);
                    this.RaiseDataMemberChanging("PinYin");
                    this.ValidateProperty("PinYin", value);
                    this._pinYin = value;
                    this.RaiseDataMemberChanged("PinYin");
                    this.OnPinYinChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'Role' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class Role : Entity
    {
        
        private DateTime _createdDate;
        
        private int _id;
        
        private int _modifiedByUserId;
        
        private DateTime _modifiedDate;
        
        private string _name;
        
        private EntityCollection<RoleAccess> _roleAccess;
        
        private EntityCollection<UserRole> _userRole;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnModifiedByUserIdChanging(int value);
        partial void OnModifiedByUserIdChanged();
        partial void OnModifiedDateChanging(DateTime value);
        partial void OnModifiedDateChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Role"/> class.
        /// </summary>
        public Role()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CreatedDate' value.
        /// </summary>
        [DataMember()]
        public DateTime CreatedDate
        {
            get
            {
                return this._createdDate;
            }
            set
            {
                if ((this._createdDate != value))
                {
                    this.OnCreatedDateChanging(value);
                    this.RaiseDataMemberChanging("CreatedDate");
                    this.ValidateProperty("CreatedDate", value);
                    this._createdDate = value;
                    this.RaiseDataMemberChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ModifiedByUserId' value.
        /// </summary>
        [DataMember()]
        public int ModifiedByUserId
        {
            get
            {
                return this._modifiedByUserId;
            }
            set
            {
                if ((this._modifiedByUserId != value))
                {
                    this.OnModifiedByUserIdChanging(value);
                    this.RaiseDataMemberChanging("ModifiedByUserId");
                    this.ValidateProperty("ModifiedByUserId", value);
                    this._modifiedByUserId = value;
                    this.RaiseDataMemberChanged("ModifiedByUserId");
                    this.OnModifiedByUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ModifiedDate' value.
        /// </summary>
        [DataMember()]
        public DateTime ModifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                if ((this._modifiedDate != value))
                {
                    this.OnModifiedDateChanging(value);
                    this.RaiseDataMemberChanging("ModifiedDate");
                    this.ValidateProperty("ModifiedDate", value);
                    this._modifiedDate = value;
                    this.RaiseDataMemberChanged("ModifiedDate");
                    this.OnModifiedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RoleAccess"/> entity instances.
        /// </summary>
        [Association("Role_RoleAccess", "Id", "RoleId")]
        [XmlIgnore()]
        public EntityCollection<RoleAccess> RoleAccess
        {
            get
            {
                if ((this._roleAccess == null))
                {
                    this._roleAccess = new EntityCollection<RoleAccess>(this, "RoleAccess", this.FilterRoleAccess, this.AttachRoleAccess, this.DetachRoleAccess);
                }
                return this._roleAccess;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="UserRole"/> entity instances.
        /// </summary>
        [Association("Role_UserRole", "Id", "RoleId")]
        [XmlIgnore()]
        public EntityCollection<UserRole> UserRole
        {
            get
            {
                if ((this._userRole == null))
                {
                    this._userRole = new EntityCollection<UserRole>(this, "UserRole", this.FilterUserRole, this.AttachUserRole, this.DetachUserRole);
                }
                return this._userRole;
            }
        }
        
        private void AttachRoleAccess(RoleAccess entity)
        {
            entity.Role = this;
        }
        
        private void DetachRoleAccess(RoleAccess entity)
        {
            entity.Role = null;
        }
        
        private bool FilterRoleAccess(RoleAccess entity)
        {
            return (entity.RoleId == this.Id);
        }
        
        private void AttachUserRole(UserRole entity)
        {
            entity.Role = this;
        }
        
        private void DetachUserRole(UserRole entity)
        {
            entity.Role = null;
        }
        
        private bool FilterUserRole(UserRole entity)
        {
            return (entity.RoleId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'RoleAccess' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class RoleAccess : Entity
    {
        
        private bool _canCreate;
        
        private bool _canDelete;
        
        private bool _canRead;
        
        private bool _canUpdate;
        
        private EntityRef<Role> _role;
        
        private int _roleId;
        
        private EntityRef<UIPage> _uiPage;
        
        private int _uiPageId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCanCreateChanging(bool value);
        partial void OnCanCreateChanged();
        partial void OnCanDeleteChanging(bool value);
        partial void OnCanDeleteChanged();
        partial void OnCanReadChanging(bool value);
        partial void OnCanReadChanged();
        partial void OnCanUpdateChanging(bool value);
        partial void OnCanUpdateChanged();
        partial void OnRoleIdChanging(int value);
        partial void OnRoleIdChanged();
        partial void OnUIPageIdChanging(int value);
        partial void OnUIPageIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RoleAccess"/> class.
        /// </summary>
        public RoleAccess()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CanCreate' value.
        /// </summary>
        [DataMember()]
        public bool CanCreate
        {
            get
            {
                return this._canCreate;
            }
            set
            {
                if ((this._canCreate != value))
                {
                    this.OnCanCreateChanging(value);
                    this.RaiseDataMemberChanging("CanCreate");
                    this.ValidateProperty("CanCreate", value);
                    this._canCreate = value;
                    this.RaiseDataMemberChanged("CanCreate");
                    this.OnCanCreateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CanDelete' value.
        /// </summary>
        [DataMember()]
        public bool CanDelete
        {
            get
            {
                return this._canDelete;
            }
            set
            {
                if ((this._canDelete != value))
                {
                    this.OnCanDeleteChanging(value);
                    this.RaiseDataMemberChanging("CanDelete");
                    this.ValidateProperty("CanDelete", value);
                    this._canDelete = value;
                    this.RaiseDataMemberChanged("CanDelete");
                    this.OnCanDeleteChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CanRead' value.
        /// </summary>
        [DataMember()]
        public bool CanRead
        {
            get
            {
                return this._canRead;
            }
            set
            {
                if ((this._canRead != value))
                {
                    this.OnCanReadChanging(value);
                    this.RaiseDataMemberChanging("CanRead");
                    this.ValidateProperty("CanRead", value);
                    this._canRead = value;
                    this.RaiseDataMemberChanged("CanRead");
                    this.OnCanReadChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CanUpdate' value.
        /// </summary>
        [DataMember()]
        public bool CanUpdate
        {
            get
            {
                return this._canUpdate;
            }
            set
            {
                if ((this._canUpdate != value))
                {
                    this.OnCanUpdateChanging(value);
                    this.RaiseDataMemberChanging("CanUpdate");
                    this.ValidateProperty("CanUpdate", value);
                    this._canUpdate = value;
                    this.RaiseDataMemberChanged("CanUpdate");
                    this.OnCanUpdateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Role"/> entity.
        /// </summary>
        [Association("Role_RoleAccess", "RoleId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Role Role
        {
            get
            {
                if ((this._role == null))
                {
                    this._role = new EntityRef<Role>(this, "Role", this.FilterRole);
                }
                return this._role.Entity;
            }
            set
            {
                Role previous = this.Role;
                if ((previous != value))
                {
                    this.ValidateProperty("Role", value);
                    if ((previous != null))
                    {
                        this._role.Entity = null;
                        previous.RoleAccess.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RoleId = value.Id;
                    }
                    else
                    {
                        this.RoleId = default(int);
                    }
                    this._role.Entity = value;
                    if ((value != null))
                    {
                        value.RoleAccess.Add(this);
                    }
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RoleId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int RoleId
        {
            get
            {
                return this._roleId;
            }
            set
            {
                if ((this._roleId != value))
                {
                    this.OnRoleIdChanging(value);
                    this.RaiseDataMemberChanging("RoleId");
                    this.ValidateProperty("RoleId", value);
                    this._roleId = value;
                    this.RaiseDataMemberChanged("RoleId");
                    this.OnRoleIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="UIPage"/> entity.
        /// </summary>
        [Association("UIPage_RoleAccess", "UIPageId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public UIPage UIPage
        {
            get
            {
                if ((this._uiPage == null))
                {
                    this._uiPage = new EntityRef<UIPage>(this, "UIPage", this.FilterUIPage);
                }
                return this._uiPage.Entity;
            }
            set
            {
                UIPage previous = this.UIPage;
                if ((previous != value))
                {
                    this.ValidateProperty("UIPage", value);
                    if ((previous != null))
                    {
                        this._uiPage.Entity = null;
                        previous.RoleAccess.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UIPageId = value.Id;
                    }
                    else
                    {
                        this.UIPageId = default(int);
                    }
                    this._uiPage.Entity = value;
                    if ((value != null))
                    {
                        value.RoleAccess.Add(this);
                    }
                    this.RaisePropertyChanged("UIPage");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UIPageId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int UIPageId
        {
            get
            {
                return this._uiPageId;
            }
            set
            {
                if ((this._uiPageId != value))
                {
                    this.OnUIPageIdChanging(value);
                    this.RaiseDataMemberChanging("UIPageId");
                    this.ValidateProperty("UIPageId", value);
                    this._uiPageId = value;
                    this.RaiseDataMemberChanged("UIPageId");
                    this.OnUIPageIdChanged();
                }
            }
        }
        
        private bool FilterRole(Role entity)
        {
            return (entity.Id == this.RoleId);
        }
        
        private bool FilterUIPage(UIPage entity)
        {
            return (entity.Id == this.UIPageId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._roleId, this._uiPageId);
        }
    }
    
    /// <summary>
    /// The 'Setting' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class Setting : Entity
    {
        
        private Nullable<DateTime> _dateValue;
        
        private Nullable<double> _doubleValue;
        
        private Nullable<int> _intValue;
        
        private string _name;
        
        private string _stringValue;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateValueChanging(Nullable<DateTime> value);
        partial void OnDateValueChanged();
        partial void OnDoubleValueChanging(Nullable<double> value);
        partial void OnDoubleValueChanged();
        partial void OnIntValueChanging(Nullable<int> value);
        partial void OnIntValueChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnStringValueChanging(string value);
        partial void OnStringValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Setting"/> class.
        /// </summary>
        public Setting()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DateValue' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DateValue
        {
            get
            {
                return this._dateValue;
            }
            set
            {
                if ((this._dateValue != value))
                {
                    this.OnDateValueChanging(value);
                    this.RaiseDataMemberChanging("DateValue");
                    this.ValidateProperty("DateValue", value);
                    this._dateValue = value;
                    this.RaiseDataMemberChanged("DateValue");
                    this.OnDateValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DoubleValue' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> DoubleValue
        {
            get
            {
                return this._doubleValue;
            }
            set
            {
                if ((this._doubleValue != value))
                {
                    this.OnDoubleValueChanging(value);
                    this.RaiseDataMemberChanging("DoubleValue");
                    this.ValidateProperty("DoubleValue", value);
                    this._doubleValue = value;
                    this.RaiseDataMemberChanged("DoubleValue");
                    this.OnDoubleValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IntValue' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> IntValue
        {
            get
            {
                return this._intValue;
            }
            set
            {
                if ((this._intValue != value))
                {
                    this.OnIntValueChanging(value);
                    this.RaiseDataMemberChanging("IntValue");
                    this.ValidateProperty("IntValue", value);
                    this._intValue = value;
                    this.RaiseDataMemberChanged("IntValue");
                    this.OnIntValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StringValue' value.
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string StringValue
        {
            get
            {
                return this._stringValue;
            }
            set
            {
                if ((this._stringValue != value))
                {
                    this.OnStringValueChanging(value);
                    this.RaiseDataMemberChanging("StringValue");
                    this.ValidateProperty("StringValue", value);
                    this._stringValue = value;
                    this.RaiseDataMemberChanged("StringValue");
                    this.OnStringValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
    }
    
    /// <summary>
    /// The 'Trade' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class Trade : Entity
    {
        
        private string _code;
        
        private string _fullName;
        
        private string _name;
        
        private string _pinYin;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnFullNameChanging(string value);
        partial void OnFullNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPinYinChanging(string value);
        partial void OnPinYinChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Trade"/> class.
        /// </summary>
        public Trade()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(16)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FullName' value.
        /// </summary>
        [DataMember()]
        [StringLength(128)]
        public string FullName
        {
            get
            {
                return this._fullName;
            }
            set
            {
                if ((this._fullName != value))
                {
                    this.OnFullNameChanging(value);
                    this.RaiseDataMemberChanging("FullName");
                    this.ValidateProperty("FullName", value);
                    this._fullName = value;
                    this.RaiseDataMemberChanged("FullName");
                    this.OnFullNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PinYin' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public string PinYin
        {
            get
            {
                return this._pinYin;
            }
            set
            {
                if ((this._pinYin != value))
                {
                    this.OnPinYinChanging(value);
                    this.RaiseDataMemberChanging("PinYin");
                    this.ValidateProperty("PinYin", value);
                    this._pinYin = value;
                    this.RaiseDataMemberChanged("PinYin");
                    this.OnPinYinChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'Transaction' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class Transaction : Entity
    {
        
        private string _code;
        
        private string _name;
        
        private string _pinYin;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPinYinChanging(string value);
        partial void OnPinYinChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Transaction"/> class.
        /// </summary>
        public Transaction()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(16)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PinYin' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public string PinYin
        {
            get
            {
                return this._pinYin;
            }
            set
            {
                if ((this._pinYin != value))
                {
                    this.OnPinYinChanging(value);
                    this.RaiseDataMemberChanging("PinYin");
                    this.ValidateProperty("PinYin", value);
                    this._pinYin = value;
                    this.RaiseDataMemberChanged("PinYin");
                    this.OnPinYinChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'Transport' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class Transport : Entity
    {
        
        private string _code;
        
        private string _name;
        
        private string _pinYin;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPinYinChanging(string value);
        partial void OnPinYinChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Transport"/> class.
        /// </summary>
        public Transport()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(16)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PinYin' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public string PinYin
        {
            get
            {
                return this._pinYin;
            }
            set
            {
                if ((this._pinYin != value))
                {
                    this.OnPinYinChanging(value);
                    this.RaiseDataMemberChanging("PinYin");
                    this.ValidateProperty("PinYin", value);
                    this._pinYin = value;
                    this.RaiseDataMemberChanged("PinYin");
                    this.OnPinYinChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'UIGroup' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class UIGroup : Entity
    {
        
        private string _icon;
        
        private int _id;
        
        private bool _isActive;
        
        private string _name;
        
        private int _sortOrder;
        
        private EntityCollection<UIPage> _uiPage;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIconChanging(string value);
        partial void OnIconChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UIGroup"/> class.
        /// </summary>
        public UIGroup()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Icon' value.
        /// </summary>
        [DataMember()]
        [StringLength(256)]
        public string Icon
        {
            get
            {
                return this._icon;
            }
            set
            {
                if ((this._icon != value))
                {
                    this.OnIconChanging(value);
                    this.RaiseDataMemberChanging("Icon");
                    this.ValidateProperty("Icon", value);
                    this._icon = value;
                    this.RaiseDataMemberChanged("Icon");
                    this.OnIconChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsActive' value.
        /// </summary>
        [DataMember()]
        public bool IsActive
        {
            get
            {
                return this._isActive;
            }
            set
            {
                if ((this._isActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.RaiseDataMemberChanging("IsActive");
                    this.ValidateProperty("IsActive", value);
                    this._isActive = value;
                    this.RaiseDataMemberChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SortOrder' value.
        /// </summary>
        [DataMember()]
        public int SortOrder
        {
            get
            {
                return this._sortOrder;
            }
            set
            {
                if ((this._sortOrder != value))
                {
                    this.OnSortOrderChanging(value);
                    this.RaiseDataMemberChanging("SortOrder");
                    this.ValidateProperty("SortOrder", value);
                    this._sortOrder = value;
                    this.RaiseDataMemberChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="UIPage"/> entity instances.
        /// </summary>
        [Association("UIGroup_UIPage", "Id", "UIGroupId")]
        [XmlIgnore()]
        public EntityCollection<UIPage> UIPage
        {
            get
            {
                if ((this._uiPage == null))
                {
                    this._uiPage = new EntityCollection<UIPage>(this, "UIPage", this.FilterUIPage, this.AttachUIPage, this.DetachUIPage);
                }
                return this._uiPage;
            }
        }
        
        private void AttachUIPage(UIPage entity)
        {
            entity.UIGroup = this;
        }
        
        private void DetachUIPage(UIPage entity)
        {
            entity.UIGroup = null;
        }
        
        private bool FilterUIPage(UIPage entity)
        {
            return (entity.UIGroupId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'UIPage' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class UIPage : Entity
    {
        
        private string _icon;
        
        private int _id;
        
        private bool _isActive;
        
        private string _name;
        
        private string _navigationURL;
        
        private EntityCollection<RoleAccess> _roleAccess;
        
        private int _sortOrder;
        
        private EntityRef<UIGroup> _uiGroup;
        
        private int _uiGroupId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIconChanging(string value);
        partial void OnIconChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNavigationURLChanging(string value);
        partial void OnNavigationURLChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        partial void OnUIGroupIdChanging(int value);
        partial void OnUIGroupIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UIPage"/> class.
        /// </summary>
        public UIPage()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Icon' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Icon
        {
            get
            {
                return this._icon;
            }
            set
            {
                if ((this._icon != value))
                {
                    this.OnIconChanging(value);
                    this.RaiseDataMemberChanging("Icon");
                    this.ValidateProperty("Icon", value);
                    this._icon = value;
                    this.RaiseDataMemberChanged("Icon");
                    this.OnIconChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsActive' value.
        /// </summary>
        [DataMember()]
        public bool IsActive
        {
            get
            {
                return this._isActive;
            }
            set
            {
                if ((this._isActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.RaiseDataMemberChanging("IsActive");
                    this.ValidateProperty("IsActive", value);
                    this._isActive = value;
                    this.RaiseDataMemberChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NavigationURL' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string NavigationURL
        {
            get
            {
                return this._navigationURL;
            }
            set
            {
                if ((this._navigationURL != value))
                {
                    this.OnNavigationURLChanging(value);
                    this.RaiseDataMemberChanging("NavigationURL");
                    this.ValidateProperty("NavigationURL", value);
                    this._navigationURL = value;
                    this.RaiseDataMemberChanged("NavigationURL");
                    this.OnNavigationURLChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RoleAccess"/> entity instances.
        /// </summary>
        [Association("UIPage_RoleAccess", "Id", "UIPageId")]
        [XmlIgnore()]
        public EntityCollection<RoleAccess> RoleAccess
        {
            get
            {
                if ((this._roleAccess == null))
                {
                    this._roleAccess = new EntityCollection<RoleAccess>(this, "RoleAccess", this.FilterRoleAccess, this.AttachRoleAccess, this.DetachRoleAccess);
                }
                return this._roleAccess;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SortOrder' value.
        /// </summary>
        [DataMember()]
        public int SortOrder
        {
            get
            {
                return this._sortOrder;
            }
            set
            {
                if ((this._sortOrder != value))
                {
                    this.OnSortOrderChanging(value);
                    this.RaiseDataMemberChanging("SortOrder");
                    this.ValidateProperty("SortOrder", value);
                    this._sortOrder = value;
                    this.RaiseDataMemberChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="UIGroup"/> entity.
        /// </summary>
        [Association("UIGroup_UIPage", "UIGroupId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public UIGroup UIGroup
        {
            get
            {
                if ((this._uiGroup == null))
                {
                    this._uiGroup = new EntityRef<UIGroup>(this, "UIGroup", this.FilterUIGroup);
                }
                return this._uiGroup.Entity;
            }
            set
            {
                UIGroup previous = this.UIGroup;
                if ((previous != value))
                {
                    this.ValidateProperty("UIGroup", value);
                    if ((previous != null))
                    {
                        this._uiGroup.Entity = null;
                        previous.UIPage.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UIGroupId = value.Id;
                    }
                    else
                    {
                        this.UIGroupId = default(int);
                    }
                    this._uiGroup.Entity = value;
                    if ((value != null))
                    {
                        value.UIPage.Add(this);
                    }
                    this.RaisePropertyChanged("UIGroup");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UIGroupId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int UIGroupId
        {
            get
            {
                return this._uiGroupId;
            }
            set
            {
                if ((this._uiGroupId != value))
                {
                    this.OnUIGroupIdChanging(value);
                    this.RaiseDataMemberChanging("UIGroupId");
                    this.ValidateProperty("UIGroupId", value);
                    this._uiGroupId = value;
                    this.RaiseDataMemberChanged("UIGroupId");
                    this.OnUIGroupIdChanged();
                }
            }
        }
        
        private void AttachRoleAccess(RoleAccess entity)
        {
            entity.UIPage = this;
        }
        
        private void DetachRoleAccess(RoleAccess entity)
        {
            entity.UIPage = null;
        }
        
        private bool FilterRoleAccess(RoleAccess entity)
        {
            return (entity.UIPageId == this.Id);
        }
        
        private bool FilterUIGroup(UIGroup entity)
        {
            return (entity.Id == this.UIGroupId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Unit' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class Unit : Entity
    {
        
        private string _code;
        
        private string _name;
        
        private string _pinYin;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPinYinChanging(string value);
        partial void OnPinYinChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Unit"/> class.
        /// </summary>
        public Unit()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(16)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PinYin' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public string PinYin
        {
            get
            {
                return this._pinYin;
            }
            set
            {
                if ((this._pinYin != value))
                {
                    this.OnPinYinChanging(value);
                    this.RaiseDataMemberChanging("PinYin");
                    this.ValidateProperty("PinYin", value);
                    this._pinYin = value;
                    this.RaiseDataMemberChanged("PinYin");
                    this.OnPinYinChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class User : Entity
    {
        
        private string _alias;
        
        private string _comment;
        
        private DateTime _createdDate;
        
        private string _email;
        
        private int _id;
        
        private bool _isActived;
        
        private Nullable<DateTime> _lastLoginDate;
        
        private Nullable<DateTime> _lastPasswordChangedDate;
        
        private string _mobile;
        
        private int _modifiedByUserId;
        
        private DateTime _modifiedDate;
        
        private string _name;
        
        private string _password;
        
        private EntityRef<UserGroup> _userGroup;
        
        private int _userGroupId;
        
        private EntityCollection<UserRole> _userRole;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAliasChanging(string value);
        partial void OnAliasChanged();
        partial void OnCommentChanging(string value);
        partial void OnCommentChanged();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIsActivedChanging(bool value);
        partial void OnIsActivedChanged();
        partial void OnLastLoginDateChanging(Nullable<DateTime> value);
        partial void OnLastLoginDateChanged();
        partial void OnLastPasswordChangedDateChanging(Nullable<DateTime> value);
        partial void OnLastPasswordChangedDateChanged();
        partial void OnMobileChanging(string value);
        partial void OnMobileChanged();
        partial void OnModifiedByUserIdChanging(int value);
        partial void OnModifiedByUserIdChanged();
        partial void OnModifiedDateChanging(DateTime value);
        partial void OnModifiedDateChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnUserGroupIdChanging(int value);
        partial void OnUserGroupIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Alias' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Alias
        {
            get
            {
                return this._alias;
            }
            set
            {
                if ((this._alias != value))
                {
                    this.OnAliasChanging(value);
                    this.RaiseDataMemberChanging("Alias");
                    this.ValidateProperty("Alias", value);
                    this._alias = value;
                    this.RaiseDataMemberChanged("Alias");
                    this.OnAliasChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Comment' value.
        /// </summary>
        [DataMember()]
        [StringLength(512)]
        public string Comment
        {
            get
            {
                return this._comment;
            }
            set
            {
                if ((this._comment != value))
                {
                    this.OnCommentChanging(value);
                    this.RaiseDataMemberChanging("Comment");
                    this.ValidateProperty("Comment", value);
                    this._comment = value;
                    this.RaiseDataMemberChanged("Comment");
                    this.OnCommentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreatedDate' value.
        /// </summary>
        [DataMember()]
        public DateTime CreatedDate
        {
            get
            {
                return this._createdDate;
            }
            set
            {
                if ((this._createdDate != value))
                {
                    this.OnCreatedDateChanging(value);
                    this.RaiseDataMemberChanging("CreatedDate");
                    this.ValidateProperty("CreatedDate", value);
                    this._createdDate = value;
                    this.RaiseDataMemberChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [StringLength(256)]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsActived' value.
        /// </summary>
        [DataMember()]
        public bool IsActived
        {
            get
            {
                return this._isActived;
            }
            set
            {
                if ((this._isActived != value))
                {
                    this.OnIsActivedChanging(value);
                    this.RaiseDataMemberChanging("IsActived");
                    this.ValidateProperty("IsActived", value);
                    this._isActived = value;
                    this.RaiseDataMemberChanged("IsActived");
                    this.OnIsActivedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastLoginDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> LastLoginDate
        {
            get
            {
                return this._lastLoginDate;
            }
            set
            {
                if ((this._lastLoginDate != value))
                {
                    this.OnLastLoginDateChanging(value);
                    this.RaiseDataMemberChanging("LastLoginDate");
                    this.ValidateProperty("LastLoginDate", value);
                    this._lastLoginDate = value;
                    this.RaiseDataMemberChanged("LastLoginDate");
                    this.OnLastLoginDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastPasswordChangedDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> LastPasswordChangedDate
        {
            get
            {
                return this._lastPasswordChangedDate;
            }
            set
            {
                if ((this._lastPasswordChangedDate != value))
                {
                    this.OnLastPasswordChangedDateChanging(value);
                    this.RaiseDataMemberChanging("LastPasswordChangedDate");
                    this.ValidateProperty("LastPasswordChangedDate", value);
                    this._lastPasswordChangedDate = value;
                    this.RaiseDataMemberChanged("LastPasswordChangedDate");
                    this.OnLastPasswordChangedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Mobile' value.
        /// </summary>
        [DataMember()]
        [StringLength(16)]
        public string Mobile
        {
            get
            {
                return this._mobile;
            }
            set
            {
                if ((this._mobile != value))
                {
                    this.OnMobileChanging(value);
                    this.RaiseDataMemberChanging("Mobile");
                    this.ValidateProperty("Mobile", value);
                    this._mobile = value;
                    this.RaiseDataMemberChanged("Mobile");
                    this.OnMobileChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ModifiedByUserId' value.
        /// </summary>
        [DataMember()]
        public int ModifiedByUserId
        {
            get
            {
                return this._modifiedByUserId;
            }
            set
            {
                if ((this._modifiedByUserId != value))
                {
                    this.OnModifiedByUserIdChanging(value);
                    this.RaiseDataMemberChanging("ModifiedByUserId");
                    this.ValidateProperty("ModifiedByUserId", value);
                    this._modifiedByUserId = value;
                    this.RaiseDataMemberChanged("ModifiedByUserId");
                    this.OnModifiedByUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ModifiedDate' value.
        /// </summary>
        [DataMember()]
        public DateTime ModifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                if ((this._modifiedDate != value))
                {
                    this.OnModifiedDateChanging(value);
                    this.RaiseDataMemberChanging("ModifiedDate");
                    this.ValidateProperty("ModifiedDate", value);
                    this._modifiedDate = value;
                    this.RaiseDataMemberChanged("ModifiedDate");
                    this.OnModifiedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Password' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(128)]
        public string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnPasswordChanging(value);
                    this.RaiseDataMemberChanging("Password");
                    this.ValidateProperty("Password", value);
                    this._password = value;
                    this.RaiseDataMemberChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="UserGroup"/> entity.
        /// </summary>
        [Association("UserGroup_User", "UserGroupId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public UserGroup UserGroup
        {
            get
            {
                if ((this._userGroup == null))
                {
                    this._userGroup = new EntityRef<UserGroup>(this, "UserGroup", this.FilterUserGroup);
                }
                return this._userGroup.Entity;
            }
            set
            {
                UserGroup previous = this.UserGroup;
                if ((previous != value))
                {
                    this.ValidateProperty("UserGroup", value);
                    if ((previous != null))
                    {
                        this._userGroup.Entity = null;
                        previous.User.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UserGroupId = value.Id;
                    }
                    else
                    {
                        this.UserGroupId = default(int);
                    }
                    this._userGroup.Entity = value;
                    if ((value != null))
                    {
                        value.User.Add(this);
                    }
                    this.RaisePropertyChanged("UserGroup");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserGroupId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int UserGroupId
        {
            get
            {
                return this._userGroupId;
            }
            set
            {
                if ((this._userGroupId != value))
                {
                    this.OnUserGroupIdChanging(value);
                    this.RaiseDataMemberChanging("UserGroupId");
                    this.ValidateProperty("UserGroupId", value);
                    this._userGroupId = value;
                    this.RaiseDataMemberChanged("UserGroupId");
                    this.OnUserGroupIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="UserRole"/> entity instances.
        /// </summary>
        [Association("User_UserRole", "Id", "UserId")]
        [XmlIgnore()]
        public EntityCollection<UserRole> UserRole
        {
            get
            {
                if ((this._userRole == null))
                {
                    this._userRole = new EntityCollection<UserRole>(this, "UserRole", this.FilterUserRole, this.AttachUserRole, this.DetachUserRole);
                }
                return this._userRole;
            }
        }
        
        private bool FilterUserGroup(UserGroup entity)
        {
            return (entity.Id == this.UserGroupId);
        }
        
        private void AttachUserRole(UserRole entity)
        {
            entity.User = this;
        }
        
        private void DetachUserRole(UserRole entity)
        {
            entity.User = null;
        }
        
        private bool FilterUserRole(UserRole entity)
        {
            return (entity.UserId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'UserGroup' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class UserGroup : Entity
    {
        
        private DateTime _createdDate;
        
        private string _groupName;
        
        private int _id;
        
        private int _modifiedBy;
        
        private DateTime _modifiedDate;
        
        private EntityCollection<User> _user;
        
        private EntityCollection<UserGroupCustomer> _userGroupCustomer;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnGroupNameChanging(string value);
        partial void OnGroupNameChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnModifiedByChanging(int value);
        partial void OnModifiedByChanged();
        partial void OnModifiedDateChanging(DateTime value);
        partial void OnModifiedDateChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserGroup"/> class.
        /// </summary>
        public UserGroup()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CreatedDate' value.
        /// </summary>
        [DataMember()]
        public DateTime CreatedDate
        {
            get
            {
                return this._createdDate;
            }
            set
            {
                if ((this._createdDate != value))
                {
                    this.OnCreatedDateChanging(value);
                    this.RaiseDataMemberChanging("CreatedDate");
                    this.ValidateProperty("CreatedDate", value);
                    this._createdDate = value;
                    this.RaiseDataMemberChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GroupName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(20)]
        public string GroupName
        {
            get
            {
                return this._groupName;
            }
            set
            {
                if ((this._groupName != value))
                {
                    this.OnGroupNameChanging(value);
                    this.RaiseDataMemberChanging("GroupName");
                    this.ValidateProperty("GroupName", value);
                    this._groupName = value;
                    this.RaiseDataMemberChanged("GroupName");
                    this.OnGroupNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ModifiedBy' value.
        /// </summary>
        [DataMember()]
        public int ModifiedBy
        {
            get
            {
                return this._modifiedBy;
            }
            set
            {
                if ((this._modifiedBy != value))
                {
                    this.OnModifiedByChanging(value);
                    this.RaiseDataMemberChanging("ModifiedBy");
                    this.ValidateProperty("ModifiedBy", value);
                    this._modifiedBy = value;
                    this.RaiseDataMemberChanged("ModifiedBy");
                    this.OnModifiedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ModifiedDate' value.
        /// </summary>
        [DataMember()]
        public DateTime ModifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                if ((this._modifiedDate != value))
                {
                    this.OnModifiedDateChanging(value);
                    this.RaiseDataMemberChanging("ModifiedDate");
                    this.ValidateProperty("ModifiedDate", value);
                    this._modifiedDate = value;
                    this.RaiseDataMemberChanged("ModifiedDate");
                    this.OnModifiedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="User"/> entity instances.
        /// </summary>
        [Association("UserGroup_User", "Id", "UserGroupId")]
        [XmlIgnore()]
        public EntityCollection<User> User
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityCollection<User>(this, "User", this.FilterUser, this.AttachUser, this.DetachUser);
                }
                return this._user;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="UserGroupCustomer"/> entity instances.
        /// </summary>
        [Association("UserGroup_UserGroupCustomer", "Id", "UserGroupId")]
        [XmlIgnore()]
        public EntityCollection<UserGroupCustomer> UserGroupCustomer
        {
            get
            {
                if ((this._userGroupCustomer == null))
                {
                    this._userGroupCustomer = new EntityCollection<UserGroupCustomer>(this, "UserGroupCustomer", this.FilterUserGroupCustomer, this.AttachUserGroupCustomer, this.DetachUserGroupCustomer);
                }
                return this._userGroupCustomer;
            }
        }
        
        private void AttachUser(User entity)
        {
            entity.UserGroup = this;
        }
        
        private void DetachUser(User entity)
        {
            entity.UserGroup = null;
        }
        
        private bool FilterUser(User entity)
        {
            return (entity.UserGroupId == this.Id);
        }
        
        private void AttachUserGroupCustomer(UserGroupCustomer entity)
        {
            entity.UserGroup = this;
        }
        
        private void DetachUserGroupCustomer(UserGroupCustomer entity)
        {
            entity.UserGroup = null;
        }
        
        private bool FilterUserGroupCustomer(UserGroupCustomer entity)
        {
            return (entity.UserGroupId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'UserGroupCustomer' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class UserGroupCustomer : Entity
    {
        
        private EntityRef<Customer> _customer;
        
        private int _customerId;
        
        private int _id;
        
        private EntityRef<UserGroup> _userGroup;
        
        private int _userGroupId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCustomerIdChanging(int value);
        partial void OnCustomerIdChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnUserGroupIdChanging(int value);
        partial void OnUserGroupIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserGroupCustomer"/> class.
        /// </summary>
        public UserGroupCustomer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Customer"/> entity.
        /// </summary>
        [Association("Customer_UserGroupCustomer", "CustomerId", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public Customer Customer
        {
            get
            {
                if ((this._customer == null))
                {
                    this._customer = new EntityRef<Customer>(this, "Customer", this.FilterCustomer);
                }
                return this._customer.Entity;
            }
            set
            {
                Customer previous = this.Customer;
                if ((previous != value))
                {
                    this.ValidateProperty("Customer", value);
                    if ((previous != null))
                    {
                        this._customer.Entity = null;
                        previous.UserGroupCustomer.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CustomerId = value.ID;
                    }
                    else
                    {
                        this.CustomerId = default(int);
                    }
                    this._customer.Entity = value;
                    if ((value != null))
                    {
                        value.UserGroupCustomer.Add(this);
                    }
                    this.RaisePropertyChanged("Customer");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int CustomerId
        {
            get
            {
                return this._customerId;
            }
            set
            {
                if ((this._customerId != value))
                {
                    this.OnCustomerIdChanging(value);
                    this.RaiseDataMemberChanging("CustomerId");
                    this.ValidateProperty("CustomerId", value);
                    this._customerId = value;
                    this.RaiseDataMemberChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.RaiseDataMemberChanging("ID");
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="UserGroup"/> entity.
        /// </summary>
        [Association("UserGroup_UserGroupCustomer", "UserGroupId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public UserGroup UserGroup
        {
            get
            {
                if ((this._userGroup == null))
                {
                    this._userGroup = new EntityRef<UserGroup>(this, "UserGroup", this.FilterUserGroup);
                }
                return this._userGroup.Entity;
            }
            set
            {
                UserGroup previous = this.UserGroup;
                if ((previous != value))
                {
                    this.ValidateProperty("UserGroup", value);
                    if ((previous != null))
                    {
                        this._userGroup.Entity = null;
                        previous.UserGroupCustomer.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UserGroupId = value.Id;
                    }
                    else
                    {
                        this.UserGroupId = default(int);
                    }
                    this._userGroup.Entity = value;
                    if ((value != null))
                    {
                        value.UserGroupCustomer.Add(this);
                    }
                    this.RaisePropertyChanged("UserGroup");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserGroupId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int UserGroupId
        {
            get
            {
                return this._userGroupId;
            }
            set
            {
                if ((this._userGroupId != value))
                {
                    this.OnUserGroupIdChanging(value);
                    this.RaiseDataMemberChanging("UserGroupId");
                    this.ValidateProperty("UserGroupId", value);
                    this._userGroupId = value;
                    this.RaiseDataMemberChanged("UserGroupId");
                    this.OnUserGroupIdChanged();
                }
            }
        }
        
        private bool FilterCustomer(Customer entity)
        {
            return (entity.ID == this.CustomerId);
        }
        
        private bool FilterUserGroup(UserGroup entity)
        {
            return (entity.Id == this.UserGroupId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._customerId, this._userGroupId);
        }
    }
    
    /// <summary>
    /// The 'UserRole' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class UserRole : Entity
    {
        
        private int _id;
        
        private EntityRef<Role> _role;
        
        private int _roleId;
        
        private EntityRef<User> _user;
        
        private int _userId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnRoleIdChanging(int value);
        partial void OnRoleIdChanged();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRole"/> class.
        /// </summary>
        public UserRole()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.RaiseDataMemberChanging("ID");
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Role"/> entity.
        /// </summary>
        [Association("Role_UserRole", "RoleId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Role Role
        {
            get
            {
                if ((this._role == null))
                {
                    this._role = new EntityRef<Role>(this, "Role", this.FilterRole);
                }
                return this._role.Entity;
            }
            set
            {
                Role previous = this.Role;
                if ((previous != value))
                {
                    this.ValidateProperty("Role", value);
                    if ((previous != null))
                    {
                        this._role.Entity = null;
                        previous.UserRole.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RoleId = value.Id;
                    }
                    else
                    {
                        this.RoleId = default(int);
                    }
                    this._role.Entity = value;
                    if ((value != null))
                    {
                        value.UserRole.Add(this);
                    }
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RoleId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int RoleId
        {
            get
            {
                return this._roleId;
            }
            set
            {
                if ((this._roleId != value))
                {
                    this.OnRoleIdChanging(value);
                    this.RaiseDataMemberChanging("RoleId");
                    this.ValidateProperty("RoleId", value);
                    this._roleId = value;
                    this.RaiseDataMemberChanged("RoleId");
                    this.OnRoleIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="User"/> entity.
        /// </summary>
        [Association("User_UserRole", "UserId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public User User
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<User>(this, "User", this.FilterUser);
                }
                return this._user.Entity;
            }
            set
            {
                User previous = this.User;
                if ((previous != value))
                {
                    this.ValidateProperty("User", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.UserRole.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UserId = value.Id;
                    }
                    else
                    {
                        this.UserId = default(int);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.UserRole.Add(this);
                    }
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.RaiseDataMemberChanging("UserId");
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
        
        private bool FilterRole(Role entity)
        {
            return (entity.Id == this.RoleId);
        }
        
        private bool FilterUser(User entity)
        {
            return (entity.Id == this.UserId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._roleId, this._userId);
        }
    }
    
    /// <summary>
    /// The 'Wrap' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class Wrap : Entity
    {
        
        private string _code;
        
        private string _name;
        
        private string _pinYin;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPinYinChanging(string value);
        partial void OnPinYinChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Wrap"/> class.
        /// </summary>
        public Wrap()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(16)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PinYin' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public string PinYin
        {
            get
            {
                return this._pinYin;
            }
            set
            {
                if ((this._pinYin != value))
                {
                    this.OnPinYinChanging(value);
                    this.RaiseDataMemberChanging("PinYin");
                    this.ValidateProperty("PinYin", value);
                    this._pinYin = value;
                    this.RaiseDataMemberChanged("PinYin");
                    this.OnPinYinChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'YSExaminationData' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProTemplate.Web")]
    public sealed partial class YSExaminationData : Entity
    {
        
        private string _approvalNumber;
        
        private string _billNumber;
        
        private string _conveyance;
        
        private string _customerName;
        
        private string _declarationNumber;
        
        private string _declarationStatus;
        
        private int _id;
        
        private string _voyageNumber;
        
        private string _ysDate;
        
        private string _ysStatus;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnApprovalNumberChanging(string value);
        partial void OnApprovalNumberChanged();
        partial void OnBillNumberChanging(string value);
        partial void OnBillNumberChanged();
        partial void OnConveyanceChanging(string value);
        partial void OnConveyanceChanged();
        partial void OnCustomerNameChanging(string value);
        partial void OnCustomerNameChanged();
        partial void OnDeclarationNumberChanging(string value);
        partial void OnDeclarationNumberChanged();
        partial void OnDeclarationStatusChanging(string value);
        partial void OnDeclarationStatusChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnVoyageNumberChanging(string value);
        partial void OnVoyageNumberChanged();
        partial void OnYSDateChanging(string value);
        partial void OnYSDateChanged();
        partial void OnYSStatusChanging(string value);
        partial void OnYSStatusChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="YSExaminationData"/> class.
        /// </summary>
        public YSExaminationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ApprovalNumber' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string ApprovalNumber
        {
            get
            {
                return this._approvalNumber;
            }
            set
            {
                if ((this._approvalNumber != value))
                {
                    this.OnApprovalNumberChanging(value);
                    this.RaiseDataMemberChanging("ApprovalNumber");
                    this.ValidateProperty("ApprovalNumber", value);
                    this._approvalNumber = value;
                    this.RaiseDataMemberChanged("ApprovalNumber");
                    this.OnApprovalNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BillNumber' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string BillNumber
        {
            get
            {
                return this._billNumber;
            }
            set
            {
                if ((this._billNumber != value))
                {
                    this.OnBillNumberChanging(value);
                    this.RaiseDataMemberChanging("BillNumber");
                    this.ValidateProperty("BillNumber", value);
                    this._billNumber = value;
                    this.RaiseDataMemberChanged("BillNumber");
                    this.OnBillNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Conveyance' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Conveyance
        {
            get
            {
                return this._conveyance;
            }
            set
            {
                if ((this._conveyance != value))
                {
                    this.OnConveyanceChanging(value);
                    this.RaiseDataMemberChanging("Conveyance");
                    this.ValidateProperty("Conveyance", value);
                    this._conveyance = value;
                    this.RaiseDataMemberChanged("Conveyance");
                    this.OnConveyanceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string CustomerName
        {
            get
            {
                return this._customerName;
            }
            set
            {
                if ((this._customerName != value))
                {
                    this.OnCustomerNameChanging(value);
                    this.RaiseDataMemberChanging("CustomerName");
                    this.ValidateProperty("CustomerName", value);
                    this._customerName = value;
                    this.RaiseDataMemberChanged("CustomerName");
                    this.OnCustomerNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationNumber' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string DeclarationNumber
        {
            get
            {
                return this._declarationNumber;
            }
            set
            {
                if ((this._declarationNumber != value))
                {
                    this.OnDeclarationNumberChanging(value);
                    this.RaiseDataMemberChanging("DeclarationNumber");
                    this.ValidateProperty("DeclarationNumber", value);
                    this._declarationNumber = value;
                    this.RaiseDataMemberChanged("DeclarationNumber");
                    this.OnDeclarationNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeclarationStatus' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string DeclarationStatus
        {
            get
            {
                return this._declarationStatus;
            }
            set
            {
                if ((this._declarationStatus != value))
                {
                    this.OnDeclarationStatusChanging(value);
                    this.RaiseDataMemberChanging("DeclarationStatus");
                    this.ValidateProperty("DeclarationStatus", value);
                    this._declarationStatus = value;
                    this.RaiseDataMemberChanged("DeclarationStatus");
                    this.OnDeclarationStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VoyageNumber' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string VoyageNumber
        {
            get
            {
                return this._voyageNumber;
            }
            set
            {
                if ((this._voyageNumber != value))
                {
                    this.OnVoyageNumberChanging(value);
                    this.RaiseDataMemberChanging("VoyageNumber");
                    this.ValidateProperty("VoyageNumber", value);
                    this._voyageNumber = value;
                    this.RaiseDataMemberChanged("VoyageNumber");
                    this.OnVoyageNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'YSDate' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string YSDate
        {
            get
            {
                return this._ysDate;
            }
            set
            {
                if ((this._ysDate != value))
                {
                    this.OnYSDateChanging(value);
                    this.RaiseDataMemberChanging("YSDate");
                    this.ValidateProperty("YSDate", value);
                    this._ysDate = value;
                    this.RaiseDataMemberChanged("YSDate");
                    this.OnYSDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'YSStatus' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string YSStatus
        {
            get
            {
                return this._ysStatus;
            }
            set
            {
                if ((this._ysStatus != value))
                {
                    this.OnYSStatusChanging(value);
                    this.RaiseDataMemberChanging("YSStatus");
                    this.ValidateProperty("YSStatus", value);
                    this._ysStatus = value;
                    this.RaiseDataMemberChanged("YSStatus");
                    this.OnYSStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
}
namespace ProTemplate.Web.DMServices
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using ProTemplate.Web;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'CustomsAtomService' DomainService.
    /// </summary>
    public sealed partial class CustomsAtomContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomsAtomContext"/> class.
        /// </summary>
        public CustomsAtomContext() : 
                this(new WebDomainClient<ICustomsAtomServiceContract>(new Uri("ProTemplate-Web-DMServices-CustomsAtomService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomsAtomContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The CustomsAtomService service URI.</param>
        public CustomsAtomContext(Uri serviceUri) : 
                this(new WebDomainClient<ICustomsAtomServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomsAtomContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public CustomsAtomContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="DeclarationPortCheckResult"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<DeclarationPortCheckResult> DeclarationPortCheckResults
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DeclarationPortCheckResult>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="DoubleCheckDeclarationVarifyResult"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<DoubleCheckDeclarationVarifyResult> DoubleCheckDeclarationVarifyResults
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DoubleCheckDeclarationVarifyResult>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="GetAllDeclarationByReceiveDateResult"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<GetAllDeclarationByReceiveDateResult> GetAllDeclarationByReceiveDateResults
        {
            get
            {
                return base.EntityContainer.GetEntitySet<GetAllDeclarationByReceiveDateResult>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="GetAllFinancialDeclaration"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<GetAllFinancialDeclaration> GetAllFinancialDeclarations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<GetAllFinancialDeclaration>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Boss"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<Boss> Bosses
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Boss>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Corporation"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<Corporation> Corporations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Corporation>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Country"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<Country> Countries
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Country>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Currency"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<Currency> Currencies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Currency>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Customer"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<Customer> Customers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Customer>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="CustomerFeeSetting"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<CustomerFeeSetting> CustomerFeeSettings
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CustomerFeeSetting>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Customhouse"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<Customhouse> Customhouses
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Customhouse>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="CustomsUser"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<CustomsUser> CustomsUsers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CustomsUser>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Declaration"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<Declaration> Declarations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Declaration>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="DeclarationContainer"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<DeclarationContainer> DeclarationContainers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DeclarationContainer>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="DeclarationDocument"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<DeclarationDocument> DeclarationDocuments
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DeclarationDocument>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="DeclarationImage"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<DeclarationImage> DeclarationImages
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DeclarationImage>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="DeclarationItem"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<DeclarationItem> DeclarationItems
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DeclarationItem>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="District"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<District> Districts
        {
            get
            {
                return base.EntityContainer.GetEntitySet<District>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Document"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<Document> Documents
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Document>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="DocumentType"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<DocumentType> DocumentTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DocumentType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="DoubleCheckDeclaration"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<DoubleCheckDeclaration> DoubleCheckDeclarations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DoubleCheckDeclaration>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="DoubleCheckDeclarationItem"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<DoubleCheckDeclarationItem> DoubleCheckDeclarationItems
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DoubleCheckDeclarationItem>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Duty"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<Duty> Duties
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Duty>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Examination"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<Examination> Examinations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Examination>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="FeeMark"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<FeeMark> FeeMarks
        {
            get
            {
                return base.EntityContainer.GetEntitySet<FeeMark>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="FeeType"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<FeeType> FeeTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<FeeType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="FinancialExportDeclaration"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<FinancialExportDeclaration> FinancialExportDeclarations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<FinancialExportDeclaration>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="HSCodeDictionary"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<HSCodeDictionary> HSCodeDictionaries
        {
            get
            {
                return base.EntityContainer.GetEntitySet<HSCodeDictionary>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Levy"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<Levy> Levies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Levy>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="LoginHistory"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<LoginHistory> LoginHistories
        {
            get
            {
                return base.EntityContainer.GetEntitySet<LoginHistory>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MachineNameIPMapping"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<MachineNameIPMapping> MachineNameIPMappings
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MachineNameIPMapping>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Pay"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<Pay> Pays
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Pay>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Port"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<Port> Ports
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Port>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Purpose"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<Purpose> Purposes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Purpose>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Role"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<Role> Roles
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Role>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="RoleAccess"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<RoleAccess> RoleAccesses
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RoleAccess>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Setting"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<Setting> Settings
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Setting>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Trade"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<Trade> Trades
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Trade>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Transaction"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<Transaction> Transactions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Transaction>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Transport"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<Transport> Transports
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Transport>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UIGroup"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<UIGroup> UIGroups
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UIGroup>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UIPage"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<UIPage> UIPages
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UIPage>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Unit"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<Unit> Units
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Unit>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserGroup"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<UserGroup> UserGroups
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserGroup>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserGroupCustomer"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<UserGroupCustomer> UserGroupCustomers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserGroupCustomer>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserRole"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<UserRole> UserRoles
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserRole>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Wrap"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<Wrap> Wraps
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Wrap>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="YSExaminationData"/> entity instances that have been loaded into this <see cref="CustomsAtomContext"/> instance.
        /// </summary>
        public EntitySet<YSExaminationData> YSExaminationDatas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<YSExaminationData>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DeclarationPortCheckResult"/> entity instances using the 'CheckContainerAdmissionStatusResults' query.
        /// </summary>
        /// <param name="declarationNumbers">The value for the 'declarationNumbers' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DeclarationPortCheckResult"/> entity instances.</returns>
        public EntityQuery<DeclarationPortCheckResult> CheckContainerAdmissionStatusResultsQuery(string declarationNumbers)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("declarationNumbers", declarationNumbers);
            this.ValidateMethod("CheckContainerAdmissionStatusResultsQuery", parameters);
            return base.CreateQuery<DeclarationPortCheckResult>("CheckContainerAdmissionStatusResults", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DeclarationPortCheckResult"/> entity instances using the 'CheckLandingResults' query.
        /// </summary>
        /// <param name="declarationNumbers">The value for the 'declarationNumbers' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DeclarationPortCheckResult"/> entity instances.</returns>
        public EntityQuery<DeclarationPortCheckResult> CheckLandingResultsQuery(string declarationNumbers)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("declarationNumbers", declarationNumbers);
            this.ValidateMethod("CheckLandingResultsQuery", parameters);
            return base.CreateQuery<DeclarationPortCheckResult>("CheckLandingResults", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DeclarationPortCheckResult"/> entity instances using the 'CheckLeaveDockDateResults' query.
        /// </summary>
        /// <param name="declarationNumbers">The value for the 'declarationNumbers' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DeclarationPortCheckResult"/> entity instances.</returns>
        public EntityQuery<DeclarationPortCheckResult> CheckLeaveDockDateResultsQuery(string declarationNumbers)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("declarationNumbers", declarationNumbers);
            this.ValidateMethod("CheckLeaveDockDateResultsQuery", parameters);
            return base.CreateQuery<DeclarationPortCheckResult>("CheckLeaveDockDateResults", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DoubleCheckDeclarationVarifyResult"/> entity instances using the 'DoubleCheckDeclarationVarifyResults' query.
        /// </summary>
        /// <param name="data">The value for the 'data' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DoubleCheckDeclarationVarifyResult"/> entity instances.</returns>
        public EntityQuery<DoubleCheckDeclarationVarifyResult> DoubleCheckDeclarationVarifyResultsQuery(string data)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("data", data);
            this.ValidateMethod("DoubleCheckDeclarationVarifyResultsQuery", parameters);
            return base.CreateQuery<DoubleCheckDeclarationVarifyResult>("DoubleCheckDeclarationVarifyResults", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="GetAllDeclarationByReceiveDateResult"/> entity instances using the 'GetAllDeclarationByDeclarationCodeResultsFunc' query.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of the query.</param>
        /// <param name="codes">The value for the 'codes' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="GetAllDeclarationByReceiveDateResult"/> entity instances.</returns>
        public EntityQuery<GetAllDeclarationByReceiveDateResult> GetAllDeclarationByDeclarationCodeResultsFuncQuery(int userID, string codes)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            parameters.Add("codes", codes);
            this.ValidateMethod("GetAllDeclarationByDeclarationCodeResultsFuncQuery", parameters);
            return base.CreateQuery<GetAllDeclarationByReceiveDateResult>("GetAllDeclarationByDeclarationCodeResultsFunc", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="GetAllDeclarationByReceiveDateResult"/> entity instances using the 'GetAllDeclarationByReceiveDateResultsFunc' query.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of the query.</param>
        /// <param name="condition">The value for the 'condition' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="GetAllDeclarationByReceiveDateResult"/> entity instances.</returns>
        public EntityQuery<GetAllDeclarationByReceiveDateResult> GetAllDeclarationByReceiveDateResultsFuncQuery(int userID, string condition)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            parameters.Add("condition", condition);
            this.ValidateMethod("GetAllDeclarationByReceiveDateResultsFuncQuery", parameters);
            return base.CreateQuery<GetAllDeclarationByReceiveDateResult>("GetAllDeclarationByReceiveDateResultsFunc", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="GetAllDeclarationByReceiveDateResult"/> entity instances using the 'GetAllDeclarationDuplicatedResultsFunc' query.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of the query.</param>
        /// <param name="condition">The value for the 'condition' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="GetAllDeclarationByReceiveDateResult"/> entity instances.</returns>
        public EntityQuery<GetAllDeclarationByReceiveDateResult> GetAllDeclarationDuplicatedResultsFuncQuery(int userID, string condition)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            parameters.Add("condition", condition);
            this.ValidateMethod("GetAllDeclarationDuplicatedResultsFuncQuery", parameters);
            return base.CreateQuery<GetAllDeclarationByReceiveDateResult>("GetAllDeclarationDuplicatedResultsFunc", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="GetAllFinancialDeclaration"/> entity instances using the 'GetAllFinancialExportDeclarationByDeclarationCodes' query.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of the query.</param>
        /// <param name="delcarationNums">The value for the 'delcarationNums' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="GetAllFinancialDeclaration"/> entity instances.</returns>
        public EntityQuery<GetAllFinancialDeclaration> GetAllFinancialExportDeclarationByDeclarationCodesQuery(int userID, string delcarationNums)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            parameters.Add("delcarationNums", delcarationNums);
            this.ValidateMethod("GetAllFinancialExportDeclarationByDeclarationCodesQuery", parameters);
            return base.CreateQuery<GetAllFinancialDeclaration>("GetAllFinancialExportDeclarationByDeclarationCodes", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="GetAllFinancialDeclaration"/> entity instances using the 'GetAllFinancialExportDeclarationByReceiveDate' query.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of the query.</param>
        /// <param name="condition">The value for the 'condition' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="GetAllFinancialDeclaration"/> entity instances.</returns>
        public EntityQuery<GetAllFinancialDeclaration> GetAllFinancialExportDeclarationByReceiveDateQuery(int userID, string condition)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            parameters.Add("condition", condition);
            this.ValidateMethod("GetAllFinancialExportDeclarationByReceiveDateQuery", parameters);
            return base.CreateQuery<GetAllFinancialDeclaration>("GetAllFinancialExportDeclarationByReceiveDate", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Boss"/> entity instances using the 'GetBoss' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Boss"/> entity instances.</returns>
        public EntityQuery<Boss> GetBossQuery()
        {
            this.ValidateMethod("GetBossQuery", null);
            return base.CreateQuery<Boss>("GetBoss", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Corporation"/> entity instances using the 'GetCorporation' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Corporation"/> entity instances.</returns>
        public EntityQuery<Corporation> GetCorporationQuery()
        {
            this.ValidateMethod("GetCorporationQuery", null);
            return base.CreateQuery<Corporation>("GetCorporation", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Country"/> entity instances using the 'GetCountry' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Country"/> entity instances.</returns>
        public EntityQuery<Country> GetCountryQuery()
        {
            this.ValidateMethod("GetCountryQuery", null);
            return base.CreateQuery<Country>("GetCountry", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Currency"/> entity instances using the 'GetCurrency' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Currency"/> entity instances.</returns>
        public EntityQuery<Currency> GetCurrencyQuery()
        {
            this.ValidateMethod("GetCurrencyQuery", null);
            return base.CreateQuery<Currency>("GetCurrency", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Customer"/> entity instances using the 'GetCustomer' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Customer"/> entity instances.</returns>
        public EntityQuery<Customer> GetCustomerQuery()
        {
            this.ValidateMethod("GetCustomerQuery", null);
            return base.CreateQuery<Customer>("GetCustomer", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CustomerFeeSetting"/> entity instances using the 'GetCustomerFeeSetting' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CustomerFeeSetting"/> entity instances.</returns>
        public EntityQuery<CustomerFeeSetting> GetCustomerFeeSettingQuery()
        {
            this.ValidateMethod("GetCustomerFeeSettingQuery", null);
            return base.CreateQuery<CustomerFeeSetting>("GetCustomerFeeSetting", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CustomerFeeSetting"/> entity instances using the 'GetCustomerFeeSettingByCustomerID' query.
        /// </summary>
        /// <param name="CustomerID">The value for the 'CustomerID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CustomerFeeSetting"/> entity instances.</returns>
        public EntityQuery<CustomerFeeSetting> GetCustomerFeeSettingByCustomerIDQuery(int CustomerID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("CustomerID", CustomerID);
            this.ValidateMethod("GetCustomerFeeSettingByCustomerIDQuery", parameters);
            return base.CreateQuery<CustomerFeeSetting>("GetCustomerFeeSettingByCustomerID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Customhouse"/> entity instances using the 'GetCustomhouse' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Customhouse"/> entity instances.</returns>
        public EntityQuery<Customhouse> GetCustomhouseQuery()
        {
            this.ValidateMethod("GetCustomhouseQuery", null);
            return base.CreateQuery<Customhouse>("GetCustomhouse", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CustomsUser"/> entity instances using the 'GetCustomsUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CustomsUser"/> entity instances.</returns>
        public EntityQuery<CustomsUser> GetCustomsUserQuery()
        {
            this.ValidateMethod("GetCustomsUserQuery", null);
            return base.CreateQuery<CustomsUser>("GetCustomsUser", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CustomsUser"/> entity instances using the 'GetCustomsUserWithScroe' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CustomsUser"/> entity instances.</returns>
        public EntityQuery<CustomsUser> GetCustomsUserWithScroeQuery()
        {
            this.ValidateMethod("GetCustomsUserWithScroeQuery", null);
            return base.CreateQuery<CustomsUser>("GetCustomsUserWithScroe", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Declaration"/> entity instances using the 'GetDeclaration' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Declaration"/> entity instances.</returns>
        public EntityQuery<Declaration> GetDeclarationQuery()
        {
            this.ValidateMethod("GetDeclarationQuery", null);
            return base.CreateQuery<Declaration>("GetDeclaration", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Declaration"/> entity instances using the 'GetDeclarationByID' query.
        /// </summary>
        /// <param name="declarationID">The value for the 'declarationID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Declaration"/> entity instances.</returns>
        public EntityQuery<Declaration> GetDeclarationByIDQuery(int declarationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("declarationID", declarationID);
            this.ValidateMethod("GetDeclarationByIDQuery", parameters);
            return base.CreateQuery<Declaration>("GetDeclarationByID", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Declaration"/> entity instances using the 'GetDeclarationByIDs' query.
        /// </summary>
        /// <param name="ids">The value for the 'ids' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Declaration"/> entity instances.</returns>
        public EntityQuery<Declaration> GetDeclarationByIDsQuery(IEnumerable<int> ids)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ids", ids);
            this.ValidateMethod("GetDeclarationByIDsQuery", parameters);
            return base.CreateQuery<Declaration>("GetDeclarationByIDs", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DeclarationContainer"/> entity instances using the 'GetDeclarationContainer' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DeclarationContainer"/> entity instances.</returns>
        public EntityQuery<DeclarationContainer> GetDeclarationContainerQuery()
        {
            this.ValidateMethod("GetDeclarationContainerQuery", null);
            return base.CreateQuery<DeclarationContainer>("GetDeclarationContainer", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DeclarationDocument"/> entity instances using the 'GetDeclarationDocument' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DeclarationDocument"/> entity instances.</returns>
        public EntityQuery<DeclarationDocument> GetDeclarationDocumentQuery()
        {
            this.ValidateMethod("GetDeclarationDocumentQuery", null);
            return base.CreateQuery<DeclarationDocument>("GetDeclarationDocument", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DeclarationDocument"/> entity instances using the 'GetDeclarationDocumentByExaminationIDs' query.
        /// </summary>
        /// <param name="ids">The value for the 'ids' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DeclarationDocument"/> entity instances.</returns>
        public EntityQuery<DeclarationDocument> GetDeclarationDocumentByExaminationIDsQuery(IEnumerable<int> ids)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ids", ids);
            this.ValidateMethod("GetDeclarationDocumentByExaminationIDsQuery", parameters);
            return base.CreateQuery<DeclarationDocument>("GetDeclarationDocumentByExaminationIDs", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DeclarationImage"/> entity instances using the 'GetDeclarationImage' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DeclarationImage"/> entity instances.</returns>
        public EntityQuery<DeclarationImage> GetDeclarationImageQuery()
        {
            this.ValidateMethod("GetDeclarationImageQuery", null);
            return base.CreateQuery<DeclarationImage>("GetDeclarationImage", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DeclarationItem"/> entity instances using the 'GetDeclarationItem' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DeclarationItem"/> entity instances.</returns>
        public EntityQuery<DeclarationItem> GetDeclarationItemQuery()
        {
            this.ValidateMethod("GetDeclarationItemQuery", null);
            return base.CreateQuery<DeclarationItem>("GetDeclarationItem", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Declaration"/> entity instances using the 'GetDeclarationPortCheckByApproveNumber' query.
        /// </summary>
        /// <param name="approveNumber">The value for the 'approveNumber' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Declaration"/> entity instances.</returns>
        public EntityQuery<Declaration> GetDeclarationPortCheckByApproveNumberQuery(string approveNumber)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("approveNumber", approveNumber);
            this.ValidateMethod("GetDeclarationPortCheckByApproveNumberQuery", parameters);
            return base.CreateQuery<Declaration>("GetDeclarationPortCheckByApproveNumber", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Declaration"/> entity instances using the 'GetDeclarationPortCheckByBillNumber' query.
        /// </summary>
        /// <param name="billNumber">The value for the 'billNumber' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Declaration"/> entity instances.</returns>
        public EntityQuery<Declaration> GetDeclarationPortCheckByBillNumberQuery(string billNumber)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("billNumber", billNumber);
            this.ValidateMethod("GetDeclarationPortCheckByBillNumberQuery", parameters);
            return base.CreateQuery<Declaration>("GetDeclarationPortCheckByBillNumber", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Declaration"/> entity instances using the 'GetDeclarationPortCheckByDeclarationNumber' query.
        /// </summary>
        /// <param name="declarationNumber">The value for the 'declarationNumber' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Declaration"/> entity instances.</returns>
        public EntityQuery<Declaration> GetDeclarationPortCheckByDeclarationNumberQuery(string declarationNumber)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("declarationNumber", declarationNumber);
            this.ValidateMethod("GetDeclarationPortCheckByDeclarationNumberQuery", parameters);
            return base.CreateQuery<Declaration>("GetDeclarationPortCheckByDeclarationNumber", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="District"/> entity instances using the 'GetDistrict' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="District"/> entity instances.</returns>
        public EntityQuery<District> GetDistrictQuery()
        {
            this.ValidateMethod("GetDistrictQuery", null);
            return base.CreateQuery<District>("GetDistrict", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Document"/> entity instances using the 'GetDocument' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Document"/> entity instances.</returns>
        public EntityQuery<Document> GetDocumentQuery()
        {
            this.ValidateMethod("GetDocumentQuery", null);
            return base.CreateQuery<Document>("GetDocument", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DocumentType"/> entity instances using the 'GetDocumentType' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DocumentType"/> entity instances.</returns>
        public EntityQuery<DocumentType> GetDocumentTypeQuery()
        {
            this.ValidateMethod("GetDocumentTypeQuery", null);
            return base.CreateQuery<DocumentType>("GetDocumentType", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DoubleCheckDeclaration"/> entity instances using the 'GetDoubleCheckDeclaration' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DoubleCheckDeclaration"/> entity instances.</returns>
        public EntityQuery<DoubleCheckDeclaration> GetDoubleCheckDeclarationQuery()
        {
            this.ValidateMethod("GetDoubleCheckDeclarationQuery", null);
            return base.CreateQuery<DoubleCheckDeclaration>("GetDoubleCheckDeclaration", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DoubleCheckDeclaration"/> entity instances using the 'GetDoubleCheckDeclarationByApproveNumber' query.
        /// </summary>
        /// <param name="approveNumber">The value for the 'approveNumber' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DoubleCheckDeclaration"/> entity instances.</returns>
        public EntityQuery<DoubleCheckDeclaration> GetDoubleCheckDeclarationByApproveNumberQuery(string approveNumber)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("approveNumber", approveNumber);
            this.ValidateMethod("GetDoubleCheckDeclarationByApproveNumberQuery", parameters);
            return base.CreateQuery<DoubleCheckDeclaration>("GetDoubleCheckDeclarationByApproveNumber", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DoubleCheckDeclaration"/> entity instances using the 'GetDoubleCheckDeclarationByDelarationID' query.
        /// </summary>
        /// <param name="id">The value for the 'id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DoubleCheckDeclaration"/> entity instances.</returns>
        public EntityQuery<DoubleCheckDeclaration> GetDoubleCheckDeclarationByDelarationIDQuery(int id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            this.ValidateMethod("GetDoubleCheckDeclarationByDelarationIDQuery", parameters);
            return base.CreateQuery<DoubleCheckDeclaration>("GetDoubleCheckDeclarationByDelarationID", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DoubleCheckDeclaration"/> entity instances using the 'GetDoubleCheckDeclarationByDelarationNumber' query.
        /// </summary>
        /// <param name="declarationNumber">The value for the 'declarationNumber' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DoubleCheckDeclaration"/> entity instances.</returns>
        public EntityQuery<DoubleCheckDeclaration> GetDoubleCheckDeclarationByDelarationNumberQuery(string declarationNumber)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("declarationNumber", declarationNumber);
            this.ValidateMethod("GetDoubleCheckDeclarationByDelarationNumberQuery", parameters);
            return base.CreateQuery<DoubleCheckDeclaration>("GetDoubleCheckDeclarationByDelarationNumber", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DoubleCheckDeclarationItem"/> entity instances using the 'GetDoubleCheckDeclarationItem' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DoubleCheckDeclarationItem"/> entity instances.</returns>
        public EntityQuery<DoubleCheckDeclarationItem> GetDoubleCheckDeclarationItemQuery()
        {
            this.ValidateMethod("GetDoubleCheckDeclarationItemQuery", null);
            return base.CreateQuery<DoubleCheckDeclarationItem>("GetDoubleCheckDeclarationItem", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Duty"/> entity instances using the 'GetDuty' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Duty"/> entity instances.</returns>
        public EntityQuery<Duty> GetDutyQuery()
        {
            this.ValidateMethod("GetDutyQuery", null);
            return base.CreateQuery<Duty>("GetDuty", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Examination"/> entity instances using the 'GetExaminationByIDs' query.
        /// </summary>
        /// <param name="ids">The value for the 'ids' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Examination"/> entity instances.</returns>
        public EntityQuery<Examination> GetExaminationByIDsQuery(IEnumerable<int> ids)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ids", ids);
            this.ValidateMethod("GetExaminationByIDsQuery", parameters);
            return base.CreateQuery<Examination>("GetExaminationByIDs", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Examination"/> entity instances using the 'GetExaminationsByNumber' query.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of the query.</param>
        /// <param name="numbers">The value for the 'numbers' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Examination"/> entity instances.</returns>
        public EntityQuery<Examination> GetExaminationsByNumberQuery(int userID, string numbers)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            parameters.Add("numbers", numbers);
            this.ValidateMethod("GetExaminationsByNumberQuery", parameters);
            return base.CreateQuery<Examination>("GetExaminationsByNumber", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Examination"/> entity instances using the 'GetExaminationsByReceiveDate' query.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of the query.</param>
        /// <param name="from">The value for the 'from' parameter of the query.</param>
        /// <param name="to">The value for the 'to' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Examination"/> entity instances.</returns>
        public EntityQuery<Examination> GetExaminationsByReceiveDateQuery(int userID, DateTime from, DateTime to)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            parameters.Add("from", from);
            parameters.Add("to", to);
            this.ValidateMethod("GetExaminationsByReceiveDateQuery", parameters);
            return base.CreateQuery<Examination>("GetExaminationsByReceiveDate", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FeeMark"/> entity instances using the 'GetFeeMark' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FeeMark"/> entity instances.</returns>
        public EntityQuery<FeeMark> GetFeeMarkQuery()
        {
            this.ValidateMethod("GetFeeMarkQuery", null);
            return base.CreateQuery<FeeMark>("GetFeeMark", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FeeType"/> entity instances using the 'GetFeeType' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FeeType"/> entity instances.</returns>
        public EntityQuery<FeeType> GetFeeTypeQuery()
        {
            this.ValidateMethod("GetFeeTypeQuery", null);
            return base.CreateQuery<FeeType>("GetFeeType", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FinancialExportDeclaration"/> entity instances using the 'GetFinancialDeclarationByExaminationIDs' query.
        /// </summary>
        /// <param name="ids">The value for the 'ids' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FinancialExportDeclaration"/> entity instances.</returns>
        public EntityQuery<FinancialExportDeclaration> GetFinancialDeclarationByExaminationIDsQuery(IEnumerable<int> ids)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ids", ids);
            this.ValidateMethod("GetFinancialDeclarationByExaminationIDsQuery", parameters);
            return base.CreateQuery<FinancialExportDeclaration>("GetFinancialDeclarationByExaminationIDs", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FinancialExportDeclaration"/> entity instances using the 'GetFinancialExportDeclaration' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FinancialExportDeclaration"/> entity instances.</returns>
        public EntityQuery<FinancialExportDeclaration> GetFinancialExportDeclarationQuery()
        {
            this.ValidateMethod("GetFinancialExportDeclarationQuery", null);
            return base.CreateQuery<FinancialExportDeclaration>("GetFinancialExportDeclaration", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="HSCodeDictionary"/> entity instances using the 'GetHSCodeDictionary' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="HSCodeDictionary"/> entity instances.</returns>
        public EntityQuery<HSCodeDictionary> GetHSCodeDictionaryQuery()
        {
            this.ValidateMethod("GetHSCodeDictionaryQuery", null);
            return base.CreateQuery<HSCodeDictionary>("GetHSCodeDictionary", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Levy"/> entity instances using the 'GetLevy' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Levy"/> entity instances.</returns>
        public EntityQuery<Levy> GetLevyQuery()
        {
            this.ValidateMethod("GetLevyQuery", null);
            return base.CreateQuery<Levy>("GetLevy", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="LoginHistory"/> entity instances using the 'GetLoginHistory' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="LoginHistory"/> entity instances.</returns>
        public EntityQuery<LoginHistory> GetLoginHistoryQuery()
        {
            this.ValidateMethod("GetLoginHistoryQuery", null);
            return base.CreateQuery<LoginHistory>("GetLoginHistory", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="LoginHistory"/> entity instances using the 'GetLoginHistoryByDate' query.
        /// </summary>
        /// <param name="from">The value for the 'from' parameter of the query.</param>
        /// <param name="to">The value for the 'to' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="LoginHistory"/> entity instances.</returns>
        public EntityQuery<LoginHistory> GetLoginHistoryByDateQuery(DateTime from, DateTime to)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("from", from);
            parameters.Add("to", to);
            this.ValidateMethod("GetLoginHistoryByDateQuery", parameters);
            return base.CreateQuery<LoginHistory>("GetLoginHistoryByDate", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MachineNameIPMapping"/> entity instances using the 'GetMachineNameIPMapping' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MachineNameIPMapping"/> entity instances.</returns>
        public EntityQuery<MachineNameIPMapping> GetMachineNameIPMappingQuery()
        {
            this.ValidateMethod("GetMachineNameIPMappingQuery", null);
            return base.CreateQuery<MachineNameIPMapping>("GetMachineNameIPMapping", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Pay"/> entity instances using the 'GetPay' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Pay"/> entity instances.</returns>
        public EntityQuery<Pay> GetPayQuery()
        {
            this.ValidateMethod("GetPayQuery", null);
            return base.CreateQuery<Pay>("GetPay", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Port"/> entity instances using the 'GetPort' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Port"/> entity instances.</returns>
        public EntityQuery<Port> GetPortQuery()
        {
            this.ValidateMethod("GetPortQuery", null);
            return base.CreateQuery<Port>("GetPort", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Purpose"/> entity instances using the 'GetPurpose' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Purpose"/> entity instances.</returns>
        public EntityQuery<Purpose> GetPurposeQuery()
        {
            this.ValidateMethod("GetPurposeQuery", null);
            return base.CreateQuery<Purpose>("GetPurpose", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Role"/> entity instances using the 'GetRole' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Role"/> entity instances.</returns>
        public EntityQuery<Role> GetRoleQuery()
        {
            this.ValidateMethod("GetRoleQuery", null);
            return base.CreateQuery<Role>("GetRole", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RoleAccess"/> entity instances using the 'GetRoleAccess' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RoleAccess"/> entity instances.</returns>
        public EntityQuery<RoleAccess> GetRoleAccessQuery()
        {
            this.ValidateMethod("GetRoleAccessQuery", null);
            return base.CreateQuery<RoleAccess>("GetRoleAccess", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Setting"/> entity instances using the 'GetSettings' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Setting"/> entity instances.</returns>
        public EntityQuery<Setting> GetSettingsQuery()
        {
            this.ValidateMethod("GetSettingsQuery", null);
            return base.CreateQuery<Setting>("GetSettings", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Trade"/> entity instances using the 'GetTrade' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Trade"/> entity instances.</returns>
        public EntityQuery<Trade> GetTradeQuery()
        {
            this.ValidateMethod("GetTradeQuery", null);
            return base.CreateQuery<Trade>("GetTrade", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Transaction"/> entity instances using the 'GetTransaction' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Transaction"/> entity instances.</returns>
        public EntityQuery<Transaction> GetTransactionQuery()
        {
            this.ValidateMethod("GetTransactionQuery", null);
            return base.CreateQuery<Transaction>("GetTransaction", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Transport"/> entity instances using the 'GetTransport' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Transport"/> entity instances.</returns>
        public EntityQuery<Transport> GetTransportQuery()
        {
            this.ValidateMethod("GetTransportQuery", null);
            return base.CreateQuery<Transport>("GetTransport", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UIGroup"/> entity instances using the 'GetUIGroup' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UIGroup"/> entity instances.</returns>
        public EntityQuery<UIGroup> GetUIGroupQuery()
        {
            this.ValidateMethod("GetUIGroupQuery", null);
            return base.CreateQuery<UIGroup>("GetUIGroup", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UIPage"/> entity instances using the 'GetUIPage' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UIPage"/> entity instances.</returns>
        public EntityQuery<UIPage> GetUIPageQuery()
        {
            this.ValidateMethod("GetUIPageQuery", null);
            return base.CreateQuery<UIPage>("GetUIPage", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Unit"/> entity instances using the 'GetUnit' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Unit"/> entity instances.</returns>
        public EntityQuery<Unit> GetUnitQuery()
        {
            this.ValidateMethod("GetUnitQuery", null);
            return base.CreateQuery<Unit>("GetUnit", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserGroup"/> entity instances using the 'GetUserGroup' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserGroup"/> entity instances.</returns>
        public EntityQuery<UserGroup> GetUserGroupQuery()
        {
            this.ValidateMethod("GetUserGroupQuery", null);
            return base.CreateQuery<UserGroup>("GetUserGroup", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserGroupCustomer"/> entity instances using the 'GetUserGroupCustomer' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserGroupCustomer"/> entity instances.</returns>
        public EntityQuery<UserGroupCustomer> GetUserGroupCustomerQuery()
        {
            this.ValidateMethod("GetUserGroupCustomerQuery", null);
            return base.CreateQuery<UserGroupCustomer>("GetUserGroupCustomer", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserRole"/> entity instances using the 'GetUserRole' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserRole"/> entity instances.</returns>
        public EntityQuery<UserRole> GetUserRoleQuery()
        {
            this.ValidateMethod("GetUserRoleQuery", null);
            return base.CreateQuery<UserRole>("GetUserRole", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Wrap"/> entity instances using the 'GetWrap' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Wrap"/> entity instances.</returns>
        public EntityQuery<Wrap> GetWrapQuery()
        {
            this.ValidateMethod("GetWrapQuery", null);
            return base.CreateQuery<Wrap>("GetWrap", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Login' query.
        /// </summary>
        /// <param name="userAlias">The value for the 'userAlias' parameter of the query.</param>
        /// <param name="pwd">The value for the 'pwd' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LoginQuery(string userAlias, string pwd)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userAlias", userAlias);
            parameters.Add("pwd", pwd);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Declaration"/> entity instances using the 'RefreshDeclarationPortCheck' query.
        /// </summary>
        /// <param name="declarationNumbers">The value for the 'declarationNumbers' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Declaration"/> entity instances.</returns>
        public EntityQuery<Declaration> RefreshDeclarationPortCheckQuery(string declarationNumbers)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("declarationNumbers", declarationNumbers);
            this.ValidateMethod("RefreshDeclarationPortCheckQuery", parameters);
            return base.CreateQuery<Declaration>("RefreshDeclarationPortCheck", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="YSExaminationData"/> entity instances using the 'YSQuery' query.
        /// </summary>
        /// <param name="declarationNumber">The value for the 'declarationNumber' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="YSExaminationData"/> entity instances.</returns>
        public EntityQuery<YSExaminationData> YSQueryQuery(string declarationNumber)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("declarationNumber", declarationNumber);
            this.ValidateMethod("YSQueryQuery", parameters);
            return base.CreateQuery<YSExaminationData>("YSQuery", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="YSExaminationData"/> entity instances using the 'YSQueryByDate' query.
        /// </summary>
        /// <param name="start">The value for the 'start' parameter of the query.</param>
        /// <param name="end">The value for the 'end' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="YSExaminationData"/> entity instances.</returns>
        public EntityQuery<YSExaminationData> YSQueryByDateQuery(DateTime start, DateTime end)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("start", start);
            parameters.Add("end", end);
            this.ValidateMethod("YSQueryByDateQuery", parameters);
            return base.CreateQuery<YSExaminationData>("YSQueryByDate", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="YSExaminationData"/> entity instances using the 'YSQueryByDeclarationNumbers' query.
        /// </summary>
        /// <param name="declarationNumbers">The value for the 'declarationNumbers' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="YSExaminationData"/> entity instances.</returns>
        public EntityQuery<YSExaminationData> YSQueryByDeclarationNumbersQuery(string declarationNumbers)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("declarationNumbers", declarationNumbers);
            this.ValidateMethod("YSQueryByDeclarationNumbersQuery", parameters);
            return base.CreateQuery<YSExaminationData>("YSQueryByDeclarationNumbers", parameters, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'BossNameExisted' method of the DomainService.
        /// </summary>
        /// <param name="bossName">The value for the 'bossName' parameter of this action.</param>
        /// <param name="ID">The value for the 'ID' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> BossNameExisted(string bossName, int ID, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("bossName", bossName);
            parameters.Add("ID", ID);
            this.ValidateMethod("BossNameExisted", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("BossNameExisted", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'BossNameExisted' method of the DomainService.
        /// </summary>
        /// <param name="bossName">The value for the 'bossName' parameter of this action.</param>
        /// <param name="ID">The value for the 'ID' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> BossNameExisted(string bossName, int ID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("bossName", bossName);
            parameters.Add("ID", ID);
            this.ValidateMethod("BossNameExisted", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("BossNameExisted", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CheckExsitingDeclaration' method of the DomainService.
        /// </summary>
        /// <param name="declarationNumber">The value for the 'declarationNumber' parameter of this action.</param>
        /// <param name="approveNumber">The value for the 'approveNumber' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> CheckExsitingDeclaration(string declarationNumber, string approveNumber, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("declarationNumber", declarationNumber);
            parameters.Add("approveNumber", approveNumber);
            this.ValidateMethod("CheckExsitingDeclaration", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("CheckExsitingDeclaration", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CheckExsitingDeclaration' method of the DomainService.
        /// </summary>
        /// <param name="declarationNumber">The value for the 'declarationNumber' parameter of this action.</param>
        /// <param name="approveNumber">The value for the 'approveNumber' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> CheckExsitingDeclaration(string declarationNumber, string approveNumber)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("declarationNumber", declarationNumber);
            parameters.Add("approveNumber", approveNumber);
            this.ValidateMethod("CheckExsitingDeclaration", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("CheckExsitingDeclaration", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'DeleteCorproationByCode' method of the DomainService.
        /// </summary>
        /// <param name="code">The value for the 'code' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> DeleteCorproationByCode(string code, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("code", code);
            this.ValidateMethod("DeleteCorproationByCode", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("DeleteCorproationByCode", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'DeleteCorproationByCode' method of the DomainService.
        /// </summary>
        /// <param name="code">The value for the 'code' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> DeleteCorproationByCode(string code)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("code", code);
            this.ValidateMethod("DeleteCorproationByCode", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("DeleteCorproationByCode", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'DeleteDeclarations' method of the DomainService.
        /// </summary>
        /// <param name="ids">The value for the 'ids' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> DeleteDeclarations(string ids, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ids", ids);
            this.ValidateMethod("DeleteDeclarations", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("DeleteDeclarations", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'DeleteDeclarations' method of the DomainService.
        /// </summary>
        /// <param name="ids">The value for the 'ids' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> DeleteDeclarations(string ids)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ids", ids);
            this.ValidateMethod("DeleteDeclarations", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("DeleteDeclarations", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetCustomerID' method of the DomainService.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<int>> GetCustomerID(int UserID, Action<InvokeOperation<IEnumerable<int>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            this.ValidateMethod("GetCustomerID", parameters);
            return ((InvokeOperation<IEnumerable<int>>)(this.InvokeOperation("GetCustomerID", typeof(IEnumerable<int>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetCustomerID' method of the DomainService.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<int>> GetCustomerID(int UserID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            this.ValidateMethod("GetCustomerID", parameters);
            return ((InvokeOperation<IEnumerable<int>>)(this.InvokeOperation("GetCustomerID", typeof(IEnumerable<int>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetExistingTransferNumbers' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> GetExistingTransferNumbers(Action<InvokeOperation<IEnumerable<string>>> callback, object userState)
        {
            this.ValidateMethod("GetExistingTransferNumbers", null);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("GetExistingTransferNumbers", typeof(IEnumerable<string>), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetExistingTransferNumbers' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> GetExistingTransferNumbers()
        {
            this.ValidateMethod("GetExistingTransferNumbers", null);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("GetExistingTransferNumbers", typeof(IEnumerable<string>), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetYSValidImage' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte[]> GetYSValidImage(Action<InvokeOperation<byte[]>> callback, object userState)
        {
            this.ValidateMethod("GetYSValidImage", null);
            return ((InvokeOperation<byte[]>)(this.InvokeOperation("GetYSValidImage", typeof(byte[]), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetYSValidImage' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<byte[]> GetYSValidImage()
        {
            this.ValidateMethod("GetYSValidImage", null);
            return ((InvokeOperation<byte[]>)(this.InvokeOperation("GetYSValidImage", typeof(byte[]), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ProcessUploadedImages' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation ProcessUploadedImages(Action<InvokeOperation> callback, object userState)
        {
            this.ValidateMethod("ProcessUploadedImages", null);
            return this.InvokeOperation("ProcessUploadedImages", typeof(void), null, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ProcessUploadedImages' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation ProcessUploadedImages()
        {
            this.ValidateMethod("ProcessUploadedImages", null);
            return this.InvokeOperation("ProcessUploadedImages", typeof(void), null, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'RefreshDeclaration' method of the DomainService.
        /// </summary>
        /// <param name="declarationID">The value for the 'declarationID' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation RefreshDeclaration(int declarationID, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("declarationID", declarationID);
            this.ValidateMethod("RefreshDeclaration", parameters);
            return this.InvokeOperation("RefreshDeclaration", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'RefreshDeclaration' method of the DomainService.
        /// </summary>
        /// <param name="declarationID">The value for the 'declarationID' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation RefreshDeclaration(int declarationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("declarationID", declarationID);
            this.ValidateMethod("RefreshDeclaration", parameters);
            return this.InvokeOperation("RefreshDeclaration", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetDoubleCheckMachineByIds' method of the DomainService.
        /// </summary>
        /// <param name="ids">The value for the 'ids' parameter of this action.</param>
        /// <param name="machineName">The value for the 'machineName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation SetDoubleCheckMachineByIds(IEnumerable<int> ids, string machineName, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ids", ids);
            parameters.Add("machineName", machineName);
            this.ValidateMethod("SetDoubleCheckMachineByIds", parameters);
            return this.InvokeOperation("SetDoubleCheckMachineByIds", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetDoubleCheckMachineByIds' method of the DomainService.
        /// </summary>
        /// <param name="ids">The value for the 'ids' parameter of this action.</param>
        /// <param name="machineName">The value for the 'machineName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation SetDoubleCheckMachineByIds(IEnumerable<int> ids, string machineName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ids", ids);
            parameters.Add("machineName", machineName);
            this.ValidateMethod("SetDoubleCheckMachineByIds", parameters);
            return this.InvokeOperation("SetDoubleCheckMachineByIds", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateDeclarationStatus' method of the DomainService.
        /// </summary>
        /// <param name="ids">The value for the 'ids' parameter of this action.</param>
        /// <param name="status">The value for the 'status' parameter of this action.</param>
        /// <param name="remark">The value for the 'remark' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> UpdateDeclarationStatus(string ids, string status, string remark, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ids", ids);
            parameters.Add("status", status);
            parameters.Add("remark", remark);
            this.ValidateMethod("UpdateDeclarationStatus", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("UpdateDeclarationStatus", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateDeclarationStatus' method of the DomainService.
        /// </summary>
        /// <param name="ids">The value for the 'ids' parameter of this action.</param>
        /// <param name="status">The value for the 'status' parameter of this action.</param>
        /// <param name="remark">The value for the 'remark' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> UpdateDeclarationStatus(string ids, string status, string remark)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ids", ids);
            parameters.Add("status", status);
            parameters.Add("remark", remark);
            this.ValidateMethod("UpdateDeclarationStatus", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("UpdateDeclarationStatus", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateDrawbackStatus' method of the DomainService.
        /// </summary>
        /// <param name="ids">The value for the 'ids' parameter of this action.</param>
        /// <param name="status">The value for the 'status' parameter of this action.</param>
        /// <param name="remark">The value for the 'remark' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> UpdateDrawbackStatus(string ids, string status, string remark, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ids", ids);
            parameters.Add("status", status);
            parameters.Add("remark", remark);
            this.ValidateMethod("UpdateDrawbackStatus", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("UpdateDrawbackStatus", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateDrawbackStatus' method of the DomainService.
        /// </summary>
        /// <param name="ids">The value for the 'ids' parameter of this action.</param>
        /// <param name="status">The value for the 'status' parameter of this action.</param>
        /// <param name="remark">The value for the 'remark' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> UpdateDrawbackStatus(string ids, string status, string remark)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ids", ids);
            parameters.Add("status", status);
            parameters.Add("remark", remark);
            this.ValidateMethod("UpdateDrawbackStatus", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("UpdateDrawbackStatus", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'YSLogin' method of the DomainService.
        /// </summary>
        /// <param name="code">The value for the 'code' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> YSLogin(string code, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("code", code);
            this.ValidateMethod("YSLogin", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("YSLogin", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'YSLogin' method of the DomainService.
        /// </summary>
        /// <param name="code">The value for the 'code' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> YSLogin(string code)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("code", code);
            this.ValidateMethod("YSLogin", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("YSLogin", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new CustomsAtomContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'CustomsAtomService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ICustomsAtomServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'BossNameExisted' operation.
            /// </summary>
            /// <param name="bossName">The value for the 'bossName' parameter of this action.</param>
            /// <param name="ID">The value for the 'ID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/BossNameExistedDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/BossNameExisted", ReplyAction="http://tempuri.org/CustomsAtomService/BossNameExistedResponse")]
            IAsyncResult BeginBossNameExisted(string bossName, int ID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginBossNameExisted'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginBossNameExisted'.</param>
            /// <returns>The 'Boolean' returned from the 'BossNameExisted' operation.</returns>
            bool EndBossNameExisted(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'CheckContainerAdmissionStatusResults' operation.
            /// </summary>
            /// <param name="declarationNumbers">The value for the 'declarationNumbers' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/CheckContainerAdmissionStatusResultsDomainS" +
                "erviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/CheckContainerAdmissionStatusResults", ReplyAction="http://tempuri.org/CustomsAtomService/CheckContainerAdmissionStatusResultsRespons" +
                "e")]
            [WebGet()]
            IAsyncResult BeginCheckContainerAdmissionStatusResults(string declarationNumbers, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCheckContainerAdmissionStatusResults'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCheckContainerAdmissionStatusResults'.</param>
            /// <returns>The 'QueryResult' returned from the 'CheckContainerAdmissionStatusResults' operation.</returns>
            QueryResult<DeclarationPortCheckResult> EndCheckContainerAdmissionStatusResults(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'CheckExsitingDeclaration' operation.
            /// </summary>
            /// <param name="declarationNumber">The value for the 'declarationNumber' parameter of this action.</param>
            /// <param name="approveNumber">The value for the 'approveNumber' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/CheckExsitingDeclarationDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/CheckExsitingDeclaration", ReplyAction="http://tempuri.org/CustomsAtomService/CheckExsitingDeclarationResponse")]
            IAsyncResult BeginCheckExsitingDeclaration(string declarationNumber, string approveNumber, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCheckExsitingDeclaration'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCheckExsitingDeclaration'.</param>
            /// <returns>The 'Boolean' returned from the 'CheckExsitingDeclaration' operation.</returns>
            bool EndCheckExsitingDeclaration(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'CheckLandingResults' operation.
            /// </summary>
            /// <param name="declarationNumbers">The value for the 'declarationNumbers' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/CheckLandingResultsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/CheckLandingResults", ReplyAction="http://tempuri.org/CustomsAtomService/CheckLandingResultsResponse")]
            [WebGet()]
            IAsyncResult BeginCheckLandingResults(string declarationNumbers, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCheckLandingResults'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCheckLandingResults'.</param>
            /// <returns>The 'QueryResult' returned from the 'CheckLandingResults' operation.</returns>
            QueryResult<DeclarationPortCheckResult> EndCheckLandingResults(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'CheckLeaveDockDateResults' operation.
            /// </summary>
            /// <param name="declarationNumbers">The value for the 'declarationNumbers' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/CheckLeaveDockDateResultsDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/CheckLeaveDockDateResults", ReplyAction="http://tempuri.org/CustomsAtomService/CheckLeaveDockDateResultsResponse")]
            [WebGet()]
            IAsyncResult BeginCheckLeaveDockDateResults(string declarationNumbers, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCheckLeaveDockDateResults'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCheckLeaveDockDateResults'.</param>
            /// <returns>The 'QueryResult' returned from the 'CheckLeaveDockDateResults' operation.</returns>
            QueryResult<DeclarationPortCheckResult> EndCheckLeaveDockDateResults(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'DeleteCorproationByCode' operation.
            /// </summary>
            /// <param name="code">The value for the 'code' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/DeleteCorproationByCodeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/DeleteCorproationByCode", ReplyAction="http://tempuri.org/CustomsAtomService/DeleteCorproationByCodeResponse")]
            IAsyncResult BeginDeleteCorproationByCode(string code, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginDeleteCorproationByCode'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginDeleteCorproationByCode'.</param>
            /// <returns>The 'Boolean' returned from the 'DeleteCorproationByCode' operation.</returns>
            bool EndDeleteCorproationByCode(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'DeleteDeclarations' operation.
            /// </summary>
            /// <param name="ids">The value for the 'ids' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/DeleteDeclarationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/DeleteDeclarations", ReplyAction="http://tempuri.org/CustomsAtomService/DeleteDeclarationsResponse")]
            IAsyncResult BeginDeleteDeclarations(string ids, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginDeleteDeclarations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginDeleteDeclarations'.</param>
            /// <returns>The 'Int32' returned from the 'DeleteDeclarations' operation.</returns>
            int EndDeleteDeclarations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'DoubleCheckDeclarationVarifyResults' operation.
            /// </summary>
            /// <param name="data">The value for the 'data' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/DoubleCheckDeclarationVarifyResultsDomainSe" +
                "rviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/DoubleCheckDeclarationVarifyResults", ReplyAction="http://tempuri.org/CustomsAtomService/DoubleCheckDeclarationVarifyResultsResponse" +
                "")]
            [WebGet()]
            IAsyncResult BeginDoubleCheckDeclarationVarifyResults(string data, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginDoubleCheckDeclarationVarifyResults'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginDoubleCheckDeclarationVarifyResults'.</param>
            /// <returns>The 'QueryResult' returned from the 'DoubleCheckDeclarationVarifyResults' operation.</returns>
            QueryResult<DoubleCheckDeclarationVarifyResult> EndDoubleCheckDeclarationVarifyResults(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAllDeclarationByDeclarationCodeResultsFunc' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="codes">The value for the 'codes' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetAllDeclarationByDeclarationCodeResultsFu" +
                "ncDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetAllDeclarationByDeclarationCodeResultsFu" +
                "nc", ReplyAction="http://tempuri.org/CustomsAtomService/GetAllDeclarationByDeclarationCodeResultsFu" +
                "ncResponse")]
            [WebGet()]
            IAsyncResult BeginGetAllDeclarationByDeclarationCodeResultsFunc(int userID, string codes, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAllDeclarationByDeclarationCodeResultsFunc'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAllDeclarationByDeclarationCodeResultsFunc'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAllDeclarationByDeclarationCodeResultsFunc' operation.</returns>
            QueryResult<GetAllDeclarationByReceiveDateResult> EndGetAllDeclarationByDeclarationCodeResultsFunc(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAllDeclarationByReceiveDateResultsFunc' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="condition">The value for the 'condition' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetAllDeclarationByReceiveDateResultsFuncDo" +
                "mainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetAllDeclarationByReceiveDateResultsFunc", ReplyAction="http://tempuri.org/CustomsAtomService/GetAllDeclarationByReceiveDateResultsFuncRe" +
                "sponse")]
            [WebGet()]
            IAsyncResult BeginGetAllDeclarationByReceiveDateResultsFunc(int userID, string condition, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAllDeclarationByReceiveDateResultsFunc'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAllDeclarationByReceiveDateResultsFunc'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAllDeclarationByReceiveDateResultsFunc' operation.</returns>
            QueryResult<GetAllDeclarationByReceiveDateResult> EndGetAllDeclarationByReceiveDateResultsFunc(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAllDeclarationDuplicatedResultsFunc' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="condition">The value for the 'condition' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetAllDeclarationDuplicatedResultsFuncDomai" +
                "nServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetAllDeclarationDuplicatedResultsFunc", ReplyAction="http://tempuri.org/CustomsAtomService/GetAllDeclarationDuplicatedResultsFuncRespo" +
                "nse")]
            [WebGet()]
            IAsyncResult BeginGetAllDeclarationDuplicatedResultsFunc(int userID, string condition, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAllDeclarationDuplicatedResultsFunc'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAllDeclarationDuplicatedResultsFunc'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAllDeclarationDuplicatedResultsFunc' operation.</returns>
            QueryResult<GetAllDeclarationByReceiveDateResult> EndGetAllDeclarationDuplicatedResultsFunc(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAllFinancialExportDeclarationByDeclarationCodes' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="delcarationNums">The value for the 'delcarationNums' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetAllFinancialExportDeclarationByDeclarati" +
                "onCodesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetAllFinancialExportDeclarationByDeclarati" +
                "onCodes", ReplyAction="http://tempuri.org/CustomsAtomService/GetAllFinancialExportDeclarationByDeclarati" +
                "onCodesResponse")]
            [WebGet()]
            IAsyncResult BeginGetAllFinancialExportDeclarationByDeclarationCodes(int userID, string delcarationNums, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAllFinancialExportDeclarationByDeclarationCodes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAllFinancialExportDeclarationByDeclarationCodes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAllFinancialExportDeclarationByDeclarationCodes' operation.</returns>
            QueryResult<GetAllFinancialDeclaration> EndGetAllFinancialExportDeclarationByDeclarationCodes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAllFinancialExportDeclarationByReceiveDate' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="condition">The value for the 'condition' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetAllFinancialExportDeclarationByReceiveDa" +
                "teDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetAllFinancialExportDeclarationByReceiveDa" +
                "te", ReplyAction="http://tempuri.org/CustomsAtomService/GetAllFinancialExportDeclarationByReceiveDa" +
                "teResponse")]
            [WebGet()]
            IAsyncResult BeginGetAllFinancialExportDeclarationByReceiveDate(int userID, string condition, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAllFinancialExportDeclarationByReceiveDate'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAllFinancialExportDeclarationByReceiveDate'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAllFinancialExportDeclarationByReceiveDate' operation.</returns>
            QueryResult<GetAllFinancialDeclaration> EndGetAllFinancialExportDeclarationByReceiveDate(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetBoss' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetBossDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetBoss", ReplyAction="http://tempuri.org/CustomsAtomService/GetBossResponse")]
            [WebGet()]
            IAsyncResult BeginGetBoss(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBoss'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBoss'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetBoss' operation.</returns>
            QueryResult<Boss> EndGetBoss(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCorporation' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetCorporationDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetCorporation", ReplyAction="http://tempuri.org/CustomsAtomService/GetCorporationResponse")]
            [WebGet()]
            IAsyncResult BeginGetCorporation(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCorporation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCorporation'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCorporation' operation.</returns>
            QueryResult<Corporation> EndGetCorporation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCountry' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetCountryDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetCountry", ReplyAction="http://tempuri.org/CustomsAtomService/GetCountryResponse")]
            [WebGet()]
            IAsyncResult BeginGetCountry(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCountry'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCountry'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCountry' operation.</returns>
            QueryResult<Country> EndGetCountry(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCurrency' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetCurrencyDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetCurrency", ReplyAction="http://tempuri.org/CustomsAtomService/GetCurrencyResponse")]
            [WebGet()]
            IAsyncResult BeginGetCurrency(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCurrency'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCurrency'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCurrency' operation.</returns>
            QueryResult<Currency> EndGetCurrency(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCustomer' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetCustomerDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetCustomer", ReplyAction="http://tempuri.org/CustomsAtomService/GetCustomerResponse")]
            [WebGet()]
            IAsyncResult BeginGetCustomer(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCustomer'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCustomer'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCustomer' operation.</returns>
            QueryResult<Customer> EndGetCustomer(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCustomerFeeSetting' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetCustomerFeeSettingDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetCustomerFeeSetting", ReplyAction="http://tempuri.org/CustomsAtomService/GetCustomerFeeSettingResponse")]
            [WebGet()]
            IAsyncResult BeginGetCustomerFeeSetting(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCustomerFeeSetting'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCustomerFeeSetting'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCustomerFeeSetting' operation.</returns>
            QueryResult<CustomerFeeSetting> EndGetCustomerFeeSetting(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCustomerFeeSettingByCustomerID' operation.
            /// </summary>
            /// <param name="CustomerID">The value for the 'CustomerID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetCustomerFeeSettingByCustomerIDDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetCustomerFeeSettingByCustomerID", ReplyAction="http://tempuri.org/CustomsAtomService/GetCustomerFeeSettingByCustomerIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetCustomerFeeSettingByCustomerID(int CustomerID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCustomerFeeSettingByCustomerID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCustomerFeeSettingByCustomerID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCustomerFeeSettingByCustomerID' operation.</returns>
            QueryResult<CustomerFeeSetting> EndGetCustomerFeeSettingByCustomerID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCustomerID' operation.
            /// </summary>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetCustomerIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetCustomerID", ReplyAction="http://tempuri.org/CustomsAtomService/GetCustomerIDResponse")]
            IAsyncResult BeginGetCustomerID(int UserID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCustomerID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCustomerID'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'GetCustomerID' operation.</returns>
            IEnumerable<int> EndGetCustomerID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCustomhouse' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetCustomhouseDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetCustomhouse", ReplyAction="http://tempuri.org/CustomsAtomService/GetCustomhouseResponse")]
            [WebGet()]
            IAsyncResult BeginGetCustomhouse(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCustomhouse'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCustomhouse'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCustomhouse' operation.</returns>
            QueryResult<Customhouse> EndGetCustomhouse(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCustomsUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetCustomsUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetCustomsUser", ReplyAction="http://tempuri.org/CustomsAtomService/GetCustomsUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetCustomsUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCustomsUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCustomsUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCustomsUser' operation.</returns>
            QueryResult<CustomsUser> EndGetCustomsUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCustomsUserWithScroe' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetCustomsUserWithScroeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetCustomsUserWithScroe", ReplyAction="http://tempuri.org/CustomsAtomService/GetCustomsUserWithScroeResponse")]
            [WebGet()]
            IAsyncResult BeginGetCustomsUserWithScroe(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCustomsUserWithScroe'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCustomsUserWithScroe'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCustomsUserWithScroe' operation.</returns>
            QueryResult<CustomsUser> EndGetCustomsUserWithScroe(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDeclaration' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetDeclarationDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetDeclaration", ReplyAction="http://tempuri.org/CustomsAtomService/GetDeclarationResponse")]
            [WebGet()]
            IAsyncResult BeginGetDeclaration(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDeclaration'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDeclaration'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDeclaration' operation.</returns>
            QueryResult<Declaration> EndGetDeclaration(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDeclarationByID' operation.
            /// </summary>
            /// <param name="declarationID">The value for the 'declarationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetDeclarationByIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetDeclarationByID", ReplyAction="http://tempuri.org/CustomsAtomService/GetDeclarationByIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetDeclarationByID(int declarationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDeclarationByID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDeclarationByID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDeclarationByID' operation.</returns>
            QueryResult<Declaration> EndGetDeclarationByID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDeclarationByIDs' operation.
            /// </summary>
            /// <param name="ids">The value for the 'ids' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetDeclarationByIDsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetDeclarationByIDs", ReplyAction="http://tempuri.org/CustomsAtomService/GetDeclarationByIDsResponse")]
            [WebGet()]
            IAsyncResult BeginGetDeclarationByIDs(IEnumerable<int> ids, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDeclarationByIDs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDeclarationByIDs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDeclarationByIDs' operation.</returns>
            QueryResult<Declaration> EndGetDeclarationByIDs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDeclarationContainer' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetDeclarationContainerDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetDeclarationContainer", ReplyAction="http://tempuri.org/CustomsAtomService/GetDeclarationContainerResponse")]
            [WebGet()]
            IAsyncResult BeginGetDeclarationContainer(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDeclarationContainer'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDeclarationContainer'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDeclarationContainer' operation.</returns>
            QueryResult<DeclarationContainer> EndGetDeclarationContainer(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDeclarationDocument' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetDeclarationDocumentDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetDeclarationDocument", ReplyAction="http://tempuri.org/CustomsAtomService/GetDeclarationDocumentResponse")]
            [WebGet()]
            IAsyncResult BeginGetDeclarationDocument(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDeclarationDocument'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDeclarationDocument'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDeclarationDocument' operation.</returns>
            QueryResult<DeclarationDocument> EndGetDeclarationDocument(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDeclarationDocumentByExaminationIDs' operation.
            /// </summary>
            /// <param name="ids">The value for the 'ids' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetDeclarationDocumentByExaminationIDsDomai" +
                "nServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetDeclarationDocumentByExaminationIDs", ReplyAction="http://tempuri.org/CustomsAtomService/GetDeclarationDocumentByExaminationIDsRespo" +
                "nse")]
            [WebGet()]
            IAsyncResult BeginGetDeclarationDocumentByExaminationIDs(IEnumerable<int> ids, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDeclarationDocumentByExaminationIDs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDeclarationDocumentByExaminationIDs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDeclarationDocumentByExaminationIDs' operation.</returns>
            QueryResult<DeclarationDocument> EndGetDeclarationDocumentByExaminationIDs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDeclarationImage' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetDeclarationImageDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetDeclarationImage", ReplyAction="http://tempuri.org/CustomsAtomService/GetDeclarationImageResponse")]
            [WebGet()]
            IAsyncResult BeginGetDeclarationImage(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDeclarationImage'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDeclarationImage'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDeclarationImage' operation.</returns>
            QueryResult<DeclarationImage> EndGetDeclarationImage(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDeclarationItem' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetDeclarationItemDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetDeclarationItem", ReplyAction="http://tempuri.org/CustomsAtomService/GetDeclarationItemResponse")]
            [WebGet()]
            IAsyncResult BeginGetDeclarationItem(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDeclarationItem'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDeclarationItem'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDeclarationItem' operation.</returns>
            QueryResult<DeclarationItem> EndGetDeclarationItem(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDeclarationPortCheckByApproveNumber' operation.
            /// </summary>
            /// <param name="approveNumber">The value for the 'approveNumber' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetDeclarationPortCheckByApproveNumberDomai" +
                "nServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetDeclarationPortCheckByApproveNumber", ReplyAction="http://tempuri.org/CustomsAtomService/GetDeclarationPortCheckByApproveNumberRespo" +
                "nse")]
            [WebGet()]
            IAsyncResult BeginGetDeclarationPortCheckByApproveNumber(string approveNumber, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDeclarationPortCheckByApproveNumber'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDeclarationPortCheckByApproveNumber'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDeclarationPortCheckByApproveNumber' operation.</returns>
            QueryResult<Declaration> EndGetDeclarationPortCheckByApproveNumber(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDeclarationPortCheckByBillNumber' operation.
            /// </summary>
            /// <param name="billNumber">The value for the 'billNumber' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetDeclarationPortCheckByBillNumberDomainSe" +
                "rviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetDeclarationPortCheckByBillNumber", ReplyAction="http://tempuri.org/CustomsAtomService/GetDeclarationPortCheckByBillNumberResponse" +
                "")]
            [WebGet()]
            IAsyncResult BeginGetDeclarationPortCheckByBillNumber(string billNumber, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDeclarationPortCheckByBillNumber'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDeclarationPortCheckByBillNumber'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDeclarationPortCheckByBillNumber' operation.</returns>
            QueryResult<Declaration> EndGetDeclarationPortCheckByBillNumber(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDeclarationPortCheckByDeclarationNumber' operation.
            /// </summary>
            /// <param name="declarationNumber">The value for the 'declarationNumber' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetDeclarationPortCheckByDeclarationNumberD" +
                "omainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetDeclarationPortCheckByDeclarationNumber", ReplyAction="http://tempuri.org/CustomsAtomService/GetDeclarationPortCheckByDeclarationNumberR" +
                "esponse")]
            [WebGet()]
            IAsyncResult BeginGetDeclarationPortCheckByDeclarationNumber(string declarationNumber, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDeclarationPortCheckByDeclarationNumber'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDeclarationPortCheckByDeclarationNumber'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDeclarationPortCheckByDeclarationNumber' operation.</returns>
            QueryResult<Declaration> EndGetDeclarationPortCheckByDeclarationNumber(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDistrict' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetDistrictDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetDistrict", ReplyAction="http://tempuri.org/CustomsAtomService/GetDistrictResponse")]
            [WebGet()]
            IAsyncResult BeginGetDistrict(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDistrict'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDistrict'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDistrict' operation.</returns>
            QueryResult<District> EndGetDistrict(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDocument' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetDocumentDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetDocument", ReplyAction="http://tempuri.org/CustomsAtomService/GetDocumentResponse")]
            [WebGet()]
            IAsyncResult BeginGetDocument(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDocument'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDocument'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDocument' operation.</returns>
            QueryResult<Document> EndGetDocument(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDocumentType' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetDocumentTypeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetDocumentType", ReplyAction="http://tempuri.org/CustomsAtomService/GetDocumentTypeResponse")]
            [WebGet()]
            IAsyncResult BeginGetDocumentType(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDocumentType'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDocumentType'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDocumentType' operation.</returns>
            QueryResult<DocumentType> EndGetDocumentType(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDoubleCheckDeclaration' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetDoubleCheckDeclarationDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetDoubleCheckDeclaration", ReplyAction="http://tempuri.org/CustomsAtomService/GetDoubleCheckDeclarationResponse")]
            [WebGet()]
            IAsyncResult BeginGetDoubleCheckDeclaration(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDoubleCheckDeclaration'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDoubleCheckDeclaration'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDoubleCheckDeclaration' operation.</returns>
            QueryResult<DoubleCheckDeclaration> EndGetDoubleCheckDeclaration(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDoubleCheckDeclarationByApproveNumber' operation.
            /// </summary>
            /// <param name="approveNumber">The value for the 'approveNumber' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetDoubleCheckDeclarationByApproveNumberDom" +
                "ainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetDoubleCheckDeclarationByApproveNumber", ReplyAction="http://tempuri.org/CustomsAtomService/GetDoubleCheckDeclarationByApproveNumberRes" +
                "ponse")]
            [WebGet()]
            IAsyncResult BeginGetDoubleCheckDeclarationByApproveNumber(string approveNumber, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDoubleCheckDeclarationByApproveNumber'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDoubleCheckDeclarationByApproveNumber'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDoubleCheckDeclarationByApproveNumber' operation.</returns>
            QueryResult<DoubleCheckDeclaration> EndGetDoubleCheckDeclarationByApproveNumber(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDoubleCheckDeclarationByDelarationID' operation.
            /// </summary>
            /// <param name="id">The value for the 'id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetDoubleCheckDeclarationByDelarationIDDoma" +
                "inServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetDoubleCheckDeclarationByDelarationID", ReplyAction="http://tempuri.org/CustomsAtomService/GetDoubleCheckDeclarationByDelarationIDResp" +
                "onse")]
            [WebGet()]
            IAsyncResult BeginGetDoubleCheckDeclarationByDelarationID(int id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDoubleCheckDeclarationByDelarationID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDoubleCheckDeclarationByDelarationID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDoubleCheckDeclarationByDelarationID' operation.</returns>
            QueryResult<DoubleCheckDeclaration> EndGetDoubleCheckDeclarationByDelarationID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDoubleCheckDeclarationByDelarationNumber' operation.
            /// </summary>
            /// <param name="declarationNumber">The value for the 'declarationNumber' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetDoubleCheckDeclarationByDelarationNumber" +
                "DomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetDoubleCheckDeclarationByDelarationNumber" +
                "", ReplyAction="http://tempuri.org/CustomsAtomService/GetDoubleCheckDeclarationByDelarationNumber" +
                "Response")]
            [WebGet()]
            IAsyncResult BeginGetDoubleCheckDeclarationByDelarationNumber(string declarationNumber, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDoubleCheckDeclarationByDelarationNumber'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDoubleCheckDeclarationByDelarationNumber'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDoubleCheckDeclarationByDelarationNumber' operation.</returns>
            QueryResult<DoubleCheckDeclaration> EndGetDoubleCheckDeclarationByDelarationNumber(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDoubleCheckDeclarationItem' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetDoubleCheckDeclarationItemDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetDoubleCheckDeclarationItem", ReplyAction="http://tempuri.org/CustomsAtomService/GetDoubleCheckDeclarationItemResponse")]
            [WebGet()]
            IAsyncResult BeginGetDoubleCheckDeclarationItem(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDoubleCheckDeclarationItem'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDoubleCheckDeclarationItem'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDoubleCheckDeclarationItem' operation.</returns>
            QueryResult<DoubleCheckDeclarationItem> EndGetDoubleCheckDeclarationItem(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDuty' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetDutyDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetDuty", ReplyAction="http://tempuri.org/CustomsAtomService/GetDutyResponse")]
            [WebGet()]
            IAsyncResult BeginGetDuty(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDuty'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDuty'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDuty' operation.</returns>
            QueryResult<Duty> EndGetDuty(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetExaminationByIDs' operation.
            /// </summary>
            /// <param name="ids">The value for the 'ids' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetExaminationByIDsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetExaminationByIDs", ReplyAction="http://tempuri.org/CustomsAtomService/GetExaminationByIDsResponse")]
            [WebGet()]
            IAsyncResult BeginGetExaminationByIDs(IEnumerable<int> ids, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetExaminationByIDs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetExaminationByIDs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetExaminationByIDs' operation.</returns>
            QueryResult<Examination> EndGetExaminationByIDs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetExaminationsByNumber' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="numbers">The value for the 'numbers' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetExaminationsByNumberDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetExaminationsByNumber", ReplyAction="http://tempuri.org/CustomsAtomService/GetExaminationsByNumberResponse")]
            [WebGet()]
            IAsyncResult BeginGetExaminationsByNumber(int userID, string numbers, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetExaminationsByNumber'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetExaminationsByNumber'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetExaminationsByNumber' operation.</returns>
            QueryResult<Examination> EndGetExaminationsByNumber(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetExaminationsByReceiveDate' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="from">The value for the 'from' parameter of this action.</param>
            /// <param name="to">The value for the 'to' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetExaminationsByReceiveDateDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetExaminationsByReceiveDate", ReplyAction="http://tempuri.org/CustomsAtomService/GetExaminationsByReceiveDateResponse")]
            [WebGet()]
            IAsyncResult BeginGetExaminationsByReceiveDate(int userID, DateTime from, DateTime to, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetExaminationsByReceiveDate'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetExaminationsByReceiveDate'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetExaminationsByReceiveDate' operation.</returns>
            QueryResult<Examination> EndGetExaminationsByReceiveDate(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetExistingTransferNumbers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetExistingTransferNumbersDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetExistingTransferNumbers", ReplyAction="http://tempuri.org/CustomsAtomService/GetExistingTransferNumbersResponse")]
            IAsyncResult BeginGetExistingTransferNumbers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetExistingTransferNumbers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetExistingTransferNumbers'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'GetExistingTransferNumbers' operation.</returns>
            IEnumerable<string> EndGetExistingTransferNumbers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFeeMark' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetFeeMarkDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetFeeMark", ReplyAction="http://tempuri.org/CustomsAtomService/GetFeeMarkResponse")]
            [WebGet()]
            IAsyncResult BeginGetFeeMark(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFeeMark'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFeeMark'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFeeMark' operation.</returns>
            QueryResult<FeeMark> EndGetFeeMark(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFeeType' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetFeeTypeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetFeeType", ReplyAction="http://tempuri.org/CustomsAtomService/GetFeeTypeResponse")]
            [WebGet()]
            IAsyncResult BeginGetFeeType(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFeeType'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFeeType'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFeeType' operation.</returns>
            QueryResult<FeeType> EndGetFeeType(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFinancialDeclarationByExaminationIDs' operation.
            /// </summary>
            /// <param name="ids">The value for the 'ids' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetFinancialDeclarationByExaminationIDsDoma" +
                "inServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetFinancialDeclarationByExaminationIDs", ReplyAction="http://tempuri.org/CustomsAtomService/GetFinancialDeclarationByExaminationIDsResp" +
                "onse")]
            [WebGet()]
            IAsyncResult BeginGetFinancialDeclarationByExaminationIDs(IEnumerable<int> ids, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFinancialDeclarationByExaminationIDs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFinancialDeclarationByExaminationIDs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFinancialDeclarationByExaminationIDs' operation.</returns>
            QueryResult<FinancialExportDeclaration> EndGetFinancialDeclarationByExaminationIDs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFinancialExportDeclaration' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetFinancialExportDeclarationDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetFinancialExportDeclaration", ReplyAction="http://tempuri.org/CustomsAtomService/GetFinancialExportDeclarationResponse")]
            [WebGet()]
            IAsyncResult BeginGetFinancialExportDeclaration(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFinancialExportDeclaration'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFinancialExportDeclaration'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFinancialExportDeclaration' operation.</returns>
            QueryResult<FinancialExportDeclaration> EndGetFinancialExportDeclaration(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetHSCodeDictionary' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetHSCodeDictionaryDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetHSCodeDictionary", ReplyAction="http://tempuri.org/CustomsAtomService/GetHSCodeDictionaryResponse")]
            [WebGet()]
            IAsyncResult BeginGetHSCodeDictionary(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetHSCodeDictionary'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetHSCodeDictionary'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetHSCodeDictionary' operation.</returns>
            QueryResult<HSCodeDictionary> EndGetHSCodeDictionary(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetLevy' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetLevyDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetLevy", ReplyAction="http://tempuri.org/CustomsAtomService/GetLevyResponse")]
            [WebGet()]
            IAsyncResult BeginGetLevy(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLevy'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLevy'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLevy' operation.</returns>
            QueryResult<Levy> EndGetLevy(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetLoginHistory' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetLoginHistoryDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetLoginHistory", ReplyAction="http://tempuri.org/CustomsAtomService/GetLoginHistoryResponse")]
            [WebGet()]
            IAsyncResult BeginGetLoginHistory(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLoginHistory'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLoginHistory'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLoginHistory' operation.</returns>
            QueryResult<LoginHistory> EndGetLoginHistory(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetLoginHistoryByDate' operation.
            /// </summary>
            /// <param name="from">The value for the 'from' parameter of this action.</param>
            /// <param name="to">The value for the 'to' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetLoginHistoryByDateDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetLoginHistoryByDate", ReplyAction="http://tempuri.org/CustomsAtomService/GetLoginHistoryByDateResponse")]
            [WebGet()]
            IAsyncResult BeginGetLoginHistoryByDate(DateTime from, DateTime to, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLoginHistoryByDate'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLoginHistoryByDate'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLoginHistoryByDate' operation.</returns>
            QueryResult<LoginHistory> EndGetLoginHistoryByDate(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMachineNameIPMapping' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetMachineNameIPMappingDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetMachineNameIPMapping", ReplyAction="http://tempuri.org/CustomsAtomService/GetMachineNameIPMappingResponse")]
            [WebGet()]
            IAsyncResult BeginGetMachineNameIPMapping(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMachineNameIPMapping'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMachineNameIPMapping'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMachineNameIPMapping' operation.</returns>
            QueryResult<MachineNameIPMapping> EndGetMachineNameIPMapping(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPay' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetPayDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetPay", ReplyAction="http://tempuri.org/CustomsAtomService/GetPayResponse")]
            [WebGet()]
            IAsyncResult BeginGetPay(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPay'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPay'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPay' operation.</returns>
            QueryResult<Pay> EndGetPay(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPort' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetPortDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetPort", ReplyAction="http://tempuri.org/CustomsAtomService/GetPortResponse")]
            [WebGet()]
            IAsyncResult BeginGetPort(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPort'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPort'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPort' operation.</returns>
            QueryResult<Port> EndGetPort(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPurpose' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetPurposeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetPurpose", ReplyAction="http://tempuri.org/CustomsAtomService/GetPurposeResponse")]
            [WebGet()]
            IAsyncResult BeginGetPurpose(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPurpose'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPurpose'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPurpose' operation.</returns>
            QueryResult<Purpose> EndGetPurpose(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRole' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetRoleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetRole", ReplyAction="http://tempuri.org/CustomsAtomService/GetRoleResponse")]
            [WebGet()]
            IAsyncResult BeginGetRole(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRole'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRole'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRole' operation.</returns>
            QueryResult<Role> EndGetRole(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRoleAccess' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetRoleAccessDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetRoleAccess", ReplyAction="http://tempuri.org/CustomsAtomService/GetRoleAccessResponse")]
            [WebGet()]
            IAsyncResult BeginGetRoleAccess(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRoleAccess'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRoleAccess'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRoleAccess' operation.</returns>
            QueryResult<RoleAccess> EndGetRoleAccess(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSettings' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetSettingsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetSettings", ReplyAction="http://tempuri.org/CustomsAtomService/GetSettingsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSettings(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSettings'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSettings'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSettings' operation.</returns>
            QueryResult<Setting> EndGetSettings(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTrade' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetTradeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetTrade", ReplyAction="http://tempuri.org/CustomsAtomService/GetTradeResponse")]
            [WebGet()]
            IAsyncResult BeginGetTrade(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTrade'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTrade'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTrade' operation.</returns>
            QueryResult<Trade> EndGetTrade(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTransaction' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetTransactionDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetTransaction", ReplyAction="http://tempuri.org/CustomsAtomService/GetTransactionResponse")]
            [WebGet()]
            IAsyncResult BeginGetTransaction(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTransaction'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTransaction'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTransaction' operation.</returns>
            QueryResult<Transaction> EndGetTransaction(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTransport' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetTransportDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetTransport", ReplyAction="http://tempuri.org/CustomsAtomService/GetTransportResponse")]
            [WebGet()]
            IAsyncResult BeginGetTransport(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTransport'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTransport'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTransport' operation.</returns>
            QueryResult<Transport> EndGetTransport(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUIGroup' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetUIGroupDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetUIGroup", ReplyAction="http://tempuri.org/CustomsAtomService/GetUIGroupResponse")]
            [WebGet()]
            IAsyncResult BeginGetUIGroup(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUIGroup'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUIGroup'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUIGroup' operation.</returns>
            QueryResult<UIGroup> EndGetUIGroup(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUIPage' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetUIPageDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetUIPage", ReplyAction="http://tempuri.org/CustomsAtomService/GetUIPageResponse")]
            [WebGet()]
            IAsyncResult BeginGetUIPage(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUIPage'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUIPage'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUIPage' operation.</returns>
            QueryResult<UIPage> EndGetUIPage(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUnit' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetUnitDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetUnit", ReplyAction="http://tempuri.org/CustomsAtomService/GetUnitResponse")]
            [WebGet()]
            IAsyncResult BeginGetUnit(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUnit'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUnit'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUnit' operation.</returns>
            QueryResult<Unit> EndGetUnit(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetUser", ReplyAction="http://tempuri.org/CustomsAtomService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserGroup' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetUserGroupDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetUserGroup", ReplyAction="http://tempuri.org/CustomsAtomService/GetUserGroupResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserGroup(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserGroup'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserGroup'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUserGroup' operation.</returns>
            QueryResult<UserGroup> EndGetUserGroup(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserGroupCustomer' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetUserGroupCustomerDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetUserGroupCustomer", ReplyAction="http://tempuri.org/CustomsAtomService/GetUserGroupCustomerResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserGroupCustomer(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserGroupCustomer'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserGroupCustomer'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUserGroupCustomer' operation.</returns>
            QueryResult<UserGroupCustomer> EndGetUserGroupCustomer(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserRole' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetUserRoleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetUserRole", ReplyAction="http://tempuri.org/CustomsAtomService/GetUserRoleResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserRole(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserRole'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserRole'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUserRole' operation.</returns>
            QueryResult<UserRole> EndGetUserRole(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetWrap' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetWrapDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetWrap", ReplyAction="http://tempuri.org/CustomsAtomService/GetWrapResponse")]
            [WebGet()]
            IAsyncResult BeginGetWrap(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetWrap'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetWrap'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetWrap' operation.</returns>
            QueryResult<Wrap> EndGetWrap(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetYSValidImage' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/GetYSValidImageDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/GetYSValidImage", ReplyAction="http://tempuri.org/CustomsAtomService/GetYSValidImageResponse")]
            IAsyncResult BeginGetYSValidImage(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetYSValidImage'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetYSValidImage'.</param>
            /// <returns>The 'Byte[]' returned from the 'GetYSValidImage' operation.</returns>
            byte[] EndGetYSValidImage(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userAlias">The value for the 'userAlias' parameter of this action.</param>
            /// <param name="pwd">The value for the 'pwd' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/Login", ReplyAction="http://tempuri.org/CustomsAtomService/LoginResponse")]
            [WebGet()]
            IAsyncResult BeginLogin(string userAlias, string pwd, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ProcessUploadedImages' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/ProcessUploadedImagesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/ProcessUploadedImages", ReplyAction="http://tempuri.org/CustomsAtomService/ProcessUploadedImagesResponse")]
            IAsyncResult BeginProcessUploadedImages(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginProcessUploadedImages'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginProcessUploadedImages'.</param>
            void EndProcessUploadedImages(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'RefreshDeclaration' operation.
            /// </summary>
            /// <param name="declarationID">The value for the 'declarationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/RefreshDeclarationDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/RefreshDeclaration", ReplyAction="http://tempuri.org/CustomsAtomService/RefreshDeclarationResponse")]
            IAsyncResult BeginRefreshDeclaration(int declarationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginRefreshDeclaration'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginRefreshDeclaration'.</param>
            void EndRefreshDeclaration(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'RefreshDeclarationPortCheck' operation.
            /// </summary>
            /// <param name="declarationNumbers">The value for the 'declarationNumbers' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/RefreshDeclarationPortCheckDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/RefreshDeclarationPortCheck", ReplyAction="http://tempuri.org/CustomsAtomService/RefreshDeclarationPortCheckResponse")]
            [WebGet()]
            IAsyncResult BeginRefreshDeclarationPortCheck(string declarationNumbers, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginRefreshDeclarationPortCheck'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginRefreshDeclarationPortCheck'.</param>
            /// <returns>The 'QueryResult' returned from the 'RefreshDeclarationPortCheck' operation.</returns>
            QueryResult<Declaration> EndRefreshDeclarationPortCheck(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SetDoubleCheckMachineByIds' operation.
            /// </summary>
            /// <param name="ids">The value for the 'ids' parameter of this action.</param>
            /// <param name="machineName">The value for the 'machineName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/SetDoubleCheckMachineByIdsDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/SetDoubleCheckMachineByIds", ReplyAction="http://tempuri.org/CustomsAtomService/SetDoubleCheckMachineByIdsResponse")]
            IAsyncResult BeginSetDoubleCheckMachineByIds(IEnumerable<int> ids, string machineName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSetDoubleCheckMachineByIds'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSetDoubleCheckMachineByIds'.</param>
            void EndSetDoubleCheckMachineByIds(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UpdateDeclarationStatus' operation.
            /// </summary>
            /// <param name="ids">The value for the 'ids' parameter of this action.</param>
            /// <param name="status">The value for the 'status' parameter of this action.</param>
            /// <param name="remark">The value for the 'remark' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/UpdateDeclarationStatusDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/UpdateDeclarationStatus", ReplyAction="http://tempuri.org/CustomsAtomService/UpdateDeclarationStatusResponse")]
            IAsyncResult BeginUpdateDeclarationStatus(string ids, string status, string remark, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUpdateDeclarationStatus'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUpdateDeclarationStatus'.</param>
            /// <returns>The 'Int32' returned from the 'UpdateDeclarationStatus' operation.</returns>
            int EndUpdateDeclarationStatus(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UpdateDrawbackStatus' operation.
            /// </summary>
            /// <param name="ids">The value for the 'ids' parameter of this action.</param>
            /// <param name="status">The value for the 'status' parameter of this action.</param>
            /// <param name="remark">The value for the 'remark' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/UpdateDrawbackStatusDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/UpdateDrawbackStatus", ReplyAction="http://tempuri.org/CustomsAtomService/UpdateDrawbackStatusResponse")]
            IAsyncResult BeginUpdateDrawbackStatus(string ids, string status, string remark, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUpdateDrawbackStatus'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUpdateDrawbackStatus'.</param>
            /// <returns>The 'Int32' returned from the 'UpdateDrawbackStatus' operation.</returns>
            int EndUpdateDrawbackStatus(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'YSLogin' operation.
            /// </summary>
            /// <param name="code">The value for the 'code' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/YSLoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/YSLogin", ReplyAction="http://tempuri.org/CustomsAtomService/YSLoginResponse")]
            IAsyncResult BeginYSLogin(string code, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginYSLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginYSLogin'.</param>
            /// <returns>The 'Boolean' returned from the 'YSLogin' operation.</returns>
            bool EndYSLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'YSQuery' operation.
            /// </summary>
            /// <param name="declarationNumber">The value for the 'declarationNumber' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/YSQueryDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/YSQuery", ReplyAction="http://tempuri.org/CustomsAtomService/YSQueryResponse")]
            [WebGet()]
            IAsyncResult BeginYSQuery(string declarationNumber, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginYSQuery'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginYSQuery'.</param>
            /// <returns>The 'QueryResult' returned from the 'YSQuery' operation.</returns>
            QueryResult<YSExaminationData> EndYSQuery(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'YSQueryByDate' operation.
            /// </summary>
            /// <param name="start">The value for the 'start' parameter of this action.</param>
            /// <param name="end">The value for the 'end' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/YSQueryByDateDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/YSQueryByDate", ReplyAction="http://tempuri.org/CustomsAtomService/YSQueryByDateResponse")]
            [WebGet()]
            IAsyncResult BeginYSQueryByDate(DateTime start, DateTime end, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginYSQueryByDate'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginYSQueryByDate'.</param>
            /// <returns>The 'QueryResult' returned from the 'YSQueryByDate' operation.</returns>
            QueryResult<YSExaminationData> EndYSQueryByDate(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'YSQueryByDeclarationNumbers' operation.
            /// </summary>
            /// <param name="declarationNumbers">The value for the 'declarationNumbers' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/YSQueryByDeclarationNumbersDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/YSQueryByDeclarationNumbers", ReplyAction="http://tempuri.org/CustomsAtomService/YSQueryByDeclarationNumbersResponse")]
            [WebGet()]
            IAsyncResult BeginYSQueryByDeclarationNumbers(string declarationNumbers, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginYSQueryByDeclarationNumbers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginYSQueryByDeclarationNumbers'.</param>
            /// <returns>The 'QueryResult' returned from the 'YSQueryByDeclarationNumbers' operation.</returns>
            QueryResult<YSExaminationData> EndYSQueryByDeclarationNumbers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomsAtomService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomsAtomService/SubmitChanges", ReplyAction="http://tempuri.org/CustomsAtomService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class CustomsAtomContextEntityContainer : EntityContainer
        {
            
            public CustomsAtomContextEntityContainer()
            {
                this.CreateEntitySet<Boss>(EntitySetOperations.All);
                this.CreateEntitySet<Corporation>(EntitySetOperations.All);
                this.CreateEntitySet<Country>(EntitySetOperations.None);
                this.CreateEntitySet<Currency>(EntitySetOperations.None);
                this.CreateEntitySet<Customer>(EntitySetOperations.All);
                this.CreateEntitySet<CustomerFeeSetting>(EntitySetOperations.All);
                this.CreateEntitySet<Customhouse>(EntitySetOperations.None);
                this.CreateEntitySet<CustomsUser>(EntitySetOperations.All);
                this.CreateEntitySet<Declaration>(EntitySetOperations.All);
                this.CreateEntitySet<DeclarationContainer>(EntitySetOperations.All);
                this.CreateEntitySet<DeclarationDocument>(EntitySetOperations.All);
                this.CreateEntitySet<DeclarationImage>(EntitySetOperations.All);
                this.CreateEntitySet<DeclarationItem>(EntitySetOperations.All);
                this.CreateEntitySet<DeclarationPortCheckResult>(EntitySetOperations.None);
                this.CreateEntitySet<District>(EntitySetOperations.None);
                this.CreateEntitySet<Document>(EntitySetOperations.None);
                this.CreateEntitySet<DocumentType>(EntitySetOperations.None);
                this.CreateEntitySet<DoubleCheckDeclaration>(EntitySetOperations.All);
                this.CreateEntitySet<DoubleCheckDeclarationItem>(EntitySetOperations.All);
                this.CreateEntitySet<DoubleCheckDeclarationVarifyResult>(EntitySetOperations.None);
                this.CreateEntitySet<Duty>(EntitySetOperations.None);
                this.CreateEntitySet<Examination>(EntitySetOperations.All);
                this.CreateEntitySet<FeeMark>(EntitySetOperations.None);
                this.CreateEntitySet<FeeType>(EntitySetOperations.All);
                this.CreateEntitySet<FinancialExportDeclaration>(EntitySetOperations.All);
                this.CreateEntitySet<GetAllDeclarationByReceiveDateResult>(EntitySetOperations.None);
                this.CreateEntitySet<GetAllFinancialDeclaration>(EntitySetOperations.None);
                this.CreateEntitySet<HSCodeDictionary>(EntitySetOperations.None);
                this.CreateEntitySet<Levy>(EntitySetOperations.None);
                this.CreateEntitySet<LoginHistory>(EntitySetOperations.All);
                this.CreateEntitySet<MachineNameIPMapping>(EntitySetOperations.All);
                this.CreateEntitySet<Pay>(EntitySetOperations.None);
                this.CreateEntitySet<Port>(EntitySetOperations.None);
                this.CreateEntitySet<Purpose>(EntitySetOperations.None);
                this.CreateEntitySet<Role>(EntitySetOperations.None);
                this.CreateEntitySet<RoleAccess>(EntitySetOperations.All);
                this.CreateEntitySet<Setting>(EntitySetOperations.None);
                this.CreateEntitySet<Trade>(EntitySetOperations.None);
                this.CreateEntitySet<Transaction>(EntitySetOperations.None);
                this.CreateEntitySet<Transport>(EntitySetOperations.None);
                this.CreateEntitySet<UIGroup>(EntitySetOperations.None);
                this.CreateEntitySet<UIPage>(EntitySetOperations.None);
                this.CreateEntitySet<Unit>(EntitySetOperations.None);
                this.CreateEntitySet<User>(EntitySetOperations.All);
                this.CreateEntitySet<UserGroup>(EntitySetOperations.All);
                this.CreateEntitySet<UserGroupCustomer>(EntitySetOperations.All);
                this.CreateEntitySet<UserRole>(EntitySetOperations.All);
                this.CreateEntitySet<Wrap>(EntitySetOperations.None);
                this.CreateEntitySet<YSExaminationData>(EntitySetOperations.None);
            }
        }
    }
}
